{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","text_tokens":["[","docs","yml","commands"," ","server","for","and","reloading","layout","site","message","#","org","homepage","print","a","new","index","the","this",",","-","markdown","pages","]","full","create","configuration","...","files",".","help","name","images","other","project","/","build","to","file","dir","start","mkdocs","documentation","md","visit","live","serve","welcome"],"title":"Welcome to MkDocs","title_tokens":["mkdocs"," ","to","welcome"]},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","text_tokens":["full",".","org"," ","for","mkdocs","documentation","visit"],"title":"Welcome to MkDocs","title_tokens":["mkdocs"," ","to","welcome"]},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","text_tokens":["[","docs"," ","server","reloading","site","message","print","a","new","the","this","-","]","create",".","help","name","project","build","dir","start","mkdocs","documentation","live","serve"],"title":"Commands","title_tokens":["commands"]},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","text_tokens":["docs","yml"," ","and","#","homepage","index","the",",","markdown","pages","...","configuration","files",".","images","other","/","file","mkdocs","documentation","md"],"title":"Project layout","title_tokens":[" ","layout","project"]},{"location":"Golang/Basic/channel/","text":"channel what is channel channel是goroutine和goroutine之间无锁交流的【媒介】，换句话说，channel是一种允许一个goroutine发送数据给另外一个goroutine的技术，默认的channel是双向的，意味着goroutines可以通过同一个channel发、收数据。 how syntax var Channel_name chan Type channel_name := make(chan Type) 在golang中, 我们用关键字 Channel_name chan Type 创建某种类型的channel，其中channel仅仅可以传递同种类型的数据，不同类型的数据不可以通过一个类型的channel传递。 Send and Receive Data From a Channel 在golang中，channel主要有两个操作，一个是 sending ，一个是 receiving ，这两种操作被称为通讯。 <- 箭头的方向表明是发送数据还是接受数据。在默认情况下，channel中的发送、接受操作块【直到另一端未就绪】 ，允许goroutine之间在没有显式锁或者条件变量的时候互相同步 发送操作：在channel的帮助下用来将goroutine的数据发送给另外一个goroutine，通过channel发送 float64 ， int ， bool 是安全切容易的，因为这些值会被 拷贝 一份，不会有意外并发的风险，同样的， strings 类型也是安全的，因为它是 immutable（不可更改） 。在发送 pointers 或者 slice ， map 等引用的时候，channel是不安全的，因为指针或者引用会被发送者或者接收者在同一时间修改，结果是不可预知的，因此需要==确保只有一个goroutine能够访问== Mychannel <- element 表明了数据（element）发送给了Mychannel 接受操作： element := <- Mychannel package main import \"fmt\" func main () { fmt . Println ( \"starting Main method\" ) ch := make ( chan int ) go myfunc ( ch ) ch <- 23 fmt . Println ( \"End Main method\" ) } func myfunc ( ch chan int ) { fmt . Println ( 234 + <- ch ) } Closing a Channel close() 这是一个内置函数，设了一个表示表明不会再有值发送给该channel。 ele, ok = <- Mychannel 通过循环，接受者会检查该channel是打开的还是关闭的，如果ok是真，则意味着该channel是打开的。 package main import \"fmt\" func main () { c := make ( chan string ) // 调用goroutine go myFunc ( c ) for { res , ok := <- c if ok == false { fmt . Println ( \"Channel Close\" , ok ) break } fmt . Println ( \"Channel Open\" , res , ok ) } } func myFunc ( mychnl chan string ) { for v := 0 ; v < 4 ; v ++ { mychnl <- \"GeeksforGeeks\" } close ( mychnl ) } Blocking Send and Receive 在channel中，当数据发送给一个channel，直到另外的goroutine读取这个channel前，发送的声明是被阻塞的（发送完后必须等待该信息被读取才能够继续发送）。同样的，当一个channel接受数据的时候在接收到数据前都是被阻塞的。 channel中的零值是 nil 。 for 循环可以迭代channel中所有连续的值，直到该channel。 package main import \"fmt\" func main () { mychnl := make ( chan string ) go func () { mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" mychnl <- \"asdjjak\" close ( mychnl ) }() for res := range mychnl { fmt . Println ( res ) } } Length of the Channel len() 表明在channel缓冲区中==值的数量== package main import \"fmt\" func main () { mychnl := make ( chan string , 4 ) mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" mychnl <- \"asdjjak\" fmt . Println ( \"Length of the channel is:\" , len ( mychnl )) } Capacity of the Channel cap() 表明channel缓冲区的大小 package main import \"fmt\" func main () { mychnl := make ( chan string , 8 ) mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" fmt . Println ( \"Capacity of the channel is:\" , cap ( mychnl )) }","text_tokens":["length","真","同步","。","就绪","不","myfunc","这些","可以","无锁","发送数据","值会","用","修改","一种","也","immutable","了","\"","中","一时间","需要",";","函数","发送者","starting","有","另外","mychannel","表示","chan","main","func","引用",".","name","receiving","range","if","golang","ok","一时","前","/","会","声明","goroutine","拷贝","关键","++","import","读取","指针","slice","变量","+","都","和","go","method","锁","float64","数量","切","gfg","关键字","两种","一端","var","收","未","package",":","安全","信息","同一","发","通过","from","capacity","阻塞","the","主要","操作","）","访问","检查","必须",")","意味","pointers","到","=","234","goroutines","等","fmt","确保","它","int","直到","abc","时候","】","是","技术","一份","当","将","ele","asdjjak","关闭","同一时间","mychnl","迭代","cap","asdjh","不同","同一时","接收","不会","循环","这个","传递","这是","what","另一端","等待","才","}","and","表明","（","发送","还是","(","只有","发送给","数据","v","how","意外","两个","某种","类型","设","【","make","{","显式","sending","open","channel","的","：","仅仅","end","len","close","of","_","预知","这","被","ch","帮助","该","string","geeksforgeeks","、","不可","默认","map","缓冲","在","之间","同一个","容易","syntax","is","并发","更改","通讯","下","23","blocking","零值","大小","互相","break","一个","内置","打开","连续","如果","我们","受者","方向","完后","其中","换句","能够","c","data","调用","创建","4"," ","结果","for","接收者","<","因为","element","换句话说","nil","println","接受者","因此","false","情况","媒介","值","receive","res","同种","a","给",",","-","称为","或者","用来","同样","strings","缓冲区","send","0","箭头","bool","换句话","，","再有","接受","继续","type","意味着","双向","条件","所有","没有","closing","时间","块","交流","风险","则","8","允许","送给"],"title":"channel","title_tokens":["channel"]},{"location":"Golang/Basic/channel/#channel","text":"","text_tokens":[],"title":"channel","title_tokens":["channel"]},{"location":"Golang/Basic/channel/#what-is-channel","text":"channel是goroutine和goroutine之间无锁交流的【媒介】，换句话说，channel是一种允许一个goroutine发送数据给另外一个goroutine的技术，默认的channel是双向的，意味着goroutines可以通过同一个channel发、收数据。","text_tokens":["换句","和","。","可以","无锁","发送数据","一种","换句话说","发送","收","媒介","数据","同一","发","通过","另外","【","给","channel","的","意味","goroutines","换句话","、","，","默认","goroutine","是","之间","】","技术","同一个","意味着","双向","一个","交流","允许"],"title":"what is channel","title_tokens":["channel"," ","is","what"]},{"location":"Golang/Basic/channel/#how","text":"syntax var Channel_name chan Type channel_name := make(chan Type) 在golang中, 我们用关键字 Channel_name chan Type 创建某种类型的channel，其中channel仅仅可以传递同种类型的数据，不同类型的数据不可以通过一个类型的channel传递。","text_tokens":["传递","创建","。"," ","不","可以","关键字","用","var","(","中",":","数据","某种","类型","通过","同种","make",",","chan","channel",")","的","仅仅","=","name","_","golang","，","type","在","syntax","关键","一个","不同","我们","其中"],"title":"how","title_tokens":["how"]},{"location":"Golang/Basic/channel/#send-and-receive-data-from-a-channel","text":"在golang中，channel主要有两个操作，一个是 sending ，一个是 receiving ，这两种操作被称为通讯。 <- 箭头的方向表明是发送数据还是接受数据。在默认情况下，channel中的发送、接受操作块【直到另一端未就绪】 ，允许goroutine之间在没有显式锁或者条件变量的时候互相同步 发送操作：在channel的帮助下用来将goroutine的数据发送给另外一个goroutine，通过channel发送 float64 ， int ， bool 是安全切容易的，因为这些值会被 拷贝 一份，不会有意外并发的风险，同样的， strings 类型也是安全的，因为它是 immutable（不可更改） 。在发送 pointers 或者 slice ， map 等引用的时候，channel是不安全的，因为指针或者引用会被发送者或者接收者在同一时间修改，结果是不可预知的，因此需要==确保只有一个goroutine能够访问== Mychannel <- element 表明了数据（element）发送给了Mychannel 接受操作： element := <- Mychannel package main import \"fmt\" func main () { fmt . Println ( \"starting Main method\" ) ch := make ( chan int ) go myfunc ( ch ) ch <- 23 fmt . Println ( \"End Main method\" ) } func myfunc ( ch chan int ) { fmt . Println ( 234 + <- ch ) }","text_tokens":["同步","。","就绪","不","myfunc","这些","发送数据","值会","修改","也","immutable","了","\"","中","一时间","需要","发送者","starting","有","另外","mychannel","main","func","chan","引用",".","receiving","golang","一时","会","goroutine","拷贝","import","指针","slice","变量","+","go","method","锁","float64","切","两种","一端","未","package","安全",":","同一","通过","主要","操作","）","访问",")","pointers","=","234","等","fmt","确保","它","int","直到","时候","】","是","一份","将","同一时间","同一时","接收","不会","另一端","}","表明","（","发送","还是","(","只有","发送给","数据","意外","两个","类型","【","{","make","显式","sending","channel","的","：","end","预知","ch","这","被","帮助","、","不可","默认","map","在","之间","容易","并发","更改","23","通讯","下","互相","一个","方向","能够"," ","结果","接收者","<","因为","element","println","因此","情况","-","称为","或者","用来","同样","strings","箭头","bool","，","接受","条件","没有","时间","块","风险","允许","送给"],"title":"Send and Receive Data From a Channel","title_tokens":["channel","data"," ","send","receive","and","from","a"]},{"location":"Golang/Basic/channel/#closing-a-channel","text":"close() 这是一个内置函数，设了一个表示表明不会再有值发送给该channel。 ele, ok = <- Mychannel 通过循环，接受者会检查该channel是打开的还是关闭的，如果ok是真，则意味着该channel是打开的。 package main import \"fmt\" func main () { c := make ( chan string ) // 调用goroutine go myFunc ( c ) for { res , ok := <- c if ok == false { fmt . Println ( \"Channel Close\" , ok ) break } fmt . Println ( \"Channel Open\" , res , ok ) } } func myFunc ( mychnl chan string ) { for v := 0 ; v < 4 ; v ++ { mychnl <- \"GeeksforGeeks\" } close ( mychnl ) }","text_tokens":["真","。","myfunc","了","\"",";","函数","mychannel","表示","main","func","chan",".","if","ok","/","会","goroutine","++","import","go","package",":","通过","检查",")","意味","=","fmt","是","ele","关闭","mychnl","不会","循环","这是","}","表明","发送","还是","(","发送给","v","设","{","make","open","channel","的","close","该","string","geeksforgeeks","break","一个","内置","打开","如果","受者","c","调用","4"," ","for","<","println","接受者","false","值","res",",","-","0","，","再有","接受","意味着","则","送给"],"title":"Closing a Channel","title_tokens":["a","channel"," ","closing"]},{"location":"Golang/Basic/channel/#blocking-send-and-receive","text":"在channel中，当数据发送给一个channel，直到另外的goroutine读取这个channel前，发送的声明是被阻塞的（发送完后必须等待该信息被读取才能够继续发送）。同样的，当一个channel接受数据的时候在接收到数据前都是被阻塞的。 channel中的零值是 nil 。 for 循环可以迭代channel中所有连续的值，直到该channel。 package main import \"fmt\" func main () { mychnl := make ( chan string ) go func () { mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" mychnl <- \"asdjjak\" close ( mychnl ) }() for res := range mychnl { fmt . Println ( res ) } }","text_tokens":["循环","这个","go","等待","。"," ","才","for","}","（","<","可以","gfg","nil","发送","\"","println","都","中","(","package","值","发送给","数据",":","信息","res","另外","{","阻塞","make","-","main","func","）","到","chan","channel","的","必须","同样",")","=","close",".","fmt","该","被","string","range","声明","，","前","接受","直到","abc","时候","继续","在","当","goroutine","是","asdjjak","零值","所有","import","mychnl","迭代","读取","一个","连续","asdjh","接收","送给","完后","能够"],"title":"Blocking Send and Receive","title_tokens":["blocking"," ","send","receive","and"]},{"location":"Golang/Basic/channel/#length-of-the-channel","text":"len() 表明在channel缓冲区中==值的数量== package main import \"fmt\" func main () { mychnl := make ( chan string , 4 ) mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" mychnl <- \"asdjjak\" fmt . Println ( \"Length of the channel is:\" , len ( mychnl )) }","text_tokens":["length","4"," ","数量","}","表明","<","gfg","\"","println","(","中","package","值",":","{","make","the",",","-","main","func","chan","channel",")","len","的","缓冲区","=",".","of","fmt","string","abc","缓冲","在","is","asdjjak","import","mychnl","asdjh"],"title":"Length of the Channel","title_tokens":["length","channel","of"," ","the"]},{"location":"Golang/Basic/channel/#capacity-of-the-channel","text":"cap() 表明channel缓冲区的大小 package main import \"fmt\" func main () { mychnl := make ( chan string , 8 ) mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" fmt . Println ( \"Capacity of the channel is:\" , cap ( mychnl )) }","text_tokens":[" ","}","表明","<","gfg","\"","println","(","package",":","capacity","{","make","the",",","-","main","func","chan","channel",")","的","缓冲区","=",".","of","fmt","string","abc","缓冲","is","大小","import","mychnl","cap","8","asdjh"],"title":"Capacity of the Channel","title_tokens":["channel","of"," ","capacity","the"]},{"location":"Golang/Project/01 Config/","text":"go-gin-example 01：配置 Golang 环境安装配置 下载 配置环境变量 文件配置 $ mkdir go-gin-example && cd go-gin-example $ go env -w GO111MODULE = on $ go env -w GOPROXY = https://goproxy.cn,direct $ go mod init [ MODULE_PATH ] $ ls > go.mod mkdir go-gin-example && cd go-gin-example ：创建并切换到项目目录。 go env -w GO111MUDOLE=on ：打开Go module 开关。 go env -w GOPROXY=... ：设置GOPROXY代理，第一个为七牛Go代理， direct 为Go在拉取模块遇到错误会回源到原模块版本的源地址去抓取。 go mod init [Module_Path] ：初始化Go module，产生go.mod文件 module go-gin-example go 1 .12 GOMODULE基础使用 go get ：拉取新的依赖 拉取最新的版本： go get golang/org/x/text@lastest 拉取 master 分支的最新commit： go get golang.org/x/text@master go tidy ：整理依","text_tokens":["。","01","地址","path","https","项目","tidy","回源","环境变","设置","目录","commit",".","模块","初始","golang","/","会","cn","为七牛","基础","环境","版本","变量","拉取","go","依赖","抓取","env",":","切换","org","go111mudole",">","第一","mkdir","]","到","...","遇到","direct","=","最新","原","x","on","go111module","gin","整理","12","分支","mod","新","使用","依","w","的","1","：","@","第一个","goproxy","master","&&","_","配置","在","get","代理","源地址","一个","打开","lastest","[","module","源地","为","创建"," ","环境变量","安装","下载","$","文件","gomodule",",","example","-","init","text","初始化","错误","，","产生","ls","并","开关","cd","去"],"title":"go-gin-example 01：配置","title_tokens":["：","gin","go"," ","01","example","-","配置"]},{"location":"Golang/Project/01 Config/#go-gin-example-01","text":"","text_tokens":[],"title":"go-gin-example 01：配置","title_tokens":["：","gin","go"," ","01","example","-","配置"]},{"location":"Golang/Project/01 Config/#golang","text":"","text_tokens":[],"title":"Golang 环境安装配置","title_tokens":[" ","环境","golang","安装","配置"]},{"location":"Golang/Project/01 Config/#_1","text":"","text_tokens":[],"title":"下载","title_tokens":["下载"]},{"location":"Golang/Project/01 Config/#_2","text":"","text_tokens":[],"title":"配置环境变量","title_tokens":["环境变","环境","变量","环境变量","配置"]},{"location":"Golang/Project/01 Config/#_3","text":"$ mkdir go-gin-example && cd go-gin-example $ go env -w GO111MODULE = on $ go env -w GOPROXY = https://goproxy.cn,direct $ go mod init [ MODULE_PATH ] $ ls > go.mod mkdir go-gin-example && cd go-gin-example ：创建并切换到项目目录。 go env -w GO111MUDOLE=on ：打开Go module 开关。 go env -w GOPROXY=... ：设置GOPROXY代理，第一个为七牛Go代理， direct 为Go在拉取模块遇到错误会回源到原模块版本的源地址去抓取。 go mod init [Module_Path] ：初始化Go module，产生go.mod文件 module go-gin-example go 1 .12","text_tokens":["[","gin","module","go","为","创建","。"," ","拉取","源地","地址","12","抓取","env","path","https","mod","项目",":","回源","切换","go111mudole","$","文件","设置",">","的","第一",",","example","-","mkdir","w","]","到","init","目录","direct","：","...","goproxy","=",".","第一个","模块","原","遇到","&&","_","初始化","初始","错误","，","/","会","cn","产生","ls","为七牛","在","1","on","代理","并","开关","源地址","版本","一个","cd","go111module","打开","去"],"title":"文件配置","title_tokens":["文件","配置"]},{"location":"Golang/Project/01 Config/#gomodule","text":"go get ：拉取新的依赖 拉取最新的版本： go get golang/org/x/text@lastest 拉取 master 分支的最新commit： go get golang.org/x/text@master go tidy ：整理依","text_tokens":["拉取","go","依赖","整理"," ","分支","tidy","新","org","依","的","@","：","master","commit","最新","x",".","text","golang","/","get","版本","lastest"],"title":"GOMODULE基础使用","title_tokens":["基础","gomodule","使用"]},{"location":"Golang/Project/02 API-1/","text":"go-gin-example 02：API-1 初始设置 项目目录 go-gin-example/ ├─conf ├─middleware ├─models ├─pkg ├─routers └─runtime conf：用于存储配置文件 middleware：应用中间件 models：应用数据库模型 pkg：第三方包 routers：路由逻辑处理 runtime：应用运行时数据 添加Go Modules Replace配置本地模块路径 （好像不必要） module go-gin-example go 1.12 require (···) replace ( ./go-gin-example/conf => ./go-gin-example/pkg/conf ./go-gin-example/middleware => ./go-gin-example/middleware ./go-gin-example/models => ./go-gin-example/models ./go-gin-example/pkg/e => ./go-gin-example/pkg/e ./go-gin-example/pkg/setting => ./go-gin-example/pkg/setting ./go-gin-example/pkg/util => ./go-gin-example/pkg/util ./go-gin-example/routers => ./go-gin-example/routers ) # 用 replace 将其指定读取本地的模块路径，这样子就可以解决本地模块读取的问题 使用ini配置文件库/编写项目配置包 应用配置文件 将公共配置部分提取出来，写成专门的配置文件，统一写数据库环境、服务器环境等。 在 ./conf 目录下新建 app.ini 文件 定义RUN_MODE 定义数据库端口、账号、表格等 定义公共参数：分页 定义服务器端口、TIMEOUT时间等 # debug or release RUN_MODE = debug [app] PAGE_SIZE = 10 JWT_SECRET = 23347$040412 [server] HTTP_PORT = 8000 READ_TIMEOUT = 60 WRITE_TIMEOUT = 60 [database] TYPE = mysql USER = root # 数据库账号 PASSWORD = root # 数据库密码 HOST = 127.0.0.1:3306 # 数据库IP:数据库端口号 NAME = blog TABLE_PREFIX = blog_ 调用配置的setting模块 负责调用app.ini go get -u github.com/go-ini/ini 在 ./pkg/setting 目录下新建 setting.go 文件 package setting import ( \"log\" \"time\" \"github.com/go-ini/ini\" ) var ( Cfg * ini . File // Cfg为ini文件类型 // 声明app.ini文件写好的各种配置的类型 RunMode string HTTPPort int ReadTimeout time . Duration WriteTimeout time . Duration PageSize int JwtSecret string ) func init () { var err error // 加载初始化文件 Cfg , err = ini . Load ( \"conf/app.ini\" ) if err != nil { log . Fatalf ( \"Fail to parse 'conf/app.ini`: %v\" , err ) } LoadBase () LoadServer () LoadApp () } // 加载基础设置 func LoadBase () { // 设置RUN_MODE为'debug' RunMode = Cfg . Section ( \"\" ). Key ( \"RUN_MODE\" ). MustString ( \"debug\" ) } // LoadServer 加载服务器配置 func LoadServer () { // 获取'server'的section信息 // 这里的section包含'server'的各种信息, 由./config/app,ini配置文件提供 sec , err := Cfg . GetSection ( \"server\" ) if err != nil { log . Fatalf ( \"Fail to get section 'server':%v\" , err ) } RunMode = Cfg . Section ( \"\" ). Key ( \"RUN_MODE\" ). MustString ( \"debug\" ) // 自动类型转换 HTTPPort = sec . Key ( \"HTTP_PORT\" ). MustInt ( 8000 ) ReadTimeout = time . Duration ( sec . Key ( \"READ_TIMEOUT\" ). MustInt ( 60 )) * time . Second WriteTimeout = time . Duration ( sec . Key ( \"WRITE_TIMEOUT\" ). MustInt ( 60 )) * time . Second } // LoadApp 加载APP配置 func LoadApp () { // 获取./config/app.ini配置文件的APP配置 sec , err := Cfg . GetSection ( \"app\" ) if err != nil { log . Fatalf ( \"Fail to get section 'app':%v\" , err ) } JwtSecret = sec . Key ( \"JWT_SECRET\" ). MustString ( \"!@)*#)!@U#@*!@!)\" ) PageSize = sec . Key ( \"PAGE_SIZE\" ). MustInt ( 10 ) } API错误码包 建立错误码e模块 在 ./pkg/e 目录下新建 code.go 和 msg.go 文件 code.go package e // API错误代码 const ( SUCCESS = 200 ERROR = 500 INVALID_PARAMS = 400 ERROR_EXIST_TAG = 10001 ERROR_NOT_EXIST_TAG = 10002 ERROR_NOT_EXIST_ARTICLE = 10003 ERROR_AUTH_CHECK_TOKEN_FAIL = 20001 ERROR_AUTH_CHECK_TOKEN_TIMEOUT = 20002 ERROR_AUTH_TOKEN = 20003 ERROR_AUTH = 20004 ) msg.go package e //msg.go // MsgFlags 错误信息 var MsgFlags = map [ int ] string { SUCCESS : \"ok\" , ERROR : \"fail\" , INVALID_PARAMS : \"请求参数错误\" , ERROR_EXIST_TAG : \"已存在该标签名称\" , ERROR_NOT_EXIST_TAG : \"该标签不存在\" , ERROR_NOT_EXIST_ARTICLE : \"该文章不存在\" , ERROR_AUTH_CHECK_TOKEN_FAIL : \"Token鉴权失败\" , ERROR_AUTH_CHECK_TOKEN_TIMEOUT : \"Token鉴权超时\" , ERROR_AUTH_TOKEN : \"Token生成失败\" , ERROR_AUTH : \"Token错误\" , } // GetMsg 获取错误信息 func GetMsg ( code int ) string { msg , ok := MsgFlags [ code ] if ok { return msg } return MsgFlags [ ERROR ] } 工具包 公共方法：例如获取分页页码等 go get -u github.com/unknwon/com 在 ./pkg/util 目录下新建 pagination.go 文件 package util import ( setting \"go-gin-example/pkg/settings\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetPage 获取page数量 func GetPage ( c * gin . Context ) int { result := 0 // page转换为int page , _ := com . StrTo ( c . Query ( \"page\" )). Int () if page > 0 { result = ( page - 1 ) * setting . PageSize } return result } 数据库模型映射 通过gorm将golang结构体映射到数据库中自动生成模型 go get -u github.com/jinzhu/gorm go get -u github.com/go-sql-driver/mysql 在 ./models 目录下新建 models.go 文件。 package models import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"log\" \"github.com/jinzhu/gorm\" ) var db * gorm . DB // Model 数据库模型 type Model struct { ID int `gorm:\"primary_key\" json:id` CreatedOn int `json:\"created_on\"` ModifiedOn int `json:\"modified_on\"` } func init () { var ( err error dbType , dbName , user , password , host , tablePrefix string ) // 获取配置文件的数据库配置 sec , err := setting . Cfg . GetSection ( \"database\" ) if err != nil { log . Fatal ( 2 , \"Fail to get get scetion `database`:%v\" , err ) } dbType = sec . Key ( \"TYPE\" ). String () dbName = sec . Key ( \"NAME\" ). String () user = sec . Key ( \"USER\" ). String () password = sec . Key ( \"PASSWORD\" ). String () host = sec . Key ( \"HOST\" ). String () tablePrefix = sec . Key ( \"TABLE_PREFIX\" ). String () db , err = gorm . Open ( dbtype , fmt . Sprintf ( \"%s:%s@tcp(%s)/%s?charset=utf8&parseTime=True&loc=Local\" , user , password , dbName )) if err != nil { log . Println ( err ) } gorm . DefaultTableNameHandler = func ( db * gorm . DB , defaultTableName string ) string { return tablePrefix + defaultTableName } db . SingularTable ( true ) db . LogMode ( true ) db . DB (). SetMaxIdleConns ( 10 ) db . DB (). SetMaxOpenConns ( 100 ) } // CloseDB 关闭数据库连接 func CloseDB () { defer db . Close () } Demo 实例程序 在 ./ 目录下新建 main.go 文件 package main import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"net/http\" \"github.com/gin-gonic/gin\" ) func main () { router := gin . Default () router . GET ( \"/test\" , func ( c * gin . Context ) { c . JSON ( 200 , gin . H { \"message\" : \"test\" , }) }) s := & http . Server { Addr : fmt . Sprintf ( \":%d\" , setting . HTTPPort ), Handler : router , ReadTimeout : setting . ReadTimeout , WriteTimeout : setting . WriteTimeout , MaxHeaderBytes : 1 << 20 , } // 调用在&http.Server中设置的参数,因此上面要用&,要改变参数的值 s . ListenAndServe () } 浏览器输入 localhost：8000/test 返回 {\"message\":\"test\"} 则成功 从main.go中分离路由 在 ./routers 目录下新建 router.go 文件 package routers import ( setting \"go-gin-example/pkg/settings\" \"github.com/gin-gonic/gin\" ) func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) r . GET ( \"/test\" , func ( c * gin . Context ) { c . JSON ( 200 , gin . H { \"message\" : \"test\" , }) }) return r } 修改 main.go 文件 package main import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/routers\" \"net/http\" ) func main () { router := routers . InitRouter () s := & http . Server { Addr : fmt . Sprintf ( \":%d\" , setting . HTTPPort ), Handler : router , ReadTimeout : setting . ReadTimeout , WriteTimeout : setting . WriteTimeout , MaxHeaderBytes : 1 << 20 , } s . ListenAndServer () } 当前目录结构 go-gin-example/ ├── conf │ └── app.ini ├── main.go ├── middleware ├── models │ └── models.go ├── pkg │ ├── e │ │ ├── code.go │ │ └── msg.go │ ├── setting │ │ └── setting.go │ └── util │ └── pagination.go ├── routers │ └── router.go ├── runtime","text_tokens":["msg","logger","runmode","sec","muststring","修改","200","处理","readtimeout","strto","逻辑","section","logmode","use","时","提供","60","util","runtime","log","信息","root",")","fatalf","要","or","20004","error","unknwon","统一","8000","关闭","部分","modules","100","密码","0.1","（","listenandserver","test","token","使用","{","表格","tcp","close","_","该","好像","getpage","第三","配置","例如","类型转换","用于","鉴权","setmaxidleconns","下","标签","├","timeout","127.0","loadapp","mustint","nil","println","─","工具","定义","$","app",",","local","解决","生成","fail","struct","要用","0","出来","本地","配置文件","debug","实例","各种","routers","则","replace","table","可以","数据库","设置","new","请求","driver","目录","msgflags","gorm","?","模块","存在","parsetime","声明","当前","2","to","file","import","20001","输入","github","超时","go","数量",":","primary","]","浏览","err","invalid","必要","run","映射","将","createdon","代码","return","3306","转换","包含","server","getsection","}","key","第三方","(","e","名称","类型","modified","1","：","添加","路由","问题","在","get","*","second","scetion","models","提取","误信","由","setting","c","写成","为","conf","tag","prefix","因此","改变","新建","%","专门","duration","务器","口号","文件类型","，","params","fatal","pkg","singulartable","utf8","true","账号","时间","指定","settings","服务器端","gonic","上面","pagesize","host","secret","连接","失败","r","\"","database","loc","func",".","maxheaderbytes","运行","if","包","golang","ok","/","基础","id","据库","handler","modifiedon","model","setmaxopenconns","getmsg","!","+","和","package","）","到","10002","│","db","等","·","result","存储配置","const","加载","api","样子","check","article","20002","dbname","json","httpport","10001","写","gin","password","返回","sprintf","不必要","message","blog","中间","parse","engine","数据","服务器","v","不必","23347","defaulttablenamehandler","mode","open","的","user","这","string","自动","charset","、","公共","created","closedb","[","调用"," ","defer","<","cfg","错误信息","#","20003","值","config","分离","文件","10","example","-","500","中间件","default","初始化","应用","错误","&","dbtype","type","10003","其","端口号","错误代码","jwtsecret","router","分页","参数","。","误码","不","成功","项目","用","read","负责","已","结构","中","服务","程序","http","context","main","setmode","工具包","success","port","name","初始","sql","三方","建立","环境","读取","浏览器","jinzhu","localhost","query","体","方法","tableprefix","var","口","20",">","demo","通过","存储","d","net","=","`","fmt","int","获取","当前目录","on","write","loadserver","端口","好","ip","page","size","initrouter","exist","400","页码","编写","02","writetimeout","not","defaulttablename","s","time","@","文章","listenandserve","这里","loadbase","recovery","错误码","middleware","1.12","ini","map","路径","pagination","load","release","module","addr","u","└","mysql","jwt","code","'","init","com","模型","040412","auth","h","require","从","库","就"],"title":"go-gin-example 02：API-1","title_tokens":["1","：","gin","go","api"," ","02","example","-"]},{"location":"Golang/Project/02 API-1/#go-gin-example-02api-1","text":"初始设置","text_tokens":["初始","设置"],"title":"go-gin-example 02：API-1","title_tokens":["1","：","gin","go","api"," ","02","example","-"]},{"location":"Golang/Project/02 API-1/#_1","text":"go-gin-example/ ├─conf ├─middleware ├─models ├─pkg ├─routers └─runtime conf：用于存储配置文件 middleware：应用中间件 models：应用数据库模型 pkg：第三方包 routers：路由逻辑处理 runtime：应用运行时数据","text_tokens":["gin","go","conf"," ","runtime","第三方","─","处理","中间","数据","文件","数据库","└","存储","example","-","：","中间件","逻辑","运行","模型","应用","三方","包","路由","middleware","/","pkg","第三","配置","存储配置","用于","时","据库","routers","models","├"],"title":"项目目录","title_tokens":["项目","目录"]},{"location":"Golang/Project/02 API-1/#go-modules-replace","text":"module go-gin-example go 1.12 require (···) replace ( ./go-gin-example/conf => ./go-gin-example/pkg/conf ./go-gin-example/middleware => ./go-gin-example/middleware ./go-gin-example/models => ./go-gin-example/models ./go-gin-example/pkg/e => ./go-gin-example/pkg/e ./go-gin-example/pkg/setting => ./go-gin-example/pkg/setting ./go-gin-example/pkg/util => ./go-gin-example/pkg/util ./go-gin-example/routers => ./go-gin-example/routers ) # 用 replace 将其指定读取本地的模块路径，这样子就可以解决本地模块读取的问题","text_tokens":["module","gin","go","conf"," ","可以","用","(","e","#",">","example","-","的",")","解决",".","=","模块","这","setting","·","本地","middleware","，","/","1.12","pkg","问题","将","路径","样子","其","读取","指定","util","routers","require","models","就","replace"],"title":"添加Go Modules Replace配置本地模块路径 （好像不必要）","title_tokens":["go","路径","不必","模块"," ","添加","（","）","好像","本地","modules","必要","不必要","replace","配置"]},{"location":"Golang/Project/02 API-1/#ini","text":"","text_tokens":[],"title":"使用ini配置文件库/编写项目配置包","title_tokens":["配置文件","文件","编写","使用","包","项目","库","/","ini","配置"]},{"location":"Golang/Project/02 API-1/#_2","text":"将公共配置部分提取出来，写成专门的配置文件，统一写数据库环境、服务器环境等。 在 ./conf 目录下新建 app.ini 文件 定义RUN_MODE 定义数据库端口、账号、表格等 定义公共参数：分页 定义服务器端口、TIMEOUT时间等 # debug or release RUN_MODE = debug [app] PAGE_SIZE = 10 JWT_SECRET = 23347$040412 [server] HTTP_PORT = 8000 READ_TIMEOUT = 60 WRITE_TIMEOUT = 60 [database] TYPE = mysql USER = root # 数据库账号 PASSWORD = root # 数据库密码 HOST = 127.0.0.1:3306 # 数据库IP:数据库端口号 NAME = blog TABLE_PREFIX = blog_","text_tokens":["分页","参数","table","。","host","secret","read","服务","http","database","数据库","目录",".","port","name","/","据库","环境","60","口",":","root","]","=","等","or","run","统一","将","8000","write","部分","端口","3306","ip","page","size","写","password","密码","server","0.1","blog","数据","服务器","23347","表格","mode","的","：","user","_","、","公共","ini","配置","在","下","提取","timeout","127.0","release","[","写成","conf"," ","prefix","#","定义","新建","文件","$","mysql","10","app","专门","jwt","务器","口号","040412","出来","，","配置文件","type","debug","账号","时间","端口号","服务器端"],"title":"应用配置文件","title_tokens":["配置文件","文件","应用","配置"]},{"location":"Golang/Project/02 API-1/#setting","text":"负责调用app.ini go get -u github.com/go-ini/ini 在 ./pkg/setting 目录下新建 setting.go 文件 package setting import ( \"log\" \"time\" \"github.com/go-ini/ini\" ) var ( Cfg * ini . File // Cfg为ini文件类型 // 声明app.ini文件写好的各种配置的类型 RunMode string HTTPPort int ReadTimeout time . Duration WriteTimeout time . Duration PageSize int JwtSecret string ) func init () { var err error // 加载初始化文件 Cfg , err = ini . Load ( \"conf/app.ini\" ) if err != nil { log . Fatalf ( \"Fail to parse 'conf/app.ini`: %v\" , err ) } LoadBase () LoadServer () LoadApp () } // 加载基础设置 func LoadBase () { // 设置RUN_MODE为'debug' RunMode = Cfg . Section ( \"\" ). Key ( \"RUN_MODE\" ). MustString ( \"debug\" ) } // LoadServer 加载服务器配置 func LoadServer () { // 获取'server'的section信息 // 这里的section包含'server'的各种信息, 由./config/app,ini配置文件提供 sec , err := Cfg . GetSection ( \"server\" ) if err != nil { log . Fatalf ( \"Fail to get section 'server':%v\" , err ) } RunMode = Cfg . Section ( \"\" ). Key ( \"RUN_MODE\" ). MustString ( \"debug\" ) // 自动类型转换 HTTPPort = sec . Key ( \"HTTP_PORT\" ). MustInt ( 8000 ) ReadTimeout = time . Duration ( sec . Key ( \"READ_TIMEOUT\" ). MustInt ( 60 )) * time . Second WriteTimeout = time . Duration ( sec . Key ( \"WRITE_TIMEOUT\" ). MustInt ( 60 )) * time . Second } // LoadApp 加载APP配置 func LoadApp () { // 获取./config/app.ini配置文件的APP配置 sec , err := Cfg . GetSection ( \"app\" ) if err != nil { log . Fatalf ( \"Fail to get section 'app':%v\" , err ) } JwtSecret = sec . Key ( \"JWT_SECRET\" ). MustString ( \"!@)*#)!@U#@*!@!)\" ) PageSize = sec . Key ( \"PAGE_SIZE\" ). MustInt ( 10 ) }","text_tokens":["pagesize","runmode","sec","secret","muststring","负责","read","\"","服务","http","readtimeout","设置","func","目录",".","port","初始","if","section","声明","/","基础","to","file","提供","import","60","!","github","go","var","package","log",":","信息",")","err","=","fatalf","`","int","获取","error","run","加载","8000","loadserver","write","好","page","转换","httpport","size","包含","写","server","getsection","}","writetimeout","key","(","parse","服务器","v","类型","time","{","mode","的","@","这里","loadbase","_","string","自动","ini","配置","类型转换","在","get","*","second","下","load","setting","由","timeout","loadapp","调用","为","conf"," ","mustint","cfg","nil","#","config","u","新建","文件","%","10","app","duration",",","-","jwt","务器","'","init","fail","com","初始化","文件类型","pkg","配置文件","debug","各种","jwtsecret"],"title":"调用配置的setting模块","title_tokens":["的","调用","模块","setting","配置"]},{"location":"Golang/Project/02 API-1/#api","text":"建立错误码e模块 在 ./pkg/e 目录下新建 code.go 和 msg.go 文件 code.go package e // API错误代码 const ( SUCCESS = 200 ERROR = 500 INVALID_PARAMS = 400 ERROR_EXIST_TAG = 10001 ERROR_NOT_EXIST_TAG = 10002 ERROR_NOT_EXIST_ARTICLE = 10003 ERROR_AUTH_CHECK_TOKEN_FAIL = 20001 ERROR_AUTH_CHECK_TOKEN_TIMEOUT = 20002 ERROR_AUTH_TOKEN = 20003 ERROR_AUTH = 20004 ) msg.go package e //msg.go // MsgFlags 错误信息 var MsgFlags = map [ int ] string { SUCCESS : \"ok\" , ERROR : \"fail\" , INVALID_PARAMS : \"请求参数错误\" , ERROR_EXIST_TAG : \"已存在该标签名称\" , ERROR_NOT_EXIST_TAG : \"该标签不存在\" , ERROR_NOT_EXIST_ARTICLE : \"该文章不存在\" , ERROR_AUTH_CHECK_TOKEN_FAIL : \"Token鉴权失败\" , ERROR_AUTH_CHECK_TOKEN_TIMEOUT : \"Token鉴权超时\" , ERROR_AUTH_TOKEN : \"Token生成失败\" , ERROR_AUTH : \"Token错误\" , } // GetMsg 获取错误信息 func GetMsg ( code int ) string { msg , ok := MsgFlags [ code ] if ok { return msg } return MsgFlags [ ERROR ] }","text_tokens":["msg","参数","误码","不","失败","200","\"","已","请求","func","目录","msgflags",".","模块","success","存在","if","ok","/","建立","getmsg","20001","超时","和","go","var","package",":","信息","]","10002",")","=","invalid","20004","int","获取","error","const","api","check","代码","return","article","20002","10001","exist","400","}","(","e","not","token","名称","{","文章","_","该","错误码","string","map","在","鉴权","下","标签","误信","timeout","["," ","tag","错误信息","20003","新建","文件",",","code","生成","500","fail","错误","auth","params","pkg","10003","错误代码"],"title":"API错误码包","title_tokens":["api","误码","错误码","包","错误"]},{"location":"Golang/Project/02 API-1/#_3","text":"公共方法：例如获取分页页码等 go get -u github.com/unknwon/com 在 ./pkg/util 目录下新建 pagination.go 文件 package util import ( setting \"go-gin-example/pkg/settings\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetPage 获取page数量 func GetPage ( c * gin . Context ) int { result := 0 // page转换为int page , _ := com . StrTo ( c . Query ( \"page\" )). Int () if page > 0 { result = ( page - 1 ) * setting . PageSize } return result }","text_tokens":["query","github","c","分页","gin","go","方法","页码","为"," ","数量","pagesize","}","\"","(","package",":","u","新建","文件",">","context","{",",","example","-","func","目录",")","：","strto","1","com",".","=","等","0","_","if","int","公共","getpage","/","获取","pkg","result","例如","在","get","unknwon","*","下","import","return","util","settings","page","gonic","转换","pagination","setting"],"title":"工具包","title_tokens":["工具包","工具"]},{"location":"Golang/Project/02 API-1/#_4","text":"通过gorm将golang结构体映射到数据库中自动生成模型 go get -u github.com/jinzhu/gorm go get -u github.com/go-sql-driver/mysql 在 ./models 目录下新建 models.go 文件。 package models import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"log\" \"github.com/jinzhu/gorm\" ) var db * gorm . DB // Model 数据库模型 type Model struct { ID int `gorm:\"primary_key\" json:id` CreatedOn int `json:\"created_on\"` ModifiedOn int `json:\"modified_on\"` } func init () { var ( err error dbType , dbName , user , password , host , tablePrefix string ) // 获取配置文件的数据库配置 sec , err := setting . Cfg . GetSection ( \"database\" ) if err != nil { log . Fatal ( 2 , \"Fail to get get scetion `database`:%v\" , err ) } dbType = sec . Key ( \"TYPE\" ). String () dbName = sec . Key ( \"NAME\" ). String () user = sec . Key ( \"USER\" ). String () password = sec . Key ( \"PASSWORD\" ). String () host = sec . Key ( \"HOST\" ). String () tablePrefix = sec . Key ( \"TABLE_PREFIX\" ). String () db , err = gorm . Open ( dbtype , fmt . Sprintf ( \"%s:%s@tcp(%s)/%s?charset=utf8&parseTime=True&loc=Local\" , user , password , dbName )) if err != nil { log . Println ( err ) } gorm . DefaultTableNameHandler = func ( db * gorm . DB , defaultTableName string ) string { return tablePrefix + defaultTableName } db . SingularTable ( true ) db . LogMode ( true ) db . DB (). SetMaxIdleConns ( 10 ) db . DB (). SetMaxOpenConns ( 100 ) } // CloseDB 关闭数据库连接 func CloseDB () { defer db . Close () }","text_tokens":["table","。","sec","host","连接","结构","\"","中","database","loc","数据库","driver","func","gorm","目录","?",".","name","parsetime","sql","if","golang","/","logmode","2","id","to","据库","import","modifiedon","model","setmaxopenconns","!","jinzhu","+","github","体","go","tableprefix","var","package","log",":","primary","通过","到",")","err","db","=","`","fmt","int","获取","error","映射","将","createdon","on","关闭","return","dbname","json","100","gin","password","getsection","}","sprintf","key","(","数据","defaulttablename","v","s","defaulttablenamehandler","{","open","modified","的","@","tcp","close","user","_","string","自动","charset","配置","在","get","created","*","setmaxidleconns","下","scetion","models","closedb","setting"," ","defer","cfg","prefix","nil","println","u","新建","文件","%","mysql","10",",","example","-","local","init","生成","fail","com","struct","模型","&","fatal","dbtype","pkg","配置文件","type","utf8","singulartable","true","settings"],"title":"数据库模型映射","title_tokens":["映射","数据","据库","数据库","模型"]},{"location":"Golang/Project/02 API-1/#demo","text":"实例程序 在 ./ 目录下新建 main.go 文件 package main import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"net/http\" \"github.com/gin-gonic/gin\" ) func main () { router := gin . Default () router . GET ( \"/test\" , func ( c * gin . Context ) { c . JSON ( 200 , gin . H { \"message\" : \"test\" , }) }) s := & http . Server { Addr : fmt . Sprintf ( \":%d\" , setting . HTTPPort ), Handler : router , ReadTimeout : setting . ReadTimeout , WriteTimeout : setting . WriteTimeout , MaxHeaderBytes : 1 << 20 , } // 调用在&http.Server中设置的参数,因此上面要用&,要改变参数的值 s . ListenAndServe () } 浏览器输入 localhost：8000/test 返回 {\"message\":\"test\"} 则成功","text_tokens":["router","参数","成功","200","\"","中","程序","http","readtimeout","设置","context","main","func","目录",".","maxheaderbytes","/","handler","import","浏览器","localhost","输入","github","go","package",":","20","d","浏览",")","net","=","要","fmt","8000","json","httpport","gin","server","返回","}","sprintf","writetimeout","message","(","test","s","{","的","1","：","listenandserve","在","get","*","下","setting","c","调用"," ","<","addr","因此","值","改变","新建","文件","%",",","example","-","default","com","要用","&","pkg","实例","h","则","settings","gonic","上面"],"title":"Demo","title_tokens":["demo"]},{"location":"Golang/Project/02 API-1/#maingo","text":"在 ./routers 目录下新建 router.go 文件 package routers import ( setting \"go-gin-example/pkg/settings\" \"github.com/gin-gonic/gin\" ) func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) r . GET ( \"/test\" , func ( c * gin . Context ) { c . JSON ( 200 , gin . H { \"message\" : \"test\" , }) }) return r } 修改 main.go 文件 package main import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/routers\" \"net/http\" ) func main () { router := routers . InitRouter () s := & http . Server { Addr : fmt . Sprintf ( \":%d\" , setting . HTTPPort ), Handler : router , ReadTimeout : setting . ReadTimeout , WriteTimeout : setting . WriteTimeout , MaxHeaderBytes : 1 << 20 , } s . ListenAndServer () }","text_tokens":["initrouter","router","github","logger","gin","c","go"," ","runmode","server","}","<","sprintf","addr","listenandserver","r","修改","200","writetimeout","\"","message","(","engine","package",":","test","http","readtimeout","新建","文件","20","s","%","context","new","{",",","example","-","main","func","目录","setmode","d",")","1","com",".","=","net","maxheaderbytes","fmt","recovery","&","/","pkg","use","在","get","*","下","handler","import","h","return","routers","settings","gonic","json","httpport","setting"],"title":"从main.go中分离路由","title_tokens":["中","go",".","分离","路由","从","main"]},{"location":"Golang/Project/02 API-1/#_5","text":"go-gin-example/ ├── conf │ └── app.ini ├── main.go ├── middleware ├── models │ └── models.go ├── pkg │ ├── e │ │ ├── code.go │ │ └── msg.go │ ├── setting │ │ └── setting.go │ └── util │ └── pagination.go ├── routers │ └── router.go ├── runtime","text_tokens":["msg","router","gin","go","conf"," ","runtime","─","e","└","app","example","-","code","main","│",".","middleware","/","pkg","ini","util","routers","models","├","pagination","setting"],"title":"当前目录结构","title_tokens":["当前目录","当前","结构","目录"]},{"location":"Golang/Project/03 API-2/","text":"go-gin-example 03：API-2 完成博客的标签类接口定义和编写 定义接口 定义文章标签的路由分发操作 获取标签列表：GET(“/tags”) 新建标签：POST(“/tags”) 更新指定标签：PUT(“/tags/:id”) 删除指定标签：DELETE(“/tags/:id”) 空壳路由 注册路由将请求分发到该路由中，由该API路由中函数处理 在./routers/api 下新建 v1 目录，目录内新建 tag.go 文件代表第一个API大版本 package v1 import ( \"github.com/gin-gonic/gin\" ) // GetTags 获取多个文章标签 func GetTags ( c * gin . Context ) { } // AddTag 新增文章标签 func AddTag ( c * gin . Context ) { } // EditTag 修改文章标签 func EditTag ( c * gin . Context ) { } // DeleteTag 删除文章标签 func DeleteTag ( c * gin . Context ) { } 注册路由 该路由负责分发各个api请求给相应的 handler 者 打开 ./routers 下的 router.go 文件，修改为： package routers import ( setting \"go-gin-example/pkg/settings\" v1 \"go-gin-example/routers/api/v1\" \"github.com/gin-gonic/gin\" ) // InitRouter 初始化路由 func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) apiv1 := r . Group ( \"/api/v1\" ) { apiv1 . GET ( \"/tags\" , v1 . GetTags ) apiv1 . POST ( \"/tags\" , v1 . AddTag ) apiv1 . PUT ( \"/tags/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/tags/:id\" , v1 . DeleteTag ) } return r } 用 go run main.go 检测是否成功注册路由 表单验证 用beego的validation来进行表单校验数据 该 tag.go 模型中继承了 model.Model 结构体外新增了标签结构体中的一些属性，在该文件下除了通过 gorm 映射数据库模型外还添加了对标签的CRUD操作方法，在 ./routers/api/v1/tag.go 中可以调用这些CRUD方法 go get -u github.com/astaxie/beego/validation 在 models 目录下的 tag.go 写入 package models import ( \"time\" \"github.com/jinzhu/gorm\" ) // Tag 标签结构体 // 给结构体赋予json属性, 在c.JSON中会自动转换 type Tag struct { // 继承Model的结构体 Model Name string `json:\"name\"` CreatedBy string `json:\"created_by\"` ModifiedBy string `json:\"modified_by\"` State int `json:\"state\"` } // BeforeCreate 创建标签之前自动补全CreatedOn时间 func ( tag * Tag ) BeforeCreate ( scope * gorm . Scope ) error { scope . SetColumn ( \"CreatedOn\" , time . Now (). Unix ()) return nil } // BeforeUpdate 更新标签之前自动补全ModifiedOn时间 func ( tag * Tag ) BeforeUpdate ( scope * gorm . Scope ) error { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) return nil } // GetTags 获取文章标签 func GetTags ( pageNum int , pageSize int , maps interface {}) ( tags [] Tag ) { db . Where ( maps ). Offset ( pageNum ). Limit ( pageSize ). Find ( & tags ) return } // GetTagTotal 获取全部文章标签 func GetTagTotal ( maps interface {}) ( count int ) { db . Model ( & Tag {}). Where ( maps ). Count ( & count ) return } // ExistTagByName 查询文章标签是否存在 func ExistTagByName ( name string ) bool { var tag Tag db . Select ( \"id\" ). Where ( \"name = ?\" , name ). First ( & tag ) if tag . ID > 0 { return true } return false } // ExistTagByID 查询ID文章是否存在 func ExistTagByID ( id int ) bool { var tag Tag db . Select ( \"id\" ). Where ( \"id = ?\" , id ). First ( & tag ) if tag . ID > 0 { return true } return false } // AddTag 添加文章标签 func AddTag ( name string , state int , createdBy string ) bool { db . Create ( & Tag { Name : name , State : state , CreatedBy : createdBy , }) return true } // DeleteTag 删除文章标签 func DeleteTag ( id int ) bool { db . Where ( \"id = ? \" , id ). Delete ( & Tag {}) return true } // EditTag 编辑文章标签 func EditTag ( id int , data interface {}) bool { db . Model ( & Tag {}). Where ( \"id = ? \" , id ). Update ( data ) return true } 编写标签列表的路由逻辑 完善空壳路由 通过 beego/validation 对URL传递进来的参数进行校验，操作为声明 validation.Validation 对象，调用其 .Required 、 .MaxSize 、 .Range 、 .Message 等方法 通过 c.Query 获取URL中 ?name=test&state=1 中的参数， c.DefaultQuery 则支持设置一个默认值 util.GetPage 确保各个接口的 page 处理是一致的 在 ./routers/v1/tag.go 写入 package v1 import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/pkg/util\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetTags 获取文章标签 func GetTags ( c * gin . Context ) { // 从URL获取参数 // localhost:8000/tags?name=test&state=1 name := c . Query ( \"name\" ) maps := make ( map [ string ] interface {}) data := make ( map [ string ] interface {}) if name != \"\" { // 如果存在name参数, 将其添加到maps中 maps [ \"name\" ] = name } var state = - 1 // should omit type , it will be inferred if arg := c . Query ( \"state\" ); arg != \"\" { // 如果URL中存在state参数, 且arg不等于空的时候 // 将state转换为int // 添加到maps[\"state\"]中 state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state } code := e . SUCCESS // 找到该文章,将其添加到lists中返回 data [ \"lists\" ] = models . GetTags ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // AddTag 增加文章标签 func AddTag ( c * gin . Context ) { name := c . Query ( \"name\" ) // state=0代表该标签不存在 // 设置默认值为0 state := com . StrTo ( c . DefaultQuery ( \"state\" , \"0\" )). MustInt () createdBy := c . Query ( \"created_by\" ) valid := validation . Validation {} valid . Required ( name , \"name\" ). Message ( \"名称不能为空\" ) valid . MaxSize ( name , 100 , \"name\" ). Message ( \"名称最长为100字符\" ) valid . Required ( createdBy , \"created_by\" ). Message ( \"创建人不能为空\" ) valid . MaxSize ( createdBy , 100 , \"created_by\" ). Message ( \"创建人最长为100字符\" ) valid . Range ( state , 0 , 1 , \"starte\" ). Message ( \"状态只允许0或1\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if ! models . ExistTagByName ( name ) { code = e . SUCCESS models . AddTag ( name , state , createdBy ) } else { code = e . ERROR_EXIST_TAG } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // EditTag 修改文章标签 func EditTag ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () name := c . Query ( \"name\" ) modifiedBy := c . Query ( \"modified_by\" ) valid := validation . Validation {} var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只允许0或1\" ) } valid . Required ( id , \"id\" ). Message ( \"ID不能为空\" ) valid . Required ( modifiedBy , \"modiified_by\" ). Message ( \"修改人不能为空\" ) valid . MaxSize ( modifiedBy , 100 , \"modified_by\" ). Message ( \"修改人最长为100字符\" ) valid . MaxSize ( name , 100 , \"name\" ). Message ( \"名称最长为100字符\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { code = e . SUCCESS if models . ExistTagByID ( id ) { data := make ( map [ string ] interface {}) data [ \"modified_by\" ] = modifiedBy if name != \"\" { data [ \"name\" ] = name } if state != - 1 { data [ \"state\" ] = state } models . EditTag ( id , data ) } else { // 不存在, 无法修改标签 code = e . ERROR_NOT_EXIST_ARTICLE } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"message\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // DeleteTag 删除文章标签 func DeleteTag ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { code = e . SUCCESS // 数据库操作 if models . ExistTagByID ( id ) { models . DeleteTag ( id ) } else { code = e . ERROR_NOT_EXIST_TAG } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) }","text_tokens":["msg","logger","runmode","修改","完善","处理","post","分发","支持","相应","apiv1","为空","strto","逻辑","defaultquery","be","modiified","创建人","use","空","表单","util","接口","where","required","should","maxsize","一些","starte","接口定义","scope","”","编辑",")","找到","error","是","find","unknwon","8000","大","不能","edittag","100","deletetag","注册","test","inferred","无法","url","或","{","make","unix","now","_","该","getpage","03","默认值","group","下","标签","如果","除了","data","创建","mustint","nil","只","定义","进行",",","struct","代表","0","routers","则","允许","else","这些","可以","校验","查询","数据库","设置","new","请求","目录","gorm","?","存在","range","声明","完成","2","体外","import","github","go","select","外","内","人",":","total","limit","]","来","invalid","确保","offset","时候","run","映射","将","maps","createdon","return","转换","pagenum","createdby","}","状态","first","statusok","(","e","名称","之前","valid","modified","1","：","由该","will","添加","路由","多个","在","get","*","博客","models","v1","setcolumn","setting","验证","c","为","tag","interface","新建","count","addtag","，","params","pkg","true","时间","指定","settings","gonic","空壳","pagesize","gettags","r","\"","体中","对象","func","删除",".","一致","if","/","id","据库","全部","handler","modifiedon","model","getmsg","!","和","existtagbyid","tags","且","param","package","min","delete","beforecreate","第一","检测","到","db","等","it","api","继承","article","字符","json","gin","返回","message","engine","数据","的","string","自动","、","还","默认","created","state","crud","最长","一个","[","调用"," ","lists","validation","false","文件","修改文章","example","-","大于","初始化","bool","&","arg","type","其","是否","router","参数","不","成功","负责","用","了","结构","中",";","http","新增","函数","context","中会","写入","main","setmode","列表","success","类","name","初始","put","更新","属性","版本","jinzhu","localhost","query","体","方法","补全","var","进来",">","通过","操作","必须","net","=","`","int","获取","page","haserrors","initrouter","传递","exist","赋予","增加","modifiedby","编写","existtagbyname","beego","not","各个","time","者","omit","文章","第一个","recovery","map","by","打开","beforeupdate","update","操作方法","对","u","等于","给","“","code","create","com","模型","astaxie","gettagtotal","h","从"],"title":"go-gin-example 03：API-2","title_tokens":["：","gin","2","go","api"," ","example","-","03"]},{"location":"Golang/Project/03 API-2/#go-gin-example-03api-2","text":"完成博客的标签类接口定义和编写","text_tokens":["的","完成","和","定义","接口定义","类","编写","博客","标签","接口"],"title":"go-gin-example 03：API-2","title_tokens":["：","gin","2","go","api"," ","example","-","03"]},{"location":"Golang/Project/03 API-2/#_1","text":"定义文章标签的路由分发操作 获取标签列表：GET(“/tags”) 新建标签：POST(“/tags”) 更新指定标签：PUT(“/tags/:id”) 删除指定标签：DELETE(“/tags/:id”)","text_tokens":[" ","tags","(","post",":","定义","新建","分发","delete","”","“","操作","列表","的",")","：","文章","删除","put","路由","/","获取","get","id","更新","指定","标签"],"title":"定义接口","title_tokens":["接口","定义"]},{"location":"Golang/Project/03 API-2/#_2","text":"注册路由将请求分发到该路由中，由该API路由中函数处理 在./routers/api 下新建 v1 目录，目录内新建 tag.go 文件代表第一个API大版本 package v1 import ( \"github.com/gin-gonic/gin\" ) // GetTags 获取多个文章标签 func GetTags ( c * gin . Context ) { } // AddTag 新增文章标签 func AddTag ( c * gin . Context ) { } // EditTag 修改文章标签 func EditTag ( c * gin . Context ) { } // DeleteTag 删除文章标签 func DeleteTag ( c * gin . Context ) { }","text_tokens":["edittag","github","c","gin","go"," ","deletetag","}","tag","gettags","内","修改","\"","处理","注册","中","(","package","新增","函数","新建","分发","文件","修改文章","context","第一","请求","{","-","func","到","目录",")","由该","第一个","com",".","代表","文章","删除","addtag","该","路由","，","/","获取","多个","在","*","将","api","下","import","版本","一个","标签","routers","v1","gonic","大"],"title":"空壳路由","title_tokens":["空壳","路由"]},{"location":"Golang/Project/03 API-2/#_3","text":"该路由负责分发各个api请求给相应的 handler 者 打开 ./routers 下的 router.go 文件，修改为： package routers import ( setting \"go-gin-example/pkg/settings\" v1 \"go-gin-example/routers/api/v1\" \"github.com/gin-gonic/gin\" ) // InitRouter 初始化路由 func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) apiv1 := r . Group ( \"/api/v1\" ) { apiv1 . GET ( \"/tags\" , v1 . GetTags ) apiv1 . POST ( \"/tags\" , v1 . AddTag ) apiv1 . PUT ( \"/tags/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/tags/:id\" , v1 . DeleteTag ) } return r } 用 go run main.go 检测是否成功注册路由","text_tokens":["router","logger","runmode","gettags","成功","负责","r","修改","用","\"","post","分发","相应","apiv1","new","请求","main","func","setmode",".","初始","put","/","use","id","handler","import","github","go","tags","package",":","delete","检测",")","=","run","api","return","initrouter","edittag","gin","deletetag","}","注册","(","engine","各个","{","者","的","：","recovery","该","路由","group","get","*","下","打开","v1","setting","为"," ","文件","给",",","example","-","com","addtag","初始化","，","pkg","routers","是否","settings","gonic"],"title":"注册路由","title_tokens":["路由","注册"]},{"location":"Golang/Project/03 API-2/#_4","text":"用beego的validation来进行表单校验数据 该 tag.go 模型中继承了 model.Model 结构体外新增了标签结构体中的一些属性，在该文件下除了通过 gorm 映射数据库模型外还添加了对标签的CRUD操作方法，在 ./routers/api/v1/tag.go 中可以调用这些CRUD方法 go get -u github.com/astaxie/beego/validation 在 models 目录下的 tag.go 写入 package models import ( \"time\" \"github.com/jinzhu/gorm\" ) // Tag 标签结构体 // 给结构体赋予json属性, 在c.JSON中会自动转换 type Tag struct { // 继承Model的结构体 Model Name string `json:\"name\"` CreatedBy string `json:\"created_by\"` ModifiedBy string `json:\"modified_by\"` State int `json:\"state\"` } // BeforeCreate 创建标签之前自动补全CreatedOn时间 func ( tag * Tag ) BeforeCreate ( scope * gorm . Scope ) error { scope . SetColumn ( \"CreatedOn\" , time . Now (). Unix ()) return nil } // BeforeUpdate 更新标签之前自动补全ModifiedOn时间 func ( tag * Tag ) BeforeUpdate ( scope * gorm . Scope ) error { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) return nil } // GetTags 获取文章标签 func GetTags ( pageNum int , pageSize int , maps interface {}) ( tags [] Tag ) { db . Where ( maps ). Offset ( pageNum ). Limit ( pageSize ). Find ( & tags ) return } // GetTagTotal 获取全部文章标签 func GetTagTotal ( maps interface {}) ( count int ) { db . Model ( & Tag {}). Where ( maps ). Count ( & count ) return } // ExistTagByName 查询文章标签是否存在 func ExistTagByName ( name string ) bool { var tag Tag db . Select ( \"id\" ). Where ( \"name = ?\" , name ). First ( & tag ) if tag . ID > 0 { return true } return false } // ExistTagByID 查询ID文章是否存在 func ExistTagByID ( id int ) bool { var tag Tag db . Select ( \"id\" ). Where ( \"id = ?\" , id ). First ( & tag ) if tag . ID > 0 { return true } return false } // AddTag 添加文章标签 func AddTag ( name string , state int , createdBy string ) bool { db . Create ( & Tag { Name : name , State : state , CreatedBy : createdBy , }) return true } // DeleteTag 删除文章标签 func DeleteTag ( id int ) bool { db . Where ( \"id = ? \" , id ). Delete ( & Tag {}) return true } // EditTag 编辑文章标签 func EditTag ( id int , data interface {}) bool { db . Model ( & Tag {}). Where ( \"id = ? \" , id ). Update ( data ) return true }","text_tokens":["pagesize","这些","可以","gettags","校验","用","了","结构","\"","中","体中","新增","查询","数据库","中会","写入","func","gorm","目录","?","删除",".","存在","name","if","/","id","体外","据库","更新","表单","全部","import","modifiedon","model","属性","where","jinzhu","github","体","go","方法","补全","select","existtagbyid","一些","tags","外","var","package",":","scope",">","delete","通过","beforecreate","编辑","limit","操作","]",")","db","=","来","`","int","offset","获取","error","映射","find","api","createdon","maps","继承","return","转换","json","edittag","pagenum","赋予","createdby","modifiedby","deletetag","}","existtagbyname","first","(","beego","数据","之前","time","{","unix","now","modified","的","文章","_","该","添加","string","自动","还","在","get","created","state","crud","*","下","by","标签","models","v1","除了","beforeupdate","setcolumn","[","c","调用","data","创建"," ","tag","update","interface","validation","nil","false","操作方法","对","u","文件","count","进行","给",",","-","create","com","struct","addtag","0","模型","astaxie","bool","，","&","type","gettagtotal","true","时间","routers","是否"],"title":"表单验证","title_tokens":["验证","表单"]},{"location":"Golang/Project/03 API-2/#_5","text":"完善空壳路由 通过 beego/validation 对URL传递进来的参数进行校验，操作为声明 validation.Validation 对象，调用其 .Required 、 .MaxSize 、 .Range 、 .Message 等方法 通过 c.Query 获取URL中 ?name=test&state=1 中的参数， c.DefaultQuery 则支持设置一个默认值 util.GetPage 确保各个接口的 page 处理是一致的 在 ./routers/v1/tag.go 写入 package v1 import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/pkg/util\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetTags 获取文章标签 func GetTags ( c * gin . Context ) { // 从URL获取参数 // localhost:8000/tags?name=test&state=1 name := c . Query ( \"name\" ) maps := make ( map [ string ] interface {}) data := make ( map [ string ] interface {}) if name != \"\" { // 如果存在name参数, 将其添加到maps中 maps [ \"name\" ] = name } var state = - 1 // should omit type , it will be inferred if arg := c . Query ( \"state\" ); arg != \"\" { // 如果URL中存在state参数, 且arg不等于空的时候 // 将state转换为int // 添加到maps[\"state\"]中 state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state } code := e . SUCCESS // 找到该文章,将其添加到lists中返回 data [ \"lists\" ] = models . GetTags ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // AddTag 增加文章标签 func AddTag ( c * gin . Context ) { name := c . Query ( \"name\" ) // state=0代表该标签不存在 // 设置默认值为0 state := com . StrTo ( c . DefaultQuery ( \"state\" , \"0\" )). MustInt () createdBy := c . Query ( \"created_by\" ) valid := validation . Validation {} valid . Required ( name , \"name\" ). Message ( \"名称不能为空\" ) valid . MaxSize ( name , 100 , \"name\" ). Message ( \"名称最长为100字符\" ) valid . Required ( createdBy , \"created_by\" ). Message ( \"创建人不能为空\" ) valid . MaxSize ( createdBy , 100 , \"created_by\" ). Message ( \"创建人最长为100字符\" ) valid . Range ( state , 0 , 1 , \"starte\" ). Message ( \"状态只允许0或1\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if ! models . ExistTagByName ( name ) { code = e . SUCCESS models . AddTag ( name , state , createdBy ) } else { code = e . ERROR_EXIST_TAG } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // EditTag 修改文章标签 func EditTag ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () name := c . Query ( \"name\" ) modifiedBy := c . Query ( \"modified_by\" ) valid := validation . Validation {} var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只允许0或1\" ) } valid . Required ( id , \"id\" ). Message ( \"ID不能为空\" ) valid . Required ( modifiedBy , \"modiified_by\" ). Message ( \"修改人不能为空\" ) valid . MaxSize ( modifiedBy , 100 , \"modified_by\" ). Message ( \"修改人最长为100字符\" ) valid . MaxSize ( name , 100 , \"name\" ). Message ( \"名称最长为100字符\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { code = e . SUCCESS if models . ExistTagByID ( id ) { data := make ( map [ string ] interface {}) data [ \"modified_by\" ] = modifiedBy if name != \"\" { data [ \"name\" ] = name } if state != - 1 { data [ \"state\" ] = state } models . EditTag ( id , data ) } else { // 不存在, 无法修改标签 code = e . ERROR_NOT_EXIST_ARTICLE } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"message\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // DeleteTag 删除文章标签 func DeleteTag ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { code = e . SUCCESS // 数据库操作 if models . ExistTagByID ( id ) { models . DeleteTag ( id ) } else { code = e . ERROR_NOT_EXIST_TAG } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) }","text_tokens":["msg","空壳","参数","pagesize","else","不","gettags","校验","修改","完善","\"","处理","中",";","http","对象","支持","设置","数据库","context","为空","写入","func","?","strto","删除",".","一致","存在","defaultquery","success","name","be","range","if","modiified","声明","从","/","创建人","空","id","据库","import","util","getmsg","接口","!","required","localhost","query","github","should","go","方法","maxsize","existtagbyid","tags","且","param","var","人","package",":","starte","min","进来","total","通过","操作","]","到","必须",")","net","=","invalid","等","确保","找到","int","获取","error","时候","是","unknwon","it","将","maps","8000","article","字符","page","转换","json","haserrors","不能","edittag","100","传递","gin","exist","增加","createdby","modifiedby","返回","deletetag","}","existtagbyname","状态","message","statusok","(","e","test","beego","not","数据","inferred","各个","url","名称","无法","或","valid","{","make","modified","的","1","omit","文章","will","_","添加","该","string","路由","、","getpage","默认","map","默认值","在","created","state","*","最长","允许","by","一个","标签","models","如果","v1","setting","[","c","调用","为","data","创建"," ","lists","tag","mustint","interface","validation","只","对","等于","修改文章","进行",",","example","-","code","大于","com","代表","addtag","0","astaxie","，","&","params","pkg","arg","type","gettagtotal","其","h","则","routers","settings","gonic"],"title":"编写标签列表的路由逻辑","title_tokens":["的","逻辑","编写","标签","路由","列表"]},{"location":"Golang/Project/04 API-3/","text":"go-gin-example 04：API-3 完成博客的文章类接口定义和编写 定义接口 定义文章的路由分发操作 获取文章列表：GET(“/articles”) 获取单篇文章：GET(“/articles/:id”) 更新文章：PUT(“/articles/:id”) 新建文章：POST(“/articles”) 删除文章：DELETE(“/tags/:id”) 空壳路由 文章请求处理API 在 ./routers/api/v1 下新建 article.go 文件 package v1 import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/pkg/util\" \"log\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetArticle 获取单个文章 func GetArticle ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) code := e . INVALID_PARAMS var data interface {} if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { data = models . GetArticle ( id ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key: %s, err.message: %s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // GetArticles 获取多个文章 func GetArticles ( c * gin . Context ) { data := make ( map [ string ] interface {}) maps := make ( map [ string ] interface {}) valid := validation . Validation {} var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只允许0或1\" ) } var tagID = - 1 if arg := c . Query ( \"tag_id\" ); arg != \"\" { tagID = com . StrTo ( arg ). MustInt () maps [ \"tag_id\" ] = tagID valid . Min ( tagID , 1 , \"tag_id\" ). Message ( \"标签ID必须大于0\" ) } code := e . INVALID_PARAMS if ! valid . HasErrors () { data [ \"list\" ] = models . GetArticles ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) code = e . SUCCESS } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s, err.message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // AddArticle 增加文章 func AddArticle ( c * gin . Context ) { tagID := com . StrTo ( c . Query ( \"tag_id\" )). MustInt () title := c . Query ( \"title\" ) desc := c . Query ( \"desc\" ) content := c . Query ( \"content\" ) createdBy := c . Query ( \"created_by\" ) state := com . StrTo ( c . Query ( \"state\" )). MustInt () valid := validation . Validation {} valid . Min ( tagID , 1 , \"tagID\" ). Message ( \"标签ID必须大于0\" ) valid . Required ( title , \"title\" ). Message ( \"题目不能为空\" ) valid . Required ( desc , \"desc\" ). Message ( \"描述不能为空\" ) valid . Required ( content , \"content\" ). Message ( \"内容不能为空\" ) valid . Required ( createdBy , \"created_by\" ). Message ( \"创建人不能为空\" ) valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只能是0或1\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistTagByID ( tagID ) { data := make ( map [ string ] interface {}) data [ \"tag_id\" ] = tagID data [ \"title\" ] = title data [ \"desc\" ] = desc data [ \"content\" ] = content data [ \"created_by\" ] = createdBy data [ \"state\" ] = state models . AddArticle ( data ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_TAG } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s, err.message%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // EditArticle 修改文章 func EditArticle ( c * gin . Context ) { valid := validation . Validation {} id := com . StrTo ( c . Query ( \"id\" )). MustInt () tagID := com . StrTo ( c . Query ( \"tag_id\" )). MustInt () title := c . Query ( \"title\" ) desc := c . Query ( \"desc\" ) content := c . Query ( \"content\" ) modifiedBy := c . Query ( \"modified_by\" ) var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只能是0或1\" ) } valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) valid . MaxSize ( title , 100 , \"title\" ). Message ( \"标题最长为100字符\" ) valid . MaxSize ( desc , 255 , \"desc\" ). Message ( \"简述最长为255字符\" ) valid . MaxSize ( content , 65535 , \"content\" ). Message ( \"内容最长为65535字符\" ) valid . Required ( modifiedBy , \"modified_by\" ). Message ( \"修改人不能为空\" ) valid . MaxSize ( modifiedBy , 100 , \"modified_by\" ). Message ( \"修改人最长为100字符\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { if models . ExistTagByID ( tagID ) { data := make ( map [ string ] interface {}) if tagID > 0 { data [ \"tag_id\" ] = tagID } if title != \"\" { data [ \"title\" ] = title } if desc != \"\" { data [ \"desc\" ] = desc } if content != \"\" { data [ \"content\" ] = content } data [ \"modified_by\" ] = modifiedBy models . EditArticle ( id , data ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_TAG } } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s err.Message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // DeleteArticle 删除文章 func DeleteArticle ( c * gin . Context ) { id := com . StrTo ( c . Query ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { models . DeleteArticle ( id ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.Key:%s err.Message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } 定义文章的数据库模型 数据库模型和相关CRUD操作 在 ./models 下新建 article.go 文件 package models import ( \"time\" \"github.com/jinzhu/gorm\" ) // Article 文章结构体 type Article struct { Model // 声明该`TagID`为索引 TagID int `json:\"tag_id\" gorm:\"index\"` Tag Tag `json:tag` Title string `json:\"title\"` Desc string `json:\"desc\"` Content string `json:\"content\"` CreatedBy string `json:\"created_by\"` ModifiedBy string `json:\"modified_by\"` State int `json:state\"` } // BeforeCreate 创建数据前的操作 func ( article * Article ) BeforeCreate ( scope * gorm . Scope ) error { // scope 包含当前执行的所有信息 scope . SetColumn ( \"CreateOn\" , time . Now (). Unix ()) return nil } // BeforeUpdate 更新(编辑)之前添加修改时间 func ( article * Article ) BeforeUpdate ( scope * gorm . Scope ) error { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) return nil } // ExistArticleByID 判断是否存在文章 func ExistArticleByID ( id int ) bool { var article Article db . Select ( \"id\" ). Where ( \"id = ?\" , id ). Find ( & article ) if article . ID > 0 { return true } return false } // GetArticleTotal 计算文章数量 func GetArticleTotal ( maps interface {}) ( count int ) { // 在Article数据库中查询所有数据后计数返回给count db . Model ( & Article {}). Where ( maps ). Count ( & count ) return count } // GetArticles 获取所有文章列表 func GetArticles ( pageNum int , pageSize int , maps interface {}) ( articles [] Article ) { // 根据条件预加载 db . Preload ( \"Tag\" ). Where ( maps ). Offset ( pageNum ). Limit ( pageSize ). Find ( & articles ) return articles } // GetArticle 获取单篇文章 func GetArticle ( id int ) ( article Article ) { // 找到该片文章, 返回到article中 db . Where ( \"id = ?\" , id ). First ( & article ) // 获取与该篇文章有关的Tag // 通过.Related关联到嵌套在Article内的Tag结构体 db . Model ( & article ). Related ( & article . Tag ) return article } // EditArticle 编辑文章 func EditArticle ( id int , data interface {}) bool { db . Model ( & Article {}). Where ( \"id = ?\" , id ). Update ( data ) return true } // AddArticle 添加文章 func AddArticle ( data map [ string ] interface {}) bool { db . Create ( & Article { // v.(I)类型断言: 判断接口v的实际类型是否为(I)类型 TagID : data [ \"tag_id\" ].( int ), Title : data [ \"title\" ].( string ), Desc : data [ \"desc\" ].( string ), Content : data [ \"content\" ].( string ), CreatedBy : data [ \"created_by\" ].( string ), State : data [ \"state\" ].( int ), }) return true } // DeleteArticle 删除文章 func DeleteArticle ( id int ) bool { db . Where ( \"id = ?\" , id ). Delete ( Article {}) return true }","text_tokens":["msg","title","空壳","pagesize","else","描述","与","修改","printf","\"","处理","结构","post",";","中","related","http","判断","查询","分发","单篇","数据库","context","为空","请求","func","列表","gorm","?","strto","删除",".","计数","存在","success","类","put","if","range","声明","当前","前","/","创建人","完成","preload","id","据库","更新","import","modifiedon","model","util","tagid","getmsg","接口","!","标题","required","jinzhu","where","预","query","github","deletearticle","体","getarticletotal","和","go","maxsize","04","3","select","existtagbyid","数量","tags","param","内","desc","var","人","package",":","log","min","信息","接口定义","scope","list","total","delete",">","beforecreate","后","执行","”","通过","编辑","i","limit","操作","单个","]","到","必须",")","net","=","err","invalid","`","db","关联","找到","int","offset","获取","error","unknwon","是","find","加载","addarticle","api","maps","计算","return","article","字符","内容","json","haserrors","不能","索引","包含","content","gin","exist","100","增加","createdby","pagenum","modifiedby","返回","编写","}","255","key","状态","first","message","statusok","(","e","beego","not","数据","v","s","或","类型","valid","相关","time","之前","{","make","index","unix","now","篇文章","modified","的","1","：","文章","getarticle","_","该","添加","断言","string","路由","getpage","多个","map","在","get","created","*","state","题目","最长","允许","crud","下","by","博客","标签","models","嵌套","v1","beforeupdate","setcolumn","setting","[","c","data","为","创建"," ","for","tag","mustint","update","interface","validation","nil","只","65535","false","根据","message%","定义","articles","新建","文件","该片","%","修改文章","count","实际","createon","给","“","example","-",",","code","大于","create","com","struct","0","模型","astaxie","bool","errors","params","&","pkg","getarticles","arg","type","gettagtotal","所有","true","条件","h","时间","routers","existarticlebyid","settings","editarticle","简述","gonic","是否","有关","只能"],"title":"go-gin-example 04：API-3","title_tokens":["：","gin","go","api"," ","04","3","example","-"]},{"location":"Golang/Project/04 API-3/#go-gin-example-04api-3","text":"完成博客的文章类接口定义和编写","text_tokens":["的","完成","文章","和","定义","接口定义","类","编写","博客","接口"],"title":"go-gin-example 04：API-3","title_tokens":["：","gin","go","api"," ","04","3","example","-"]},{"location":"Golang/Project/04 API-3/#_1","text":"定义文章的路由分发操作 获取文章列表：GET(“/articles”) 获取单篇文章：GET(“/articles/:id”) 更新文章：PUT(“/articles/:id”) 新建文章：POST(“/articles”) 删除文章：DELETE(“/tags/:id”)","text_tokens":[" ","tags","(","post",":","定义","articles","新建","分发","单篇","delete","”","“","操作","列表","的",")","：","文章","删除","put","路由","/","获取","get","id","更新"],"title":"定义接口","title_tokens":["接口","定义"]},{"location":"Golang/Project/04 API-3/#_2","text":"文章请求处理API 在 ./routers/api/v1 下新建 article.go 文件 package v1 import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/pkg/util\" \"log\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetArticle 获取单个文章 func GetArticle ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) code := e . INVALID_PARAMS var data interface {} if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { data = models . GetArticle ( id ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key: %s, err.message: %s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // GetArticles 获取多个文章 func GetArticles ( c * gin . Context ) { data := make ( map [ string ] interface {}) maps := make ( map [ string ] interface {}) valid := validation . Validation {} var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只允许0或1\" ) } var tagID = - 1 if arg := c . Query ( \"tag_id\" ); arg != \"\" { tagID = com . StrTo ( arg ). MustInt () maps [ \"tag_id\" ] = tagID valid . Min ( tagID , 1 , \"tag_id\" ). Message ( \"标签ID必须大于0\" ) } code := e . INVALID_PARAMS if ! valid . HasErrors () { data [ \"list\" ] = models . GetArticles ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) code = e . SUCCESS } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s, err.message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // AddArticle 增加文章 func AddArticle ( c * gin . Context ) { tagID := com . StrTo ( c . Query ( \"tag_id\" )). MustInt () title := c . Query ( \"title\" ) desc := c . Query ( \"desc\" ) content := c . Query ( \"content\" ) createdBy := c . Query ( \"created_by\" ) state := com . StrTo ( c . Query ( \"state\" )). MustInt () valid := validation . Validation {} valid . Min ( tagID , 1 , \"tagID\" ). Message ( \"标签ID必须大于0\" ) valid . Required ( title , \"title\" ). Message ( \"题目不能为空\" ) valid . Required ( desc , \"desc\" ). Message ( \"描述不能为空\" ) valid . Required ( content , \"content\" ). Message ( \"内容不能为空\" ) valid . Required ( createdBy , \"created_by\" ). Message ( \"创建人不能为空\" ) valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只能是0或1\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistTagByID ( tagID ) { data := make ( map [ string ] interface {}) data [ \"tag_id\" ] = tagID data [ \"title\" ] = title data [ \"desc\" ] = desc data [ \"content\" ] = content data [ \"created_by\" ] = createdBy data [ \"state\" ] = state models . AddArticle ( data ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_TAG } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s, err.message%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // EditArticle 修改文章 func EditArticle ( c * gin . Context ) { valid := validation . Validation {} id := com . StrTo ( c . Query ( \"id\" )). MustInt () tagID := com . StrTo ( c . Query ( \"tag_id\" )). MustInt () title := c . Query ( \"title\" ) desc := c . Query ( \"desc\" ) content := c . Query ( \"content\" ) modifiedBy := c . Query ( \"modified_by\" ) var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只能是0或1\" ) } valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) valid . MaxSize ( title , 100 , \"title\" ). Message ( \"标题最长为100字符\" ) valid . MaxSize ( desc , 255 , \"desc\" ). Message ( \"简述最长为255字符\" ) valid . MaxSize ( content , 65535 , \"content\" ). Message ( \"内容最长为65535字符\" ) valid . Required ( modifiedBy , \"modified_by\" ). Message ( \"修改人不能为空\" ) valid . MaxSize ( modifiedBy , 100 , \"modified_by\" ). Message ( \"修改人最长为100字符\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { if models . ExistTagByID ( tagID ) { data := make ( map [ string ] interface {}) if tagID > 0 { data [ \"tag_id\" ] = tagID } if title != \"\" { data [ \"title\" ] = title } if desc != \"\" { data [ \"desc\" ] = desc } if content != \"\" { data [ \"content\" ] = content } data [ \"modified_by\" ] = modifiedBy models . EditArticle ( id , data ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_TAG } } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s err.Message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // DeleteArticle 删除文章 func DeleteArticle ( c * gin . Context ) { id := com . StrTo ( c . Query ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { models . DeleteArticle ( id ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.Key:%s err.Message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) }","text_tokens":["msg","title","pagesize","else","描述","修改","printf","\"","处理",";","http","context","为空","请求","func","strto","删除",".","success","range","if","/","创建人","id","import","util","tagid","getmsg","!","标题","required","query","github","deletearticle","go","maxsize","existtagbyid","param","desc","var","人","package","log",":","min","list","total",">","单个","]","必须",")","net","=","err","invalid","获取","error","unknwon","是","addarticle","api","maps","article","字符","内容","json","haserrors","不能","content","gin","exist","100","增加","createdby","modifiedby","}","255","key","状态","message","statusok","(","e","beego","not","s","或","valid","{","make","modified","1","文章","getarticle","_","string","getpage","多个","map","在","题目","created","*","state","最长","允许","下","by","标签","models","v1","setting","[","c","data","为","创建"," ","for","tag","mustint","interface","validation","只","65535","message%","新建","文件","%","修改文章",",","example","-","code","大于","com","0","astaxie","errors","params","pkg","getarticles","arg","gettagtotal","h","routers","existarticlebyid","settings","editarticle","简述","gonic","只能"],"title":"空壳路由","title_tokens":["空壳","路由"]},{"location":"Golang/Project/04 API-3/#_3","text":"数据库模型和相关CRUD操作 在 ./models 下新建 article.go 文件 package models import ( \"time\" \"github.com/jinzhu/gorm\" ) // Article 文章结构体 type Article struct { Model // 声明该`TagID`为索引 TagID int `json:\"tag_id\" gorm:\"index\"` Tag Tag `json:tag` Title string `json:\"title\"` Desc string `json:\"desc\"` Content string `json:\"content\"` CreatedBy string `json:\"created_by\"` ModifiedBy string `json:\"modified_by\"` State int `json:state\"` } // BeforeCreate 创建数据前的操作 func ( article * Article ) BeforeCreate ( scope * gorm . Scope ) error { // scope 包含当前执行的所有信息 scope . SetColumn ( \"CreateOn\" , time . Now (). Unix ()) return nil } // BeforeUpdate 更新(编辑)之前添加修改时间 func ( article * Article ) BeforeUpdate ( scope * gorm . Scope ) error { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) return nil } // ExistArticleByID 判断是否存在文章 func ExistArticleByID ( id int ) bool { var article Article db . Select ( \"id\" ). Where ( \"id = ?\" , id ). Find ( & article ) if article . ID > 0 { return true } return false } // GetArticleTotal 计算文章数量 func GetArticleTotal ( maps interface {}) ( count int ) { // 在Article数据库中查询所有数据后计数返回给count db . Model ( & Article {}). Where ( maps ). Count ( & count ) return count } // GetArticles 获取所有文章列表 func GetArticles ( pageNum int , pageSize int , maps interface {}) ( articles [] Article ) { // 根据条件预加载 db . Preload ( \"Tag\" ). Where ( maps ). Offset ( pageNum ). Limit ( pageSize ). Find ( & articles ) return articles } // GetArticle 获取单篇文章 func GetArticle ( id int ) ( article Article ) { // 找到该片文章, 返回到article中 db . Where ( \"id = ?\" , id ). First ( & article ) // 获取与该篇文章有关的Tag // 通过.Related关联到嵌套在Article内的Tag结构体 db . Model ( & article ). Related ( & article . Tag ) return article } // EditArticle 编辑文章 func EditArticle ( id int , data interface {}) bool { db . Model ( & Article {}). Where ( \"id = ?\" , id ). Update ( data ) return true } // AddArticle 添加文章 func AddArticle ( data map [ string ] interface {}) bool { db . Create ( & Article { // v.(I)类型断言: 判断接口v的实际类型是否为(I)类型 TagID : data [ \"tag_id\" ].( int ), Title : data [ \"title\" ].( string ), Desc : data [ \"desc\" ].( string ), Content : data [ \"content\" ].( string ), CreatedBy : data [ \"created_by\" ].( string ), State : data [ \"state\" ].( int ), }) return true } // DeleteArticle 删除文章 func DeleteArticle ( id int ) bool { db . Where ( \"id = ?\" , id ). Delete ( Article {}) return true }","text_tokens":["title","pagesize","与","修改","\"","结构","中","related","判断","查询","数据库","单篇","func","gorm","?","列表","删除",".","计数","存在","if","声明","当前","前","/","preload","id","据库","更新","import","modifiedon","model","tagid","接口","where","预","jinzhu","getarticletotal","github","体","deletearticle","和","go","select","数量","内","desc","var","package",":","信息","scope",">","delete","beforecreate","后","执行","通过","编辑","i","limit","操作","]","到",")","db","=","`","关联","找到","int","offset","获取","error","find","加载","addarticle","计算","maps","return","article","json","索引","包含","content","pagenum","createdby","modifiedby","返回","}","first","(","数据","v","类型","之前","相关","time","{","index","unix","now","篇文章","modified","的","文章","getarticle","_","该","添加","断言","string","map","在","created","state","crud","*","下","by","models","嵌套","beforeupdate","setcolumn","[","data","为","创建"," ","tag","update","interface","nil","false","根据","articles","新建","文件","该片","count","实际","createon","给",",","create","com","struct","0","模型","bool","&","getarticles","type","所有","true","条件","时间","existarticlebyid","是否","有关","editarticle"],"title":"定义文章的数据库模型","title_tokens":["的","文章","数据","定义","据库","数据库","模型"]},{"location":"Golang/Project/05 JWT/","text":"go-gin-example 05：JWT 为什么要JWT 当前的API接口虽然编写好了，但是这些API可以被随意调用，这样子是不安全的。因此需要通过 jwt-go 的方式来解决 如何使用JWT 下载依赖包： go get -u github.com/dgrijalva/jwt-go 编写 ./pkg/util 下的新建 jwt.go 文件 其中该工具包主要包含 生成Token 、 解析Token 功能 NewWithClaims 中加密方法有 SigningMethodHS256 ， SigningMethodHS384 、 SigningMethodHS512 三种 cropto.Hash 方案 package util import ( setting \"go-gin-example/pkg/settings\" \"time\" \"github.com/dgrijalva/jwt-go\" ) var jwtSecret = [] byte ( setting . JwtSecret ) // Claims 声明Claims结构体 type Claims struct { Username string `json: \"username\"` Password string `json: \"password\"` jwt . StandardClaims } // GenerateToken 生成密钥 func GenerateToken ( username , password string ) ( string , error ) { nowTime := time . Now () expireTime := nowTime . Add ( 3 * time . Hour ) claims := Claims { username , password , jwt . StandardClaims { ExpiresAt : expireTime . Unix (), Issuer : \"gin-blog\" , }, } // 对claims 进行加密 tokenClaims := jwt . NewWithClaims ( jwt . SigningMethodHS256 , claims ) // 获得加密后的token // 猜测为生成一个加密后的字符串给jwtSecret token , err := tokenClaims . SignedString ( jwtSecret ) return token , err } // ParseToken 解析密钥 func ParseToken ( token string ) ( * Claims , error ) { tokenClaims , err := jwt . ParseWithClaims ( token , & Claims {}, func ( token * jwt . Token ) ( interface {}, error ) { return jwtSecret , nil }) if tokenClaims != nil { if claims , ok := tokenClaims . Claims .( * Claims ); ok && tokenClaims . Valid { return claims , nil } } return nil , err } 编写Gin中间件，在 middleware 下新建 jwt 目录，在其中新建 jwt.go 文件写入 package jwt import ( \"go-gin-example/pkg/e\" \"go-gin-example/pkg/util\" \"net/http\" \"time\" \"github.com/gin-gonic/gin\" ) // JWT json web token func JWT () gin . HandlerFunc { return func ( c * gin . Context ) { var code int var data interface {} code = e . SUCCESS token := c . Query ( \"token\" ) if token == \"\" { code = e . INVALID_PARAMS } else { claims , err := util . ParseToken ( token ) if err != nil { code = e . ERROR_AUTH_CHECK_TOKEN_FAIL } else if time . Now (). Unix () > claims . ExpiresAt { code = e . ERROR_AUTH_CHECK_TOKEN_TIMEOUT } } if code != e . SUCCESS { c . JSON ( http . StatusUnauthorized , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) // 通过Abort确保当前的handler未被调用, 即当验证不正确的时候丢弃掉该处理 c . Abort () return } c . Next () } } 获得token，在 ./models 下新建 auth.go 文件写入 package models // Auth Token认证 type Auth struct { ID int `gorm:\"primary_key\" json:\"id\"` Username string `json:\"username\"` Password string `json:\"password\"` } // CheckAuth 验证token func CheckAuth ( username , password string ) bool { var auth Auth db . Select ( \"id\" ). Where ( Auth { Username : username , Password : password }). First ( & auth ) if auth . ID > 0 { return true } return false } 在 ./api 下新建 auth.go 文件写入 package api import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" \"go-gin-example/pkg/util\" \"log\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" ) type auth struct { Username string `valid: \"Required; MaxSize(50)\" ` Password string `valid: \"Required; MaxSize(50)\"` } // GetAuth 获取认证 func GetAuth ( c * gin . Context ) { username := c . Query ( \"username\" ) password := c . Query ( \"password\" ) valid := validation . Validation {} a := auth { Username : username , Password : password } ok , _ := valid . Valid ( & a ) data := make ( map [ string ] interface {}) code := e . INVALID_PARAMS if ok { isExist := models . CheckAuth ( username , password ) // 如果存在该账号 if isExist { token , err := util . GenerateToken ( username , password ) if err != nil { code = e . ERROR_AUTH_TOKEN } else { data [ \"token\" ] = token code = e . SUCCESS } } else { // 不存在账号 code = e . ERROR_AUTH } } else { for _ , err := range valid . Errors { log . Println ( err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } 修改 router.go 文件 package routers import ( \"go-gin-example/middleware/jwt\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/routers/api\" v1 \"go-gin-example/routers/api/v1\" \"github.com/gin-gonic/gin\" ) // InitRouter 初始化路由 func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) // 调用认证接口 r . GET ( \"/auth\" , api . GetAuth ) apiv1 := r . Group ( \"/api/v1\" ) // Group内的所有请求都需要经过JWT apiv1 . Use ( jwt . JWT ()) { apiv1 . GET ( \"/tags\" , v1 . GetTags ) apiv1 . POST ( \"/tags\" , v1 . AddTag ) apiv1 . PUT ( \"/tags/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/tags/:id\" , v1 . DeleteTag ) apiv1 . GET ( \"/articles\" , v1 . GetArticles ) apiv1 . GET ( \"/articles/:id\" , v1 . GetArticle ) apiv1 . POST ( \"/articles\" , v1 . AddArticle ) apiv1 . PUT ( \"/articles/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/atricles/:id\" , v1 . DeleteTag ) } return r } 调用 访问 http://127.0.0.1:8000/auth?username=test&password=test123456 获得token 带着token访问api http://127.0.0.1:8000/api/v1/articles?token=eyJhbGci...","text_tokens":["msg","router","什么","logger","isexist","else","。","runmode","不","这些","可以","signingmethodhs384","gettags","r","修改","了","\"","结构","处理","中","需要",";","post","http","test123456","方案","apiv1","有","context","new","请求","dgrijalva","newwithclaims","加密","写入","claims","func","hour","目录","gorm","setmode","?","工具包",".","存在","success","为什么","初始","range","if","包","丢弃","put","声明","当前","ok","/","use","获得","id","handler","但是","import","util","signingmethodhs512","接口","虽然","!","getmsg","next","where","required","都","query","github","体","go","依赖","方法","select","maxsize","3","atricles","parsetoken","tags","内","var","未","package","安全",":","log","primary","着",">","delete","通过","后","带","主要","]","访问","...",")","err","=","net","来","要","`","invalid","db","确保","getauth","hash","int","三种","正确","expiresat","abort","获取","error","时候","是","字符串","addarticle","api","样子","check","8000","return","nowtime","字符","好","json","包含","猜测","initrouter","edittag","gin","password","handlerfunc","signingmethodhs256","eyjhbgci","tokenclaims","deletetag","编写","}","0.1","expiretime","随意","add","key","即当","first","message","blog","(","中间","e","statusok","engine","beego","test","token","issuer","使用","valid","time","{","make","byte","unix","掉","now","parsewithclaims","的","：","getarticle","web","&&","_","该","这","被","功能","string","路由","recovery","、","middleware","认证","map","username","get","在","*","group","下","经过","一个","models","如果","v1","timeout","setting","其中","[","验证","c","127.0","调用","为","data"," ","解析","for","cropto","interface","validation","nil","println","工具","因此","false","对","下载","u","articles","新建","文件","signedstring","进行","a","给",",","example","-","jwt","code","解决","生成","中间件","05","com","struct","fail","addtag","初始化","0","如何","astaxie","generatetoken","bool","checkauth","errors","auth","，","&","params","statusunauthorized","pkg","getarticles","type","true","账号","密钥","h","所有","50","routers","settings","方式","gonic","jwtsecret","standardclaims"],"title":"go-gin-example 05：JWT","title_tokens":["：","gin","05","go"," ","example","-","jwt"]},{"location":"Golang/Project/05 JWT/#go-gin-example-05jwt","text":"","text_tokens":[],"title":"go-gin-example 05：JWT","title_tokens":["：","gin","05","go"," ","example","-","jwt"]},{"location":"Golang/Project/05 JWT/#jwt","text":"当前的API接口虽然编写好了，但是这些API可以被随意调用，这样子是不安全的。因此需要通过 jwt-go 的方式来解决","text_tokens":["调用","go","。"," ","编写","不","这些","可以","随意","了","因此","需要","安全","通过","jwt","-","的","解决","来","这","被","，","当前","是","api","样子","但是","好","虽然","接口","方式"],"title":"为什么要JWT","title_tokens":["要","什么","jwt","为什么"]},{"location":"Golang/Project/05 JWT/#jwt_1","text":"下载依赖包： go get -u github.com/dgrijalva/jwt-go 编写 ./pkg/util 下的新建 jwt.go 文件 其中该工具包主要包含 生成Token 、 解析Token 功能 NewWithClaims 中加密方法有 SigningMethodHS256 ， SigningMethodHS384 、 SigningMethodHS512 三种 cropto.Hash 方案 package util import ( setting \"go-gin-example/pkg/settings\" \"time\" \"github.com/dgrijalva/jwt-go\" ) var jwtSecret = [] byte ( setting . JwtSecret ) // Claims 声明Claims结构体 type Claims struct { Username string `json: \"username\"` Password string `json: \"password\"` jwt . StandardClaims } // GenerateToken 生成密钥 func GenerateToken ( username , password string ) ( string , error ) { nowTime := time . Now () expireTime := nowTime . Add ( 3 * time . Hour ) claims := Claims { username , password , jwt . StandardClaims { ExpiresAt : expireTime . Unix (), Issuer : \"gin-blog\" , }, } // 对claims 进行加密 tokenClaims := jwt . NewWithClaims ( jwt . SigningMethodHS256 , claims ) // 获得加密后的token // 猜测为生成一个加密后的字符串给jwtSecret token , err := tokenClaims . SignedString ( jwtSecret ) return token , err } // ParseToken 解析密钥 func ParseToken ( token string ) ( * Claims , error ) { tokenClaims , err := jwt . ParseWithClaims ( token , & Claims {}, func ( token * jwt . Token ) ( interface {}, error ) { return jwtSecret , nil }) if tokenClaims != nil { if claims , ok := tokenClaims . Claims .( * Claims ); ok && tokenClaims . Valid { return claims , nil } } return nil , err } 编写Gin中间件，在 middleware 下新建 jwt 目录，在其中新建 jwt.go 文件写入 package jwt import ( \"go-gin-example/pkg/e\" \"go-gin-example/pkg/util\" \"net/http\" \"time\" \"github.com/gin-gonic/gin\" ) // JWT json web token func JWT () gin . HandlerFunc { return func ( c * gin . Context ) { var code int var data interface {} code = e . SUCCESS token := c . Query ( \"token\" ) if token == \"\" { code = e . INVALID_PARAMS } else { claims , err := util . ParseToken ( token ) if err != nil { code = e . ERROR_AUTH_CHECK_TOKEN_FAIL } else if time . Now (). Unix () > claims . ExpiresAt { code = e . ERROR_AUTH_CHECK_TOKEN_TIMEOUT } } if code != e . SUCCESS { c . JSON ( http . StatusUnauthorized , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) // 通过Abort确保当前的handler未被调用, 即当验证不正确的时候丢弃掉该处理 c . Abort () return } c . Next () } } 获得token，在 ./models 下新建 auth.go 文件写入 package models // Auth Token认证 type Auth struct { ID int `gorm:\"primary_key\" json:\"id\"` Username string `json:\"username\"` Password string `json:\"password\"` } // CheckAuth 验证token func CheckAuth ( username , password string ) bool { var auth Auth db . Select ( \"id\" ). Where ( Auth { Username : username , Password : password }). First ( & auth ) if auth . ID > 0 { return true } return false } 在 ./api 下新建 auth.go 文件写入 package api import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" \"go-gin-example/pkg/util\" \"log\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" ) type auth struct { Username string `valid: \"Required; MaxSize(50)\" ` Password string `valid: \"Required; MaxSize(50)\"` } // GetAuth 获取认证 func GetAuth ( c * gin . Context ) { username := c . Query ( \"username\" ) password := c . Query ( \"password\" ) valid := validation . Validation {} a := auth { Username : username , Password : password } ok , _ := valid . Valid ( & a ) data := make ( map [ string ] interface {}) code := e . INVALID_PARAMS if ok { isExist := models . CheckAuth ( username , password ) // 如果存在该账号 if isExist { token , err := util . GenerateToken ( username , password ) if err != nil { code = e . ERROR_AUTH_TOKEN } else { data [ \"token\" ] = token code = e . SUCCESS } } else { // 不存在账号 code = e . ERROR_AUTH } } else { for _ , err := range valid . Errors { log . Println ( err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } 修改 router.go 文件 package routers import ( \"go-gin-example/middleware/jwt\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/routers/api\" v1 \"go-gin-example/routers/api/v1\" \"github.com/gin-gonic/gin\" ) // InitRouter 初始化路由 func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) // 调用认证接口 r . GET ( \"/auth\" , api . GetAuth ) apiv1 := r . Group ( \"/api/v1\" ) // Group内的所有请求都需要经过JWT apiv1 . Use ( jwt . JWT ()) { apiv1 . GET ( \"/tags\" , v1 . GetTags ) apiv1 . POST ( \"/tags\" , v1 . AddTag ) apiv1 . PUT ( \"/tags/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/tags/:id\" , v1 . DeleteTag ) apiv1 . GET ( \"/articles\" , v1 . GetArticles ) apiv1 . GET ( \"/articles/:id\" , v1 . GetArticle ) apiv1 . POST ( \"/articles\" , v1 . AddArticle ) apiv1 . PUT ( \"/articles/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/atricles/:id\" , v1 . DeleteTag ) } return r } 调用 访问 http://127.0.0.1:8000/auth?username=test&password=test123456 获得token 带着token访问api http://127.0.0.1:8000/api/v1/articles?token=eyJhbGci...","text_tokens":["msg","router","logger","isexist","else","runmode","不","signingmethodhs384","gettags","r","修改","\"","结构","处理","中",";","需要","post","http","test123456","方案","apiv1","有","context","new","请求","dgrijalva","newwithclaims","加密","写入","claims","func","hour","目录","gorm","setmode","?","工具包",".","存在","success","初始","range","if","包","丢弃","put","声明","ok","当前","/","use","获得","id","handler","import","util","signingmethodhs512","getmsg","接口","!","next","where","required","都","query","github","体","go","依赖","方法","select","maxsize","3","atricles","parsetoken","tags","内","var","未","package",":","log","primary","着",">","delete","通过","后","带","主要","]","访问","...",")","err","=","net","`","invalid","db","确保","getauth","hash","int","三种","正确","expiresat","abort","获取","error","时候","字符串","addarticle","api","check","8000","return","nowtime","字符","json","包含","猜测","initrouter","edittag","gin","password","handlerfunc","signingmethodhs256","eyjhbgci","tokenclaims","deletetag","编写","}","0.1","expiretime","add","key","即当","first","message","blog","(","中间","e","statusok","engine","beego","test","token","issuer","valid","time","{","make","byte","unix","掉","now","parsewithclaims","的","：","getarticle","web","&&","_","该","功能","被","string","recovery","路由","、","middleware","认证","map","username","get","在","*","group","下","经过","一个","models","如果","v1","timeout","setting","其中","[","验证","c","127.0","data","为","调用"," ","解析","for","cropto","interface","validation","nil","println","工具","false","对","下载","u","articles","新建","文件","signedstring","进行","a","给",",","jwt","-","example","code","生成","中间件","fail","com","struct","addtag","初始化","0","astaxie","generatetoken","bool","checkauth","errors","auth","，","&","params","statusunauthorized","pkg","getarticles","type","true","账号","密钥","h","所有","50","routers","settings","gonic","jwtsecret","standardclaims"],"title":"如何使用JWT","title_tokens":["如何","jwt","使用"]},{"location":"Golang/Project/08 Swagger/","text":"go-gin-example 08： Swagger Swagger是什么? 接口生成器：自动生成接口文档 如何在golang中使用Swagger 安装 安装swag go get -u github.com/swaggo/swag/cmd/swag ，如果没有将 $GOROOT/bin 添加到 $PATH 中，则需要将swag的可执行文件移到 $GOBIN 中 验证是否安装成功 $ swag -v swag version v1.6.3 安装gin-swagger go get -u github.com/swaggo/gin-swagger go get -u github.com/swaggo/gin-swagger/swaggerFiles 编写swag // Response 定义swag文档返回的结构体 type Response struct { Code int `json:\"code\"` Msg string `json:\"msg\"` Data interface{} `json:\"data\"` } // GetArticles 获取多个文章 // @Summary 获取多个文章 // @Produce json // @Param tag_id body int false \"TagID\" // @Param state body int false \"State\" // @Param created_by body int false \"CreatedBy\" // @Success 200 {object} Response // @Failure 500 {object} Response // @Router /api/v1/articles [get] func GetArticles(c *gin.Context) { data := make(map[string]interface{}) maps := make(map[string]interface{}) valid := validation.Validation{} var state = -1 if arg := c.Query(\"state\"); arg != \"\" { state = com.StrTo(arg).MustInt() maps[\"state\"] = state valid.Range(state, 0, 1, \"state\").Message(\"状态只允许0或1\") } var tagID = -1 if arg := c.Query(\"tag_id\"); arg != \"\" { tagID = com.StrTo(arg).MustInt() maps[\"tag_id\"] = tagID valid.Min(tagID, 1, \"tag_id\").Message(\"标签ID必须大于0\") } code := e.INVALID_PARAMS if !valid.HasErrors() { data[\"list\"] = models.GetArticles(util.GetPage(c), setting.PageSize, maps) data[\"total\"] = models.GetTagTotal(maps) code = e.SUCCESS } else { for _, err := range valid.Errors { log.Printf(\"err.key:%s, err.message:%s\", err.Key, err.Message) } } c.JSON(http.StatusOK, gin.H{ \"code\": code, \"msg\": e.GetMsg(code), \"data\": data, }) } 格式 // @Summary API描述 // @Produce json[生成..内容] // @Param id path/body/query int[type] false/true \"ID\"[程序中对应变量名字] // @Success 200 string \"ok\" --成功返回信息 // @Failure 500 string \"bad\" --失败返回信息 // @Routers api/v1/article/{id} [GET] 请求id, 请求方法 效果 访问 http://127.0.0.1:8000/swagger/index.html","text_tokens":["msg","router","什么","pagesize","else","描述","path","成功","格式","失败","200","printf","结构","\"","对应","中","需要",";","程序","http","生成器","object","swaggo","context","请求","func","?","strto","成器",".","success","produce","bin","range","if","golang","ok","/","version","bad","id","tagid","util","getmsg","接口","!","可执行文件","变量","query","github","体","go","方法","3","文档","param","var","cmd","log",":","min","信息","list","total","执行","goroot","到","]","访问","必须",")","err","=","html","`","invalid","名字","行文","int","获取","效果","是","将","api","maps","8000","article","内容","body","json","haserrors","gin","createdby","返回","编写","}","0.1","key","状态","message","statusok","(","e","v","..","s","或","使用","valid","{","make","index","v1.6","swagger","的","@","：","文章","1","08","_","添加","string","自动","getpage","swag","多个","map","在","get","created","state","*","gobin","by","标签","models","如果","v1","setting","127.0","[","验证","c","data"," ","for","tag","swaggerfiles","mustint","移","interface","validation","安装","只","false","定义","u","articles","$","文件","%",",","example","-","code","大于","生成","500","com","struct","0","如何","failure","response","errors","，","params","summary","getarticles","arg","type","gettagtotal","true","没有","h","则","是否","routers","允许"],"title":"go-gin-example 08： Swagger","title_tokens":["：","gin","go","08"," ","example","-","swagger"]},{"location":"Golang/Project/08 Swagger/#go-gin-example-08-swagger","text":"","text_tokens":[],"title":"go-gin-example 08： Swagger","title_tokens":["：","gin","go","08"," ","example","-","swagger"]},{"location":"Golang/Project/08 Swagger/#swagger","text":"接口生成器：自动生成接口文档","text_tokens":["生成","：","成器","生成器","文档","接口","自动"],"title":"Swagger是什么?","title_tokens":["?","是","什么","swagger"]},{"location":"Golang/Project/08 Swagger/#golangswagger","text":"","text_tokens":[],"title":"如何在golang中使用Swagger","title_tokens":["中","在","使用","如何","golang","swagger"]},{"location":"Golang/Project/08 Swagger/#_1","text":"安装swag go get -u github.com/swaggo/swag/cmd/swag ，如果没有将 $GOROOT/bin 添加到 $PATH 中，则需要将swag的可执行文件移到 $GOBIN 中 验证是否安装成功 $ swag -v swag version v1.6.3 安装gin-swagger go get -u github.com/swaggo/gin-swagger go get -u github.com/swaggo/gin-swagger/swaggerFiles","text_tokens":["github","验证","gin","go"," ","3","swaggerfiles","path","移","成功","安装","cmd","中","需要","v","u","$","文件","swaggo","执行","-","goroot","v1.6","到","swagger","的","com",".","bin","添加","行文","，","/","swag","version","get","将","gobin","没有","则","是否","如果","可执行文件"],"title":"安装","title_tokens":["安装"]},{"location":"Golang/Project/08 Swagger/#swag","text":"// Response 定义swag文档返回的结构体 type Response struct { Code int `json:\"code\"` Msg string `json:\"msg\"` Data interface{} `json:\"data\"` } // GetArticles 获取多个文章 // @Summary 获取多个文章 // @Produce json // @Param tag_id body int false \"TagID\" // @Param state body int false \"State\" // @Param created_by body int false \"CreatedBy\" // @Success 200 {object} Response // @Failure 500 {object} Response // @Router /api/v1/articles [get] func GetArticles(c *gin.Context) { data := make(map[string]interface{}) maps := make(map[string]interface{}) valid := validation.Validation{} var state = -1 if arg := c.Query(\"state\"); arg != \"\" { state = com.StrTo(arg).MustInt() maps[\"state\"] = state valid.Range(state, 0, 1, \"state\").Message(\"状态只允许0或1\") } var tagID = -1 if arg := c.Query(\"tag_id\"); arg != \"\" { tagID = com.StrTo(arg).MustInt() maps[\"tag_id\"] = tagID valid.Min(tagID, 1, \"tag_id\").Message(\"标签ID必须大于0\") } code := e.INVALID_PARAMS if !valid.HasErrors() { data[\"list\"] = models.GetArticles(util.GetPage(c), setting.PageSize, maps) data[\"total\"] = models.GetTagTotal(maps) code = e.SUCCESS } else { for _, err := range valid.Errors { log.Printf(\"err.key:%s, err.message:%s\", err.Key, err.Message) } } c.JSON(http.StatusOK, gin.H{ \"code\": code, \"msg\": e.GetMsg(code), \"data\": data, }) } 格式 // @Summary API描述 // @Produce json[生成..内容] // @Param id path/body/query int[type] false/true \"ID\"[程序中对应变量名字] // @Success 200 string \"ok\" --成功返回信息 // @Failure 500 string \"bad\" --失败返回信息 // @Routers api/v1/article/{id} [GET] 请求id, 请求方法","text_tokens":["msg","router","pagesize","else","描述","path","成功","格式","失败","200","printf","\"","结构","对应",";","中","程序","http","object","context","请求","func","strto",".","success","produce","range","if","ok","/","bad","id","tagid","util","getmsg","!","变量","query","体","方法","文档","param","var","log",":","min","信息","list","total","]","必须",")","err","=","`","invalid","名字","int","获取","api","maps","article","内容","body","json","haserrors","gin","createdby","返回","}","key","状态","message","statusok","(","e","..","s","或","valid","{","make","的","@","1","文章","_","string","getpage","swag","多个","map","get","created","state","*","by","标签","models","v1","setting","[","c","data"," ","for","tag","mustint","interface","validation","只","false","定义","articles","%",",","code","-","大于","生成","500","com","struct","0","failure","response","errors","params","summary","getarticles","arg","type","gettagtotal","true","h","routers","允许"],"title":"编写swag","title_tokens":["swag","编写"]},{"location":"Golang/Project/08 Swagger/#_2","text":"访问 http://127.0.0.1:8000/swagger/index.html","text_tokens":[":","http",".","html"," ","8000","0.1","swagger","index","/","127.0","访问"],"title":"效果","title_tokens":["效果"]},{"location":"Golang/Project/09 Docker/","text":"go-gin-example 09：Docker Docker是什么 Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers.[6] Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels.[7] All containers are run by a single operating-system kernel and are thus more lightweight than virtual machines.[8] Docker是Paas的产品, 通过被成为 容器 的 系统级别 的虚拟化交付软件. 如何使用Docker 安装Docker(WIN10 PRO) 右键WINDOWS - 应用和功能 - 程序和功能 - 启用或关闭WINDOS功能 - 开启Hyper-V 开启 Hyper-V 可能导致 ShadowSocksR 端口被占用 官网 Docker基本指令 编写Dockerfile FROM golang:latest ENV GOPROXY https://goproxy.cn,direct WORKDIR $GOPATH /src/go-gin-example COPY . $GOPATH /src/go-gin-example RUN go build . EXPOSE 8000 ENTRYPOINT [ \"./go-gin-example\" ] 1. FROM : 指定基础镜像, 该指令必须要有,且得为第一条 2. WORKDIR : 指定工作目录路径, 若目录不存在, 则会创建改目录 3. COPY : 源路径 ... 目标路径, COPY 指令将 Dockerfile 文件所存在的上下文目录 复制 到目标路径位置 4. RUN : 执行命令 5. EXPOSE : 声明 运行时容器 提供服务端口, 仅仅是一个 声明 , 不会因为这个声明而开启这个端口 6. ENTRYPOINT : 指定 容器 启动程序的及参数(执行 ./go-gin-example) 运行 docker build -t gin-blog-docker . docker images docker run -p 8000:8000 gin-blog-docker 1. 在 . 当前环境运行 docker build 创建/构建镜像, -t 指定名称 2. docker images 查看镜像是否创建成功 3. 在本地8000端口运行容器 4. 发现 dial tcp 127.0.0.1:3306: connect: connection refused 错误 配置Mysql Docker docker pull mysql docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql 1. 拉取mysql镜像 2. 配置mysql端口 修改配置文件 conf.ini [database] TYPE = mysql USER = root PASSWORD = rootroot HOST = mysql:3306 NAME = blog TABLE_PREFIX = blog_ 关联Golang容器和Mysql容器 docker run --link mysql:mysql -p 8000:8000 gin-blog-docker 效果","text_tokens":["命令","什么","operating","参数","table","上下","不","host","https","交付","成功","修改","\"",";","are","程序","服务","database","右键","in","有","thus","t","启动","目录","own","虚拟","pro",".","存在","运行","name","images","other","虚拟化","源","golang","products","one","声明","当前","/","会","cn","use","pull","kernel","gopath","基础","2","时","to","os","isolated","提供","环境","p","7","latest","link","6","和","go","拉取","3","构建","service","env","more","bundle","5","refused","且","docker","第一条","下文","expose","through",":","及","开启","workdir","通过","from","第一","执行","root","rootroot","复制","改","所","]","到","...","configuration",")","产品","direct","必须","d","=","all","paas","要","系统","软件","single","deliver","关联","若","windows","libraries","效果","run","是","将","channels","可能","关闭","8000","端口","级别","3306","执行命令","指令","can","level","不会","virtualization","这个","而","gin","platform","password","machines","编写","0.1","and","communicate","src","查看","windos","发现","blog","(","上下文","e","v","名称","工作","或","使用","容器","成为","一条","的","1","：","仅仅","files","goproxy","tcp","of","user","_","该","功能","packages","software","被","win10","defined","hyper","位置","connect","配置","在","ini","is","than","virtual","09","路径","by","dial","each","一个","占用","127.0","[","called","得","为","well","创建"," ","4","conf","因为","prefix","set","that","system","安装","$","文件","mysql","a","connection",",","example","-","as","shadowsocksr","copy","dockerfile","containers","lightweight","entrypoint","with","如何","another","启用","官网","应用","错误","本地","build","配置文件","type","导致","镜像","基本","8","指定","they","则","是否","their","目标"],"title":"go-gin-example 09：Docker","title_tokens":["：","gin","go","09"," ","docker","example","-"]},{"location":"Golang/Project/09 Docker/#go-gin-example-09docker","text":"","text_tokens":[],"title":"go-gin-example 09：Docker","title_tokens":["：","gin","go","09"," ","docker","example","-"]},{"location":"Golang/Project/09 Docker/#docker","text":"Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers.[6] Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels.[7] All containers are run by a single operating-system kernel and are thus more lightweight than virtual machines.[8] Docker是Paas的产品, 通过被成为 容器 的 系统级别 的虚拟化交付软件.","text_tokens":["operating","交付",";","are","in","thus","own","虚拟",".","other","虚拟化","products","one","use","kernel","to","os","isolated","7","6","service","more","bundle","docker","through","通过","from","]","configuration",")","产品","all","paas","系统","软件","single","deliver","libraries","run","是","channels","级别","can","level","virtualization","platform","machines","and","communicate","(","容器","成为","的","files","of","packages","software","被","defined","is","than","virtual","by","each","[","called","well"," ","set","that","system","a",",","-","as","containers","lightweight","with","another","8","they","their"],"title":"Docker是什么","title_tokens":["docker","是","什么"]},{"location":"Golang/Project/09 Docker/#docker_1","text":"","text_tokens":[],"title":"如何使用Docker","title_tokens":["如何","docker","使用"]},{"location":"Golang/Project/09 Docker/#dockerwin10-pro","text":"右键WINDOWS - 应用和功能 - 程序和功能 - 启用或关闭WINDOS功能 - 开启Hyper-V 开启 Hyper-V 可能导致 ShadowSocksR 端口被占用 官网","text_tokens":["和"," ","windos","程序","右键","v","开启","或","-","shadowsocksr","功能","被","启用","官网","应用","windows","hyper","导致","可能","关闭","端口","占用"],"title":"安装Docker(WIN10 PRO)","title_tokens":["(",")","pro"," ","win10","docker","安装"]},{"location":"Golang/Project/09 Docker/#docker_2","text":"","text_tokens":[],"title":"Docker基本指令","title_tokens":["docker","指令","基本"]},{"location":"Golang/Project/09 Docker/#dockerfile","text":"FROM golang:latest ENV GOPROXY https://goproxy.cn,direct WORKDIR $GOPATH /src/go-gin-example COPY . $GOPATH /src/go-gin-example RUN go build . EXPOSE 8000 ENTRYPOINT [ \"./go-gin-example\" ] 1. FROM : 指定基础镜像, 该指令必须要有,且得为第一条 2. WORKDIR : 指定工作目录路径, 若目录不存在, 则会创建改目录 3. COPY : 源路径 ... 目标路径, COPY 指令将 Dockerfile 文件所存在的上下文目录 复制 到目标路径位置 4. RUN : 执行命令 5. EXPOSE : 声明 运行时容器 提供服务端口, 仅仅是一个 声明 , 不会因为这个声明而开启这个端口 6. ENTRYPOINT : 指定 容器 启动程序的及参数(执行 ./go-gin-example)","text_tokens":["命令","参数","上下","不","https","\"","服务","程序","有","启动","目录",".","存在","运行","源","golang","声明","/","会","cn","gopath","基础","2","时","提供","latest","6","go","3","env","5","且","下文","第一条","expose",":","及","开启","workdir","from","第一","执行","复制","改","所","]","到","...","必须",")","direct","要","若","run","是","将","8000","端口","执行命令","指令","不会","这个","而","gin","src","(","上下文","工作","容器","一条","的","1","仅仅","goproxy","该","位置","路径","一个","[","得","为","创建","4"," ","因为","$","文件",",","example","-","copy","dockerfile","entrypoint","build","镜像","指定","则","目标"],"title":"编写Dockerfile","title_tokens":["编写","dockerfile"]},{"location":"Golang/Project/09 Docker/#_1","text":"docker build -t gin-blog-docker . docker images docker run -p 8000:8000 gin-blog-docker 1. 在 . 当前环境运行 docker build 创建/构建镜像, -t 指定名称 2. docker images 查看镜像是否创建成功 3. 在本地8000端口运行容器 4. 发现 dial tcp 127.0.0.1:3306: connect: connection refused 错误","text_tokens":["gin","创建","4"," ","构建","3","0.1","成功","refused","docker","查看","发现","blog",":","名称","connection","t",",","-","容器","tcp","1",".","运行","images","错误","本地","当前","/","build","connect","run","在","2","镜像","8000","环境","dial","指定","端口","p","是否","3306","127.0"],"title":"运行","title_tokens":["运行"]},{"location":"Golang/Project/09 Docker/#mysql-docker","text":"docker pull mysql docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql 1. 拉取mysql镜像 2. 配置mysql端口","text_tokens":["拉取","password"," ","docker","e",":","mysql","root","-","d","1","=",".","name","_","配置","pull","run","2","镜像","端口","p","3306"],"title":"配置Mysql Docker","title_tokens":["docker","mysql"," ","配置"]},{"location":"Golang/Project/09 Docker/#confini","text":"[database] TYPE = mysql USER = root PASSWORD = rootroot HOST = mysql:3306 NAME = blog TABLE_PREFIX = blog_","text_tokens":["[","password","table"," ","host","prefix","blog",":","database","mysql","root","rootroot","]","=","user","name","_","type","3306"],"title":"修改配置文件conf.ini","title_tokens":["配置文件",".","conf","文件","修改","ini","配置"]},{"location":"Golang/Project/09 Docker/#golangmysql","text":"docker run --link mysql:mysql -p 8000:8000 gin-blog-docker","text_tokens":["run",":","gin"," ","8000","mysql","p","link","docker","-","blog"],"title":"关联Golang容器和Mysql容器","title_tokens":["和","关联","mysql","golang","容器"]},{"location":"Golang/Project/09 Docker/#_2","text":"","text_tokens":[],"title":"效果","title_tokens":["效果"]},{"location":"Golang/Project/10 GORM-Callback/","text":"go-gin-example 10： GORM-Callback 定制GORM Callbacks GORM Callback 是什么 You could define callback methods to pointer of model struct, it will be called when creating, updating, querying, deleting, if any callback returns an error, gorm will stop future operations and rollback all changes. 可以给模型结构体指针定义回调函数, 它将会在被创建/更新/查询/删除的时候调用, 如果回调返回了错误, gorm会停止未来行为操作并且回退所有改变. 之前程序未实现 Callback 方法, 需要为所有文件单独写一次 BeforeCreate 、 BeforeUpdate 方法 使用 gorm支持的callback方法 创建：BeforeSave、BeforeCreate、AfterCreate、AfterSave 更新：BeforeSave、BeforeUpdate、AfterUpdate、AfterSave 删除：BeforeDelete、AfterDelete 查询：AfterFind 定义callback 在 model.go 文件中定义 // updateTimeStampForCreateCallback will set `CreatedOn`, `ModifiedOn` when creating func updateTimeStampForCreateCallback ( scope * gorm . Scope ) { if ! scope . HasError () { nowTime := time . Now (). Unix () if createTimeField , ok := scope . FieldByName ( \"CreatedOn\" ); ok { if createTimeField . IsBlank { createTimeField . Set ( nowTime ) } } if modifyTimeField , ok := scope . FieldByName ( \"ModifiedOn\" ); ok { if modifyTimeField . IsBlank { modifyTimeField . Set ( nowTime ) } } } } // updateTimeStampForUpdateCallback will set `ModifyTime` when updating func updateTimeStampForUpdateCallback ( scope * gorm . Scope ) { if _ , ok := scope . Get ( \"gorm:update_column\" ); ! ok { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) } } 通过 scope.FieldByName(name) 判断是否存在相关字段, 该方法通过 scope.Fields() 获取所有字段 通过 .IsBlank 判断值是否为空 通过 .Set(interface{}) 设置相关值 通过 scope.Get() 获取参数的参数值, 案例中回去查找 gorm:update_column 这个字段的属性 通过 scope.SetColumn(Field, value) 设定字段的值 调用callback 在 model.go 的 ini 函数中注册callback db . Callback (). Create (). Replace ( \"gorm:update_time_stamp\" , updateTimeStampForCreateCallback ) db . Callback (). Update (). Replace ( \"gorm:update_time_stamp\" , updateTimeStampForUpdateCallback ) 效果 当程序写了 Callback 方法的时候, 当GORM执行到相关的操作会自动触发相应的 Callback 方法 拓展 软删除, 添加删除时间, 为 model.go 的 Model 结构体添加 DeletedOn 字段 type Model struct { ID int `gorm:\"primary_key\" json:\"id\"` CreatedOn int `json:\"created_on\"` ModifiedOn int `json:\"modified_on\"` DeletedOn int `json:\"deleted_on\"` } func deleteCallback ( scope * gorm . Scope ) { if ! scope . HasError () { var extraOption string if str , ok := scope . Get ( \"gorm:delete_option\" ); ok { extraOption = fmt . Sprint ( str ) } deletedOnField , hasDeletedOnField := scope . FieldByName ( \"DeletedOn\" ) if ! scope . Search . Unscoped && hasDeletedOnField { scope . Raw ( fmt . Sprintf ( \"UPDATE %v SET %v=%v%v%v\" , scope . QuotedTableName (), scope . Quote ( deletedOnField . DBName ), scope . AddToVars ( time . Now (). Unix ()), addExtraSpaceIfExist ( scope . CombinedConditionSql ()), addExtraSpaceIfExist ( extraOption ), )). Exec () } else { scope . Raw ( fmt . Sprintf ( \"DELETE FROM %v%v%v\" , scope . QuotedTableName (), addExtraSpaceIfExist ( scope . CombinedConditionSql ()), addExtraSpaceIfExist ( extraOption ), )). Exec () } } } func addExtraSpaceIfExist ( str string ) string { if str != \"\" { return \" \" + str } return \"\" } 在 model.go 的 ini函数 中添加 db.Callback().Delete().Replace(\"gorm:delete\", deleteCallback) 1. scope.QuotedTableName() 返回引用的表名 2. scope.Raw() 构建原生sql 3. fmt.Sprintf() 格式化并且返回格式化后的字符串数据 4. scope.AddToVars(value) 为字段添加参数 5. scope.Quote() 转义 6. scope 当你在数据库中文完成任何操作, scope包含了当前操作信息 // Scope contain current operation's information when you perform any operation on the database type Scope struct { Search * search Value interface {} SQL string SQLVars [] interface {} db * DB instanceID string primaryKeyField * Field skipLeft bool fields * [] * Field selectAttrs * [] string } REF: official: callback in gorm","text_tokens":["什么","extraoption","参数","else","callbacks","returns","createtimefield","设定","selectattrs","可以","回去","beforesave","fieldbyname","格式","了","结构","\"","skipleft","中","需要",";","程序","database","判断","quote","函数","查询","段","支持","设置","相应","exec","数据库","in","为空","afterupdate","func","gorm","引用","任何","deletecallback","删除",".","存在","name","be","sql","if","deleting","ok","modifytimefield","当前","/","you","会","你","methods","单独","原生","完成","2","to","id","据库","更新","modifiedon","fields","model","属性","指针","updatetimestampforcreatecallback","!","stamp","6","+","体","ref","addtovars","go","方法","column","构建","3","5","hasdeletedonfield","creating","changes","deleted","var","未",":","primary","信息","scope","querying","option","delete","aftercreate","beforecreate","通过","执行","from","modifytime","combinedconditionsql","后","并且","the","操作","information","到","]",")","实现","value","=","db","all","`","fmt","perform","参数值","quotedtablename","pointer","它","int","an","获取","效果","error","时候","operations","是","当","字符串","it","将","createdon","on","deletedonfield","return","nowtime","字符","dbname","sqlvars","json","updating","sprint","包含","写","这个","gin","deletedon","返回","}","拓展","and","sprintf","aftersave","key","注册","(","数据","v","addextraspaceifexist","contain","数值","回退","s","使用","一次","之前","相关","time","unscoped","{","unix","now","案例","查找","future","isblank","modified","的","will","：","1","格式化","instanceid","rollback","of","&&","_","该","添加","被","string","自动","定制","、","afterdelete","ini","raw","在","get","created","*","回调","afterfind","如果","operation","beforeupdate","停止","haserror","setcolumn","field","[","called","触发","调用","为","创建","4"," ","表名","update","beforedelete","set","字","interface","字段","软","str","current","when","v%","值","any","定义","改变","callback","文件","search","%","转义","行为","10","未来","给",",","example","-","create","could","'","official","struct","中文","模型","bool","错误","primarykeyfield","type","所有","时间","stop","是否","updatetimestampforupdatecallback","define","replace"],"title":"go-gin-example 10： GORM-Callback","title_tokens":["：","gin","go"," ","callback","10","example","-","gorm"]},{"location":"Golang/Project/10 GORM-Callback/#go-gin-example-10-gorm-callback","text":"","text_tokens":[],"title":"go-gin-example 10： GORM-Callback","title_tokens":["：","gin","go"," ","callback","10","example","-","gorm"]},{"location":"Golang/Project/10 GORM-Callback/#gorm-callbacks","text":"","text_tokens":[],"title":"定制GORM Callbacks","title_tokens":[" ","callbacks","gorm","定制"]},{"location":"Golang/Project/10 GORM-Callback/#gorm-callback","text":"You could define callback methods to pointer of model struct, it will be called when creating, updating, querying, deleting, if any callback returns an error, gorm will stop future operations and rollback all changes. 可以给模型结构体指针定义回调函数, 它将会在被创建/更新/查询/删除的时候调用, 如果回调返回了错误, gorm会停止未来行为操作并且回退所有改变. 之前程序未实现 Callback 方法, 需要为所有文件单独写一次 BeforeCreate 、 BeforeUpdate 方法","text_tokens":["returns","可以","了","结构","需要","程序","函数","查询","gorm","删除",".","be","if","deleting","/","you","会","methods","单独","to","更新","model","指针","体","方法","creating","changes","未","querying","beforecreate","并且","操作","实现","all","pointer","它","an","error","时候","operations","it","将","updating","写","返回","and","回退","一次","之前","future","的","will","rollback","of","被","、","在","回调","如果","beforeupdate","停止","called","调用","为","创建"," ","when","any","定义","改变","callback","文件","行为","未来","给",",","could","struct","模型","错误","所有","stop","define"],"title":"GORM Callback 是什么","title_tokens":["什么","是","callback"," ","gorm"]},{"location":"Golang/Project/10 GORM-Callback/#_1","text":"","text_tokens":[],"title":"使用","title_tokens":["使用"]},{"location":"Golang/Project/10 GORM-Callback/#gormcallback","text":"创建：BeforeSave、BeforeCreate、AfterCreate、AfterSave 更新：BeforeSave、BeforeUpdate、AfterUpdate、AfterSave 删除：BeforeDelete、AfterDelete 查询：AfterFind","text_tokens":["：","删除","创建","查询"," ","更新","afterfind","aftercreate","beforecreate","beforedelete","beforesave","aftersave","afterupdate","、","beforeupdate","afterdelete"],"title":"gorm支持的callback方法","title_tokens":["的","方法","callback","支持","gorm"]},{"location":"Golang/Project/10 GORM-Callback/#callback","text":"在 model.go 文件中定义 // updateTimeStampForCreateCallback will set `CreatedOn`, `ModifiedOn` when creating func updateTimeStampForCreateCallback ( scope * gorm . Scope ) { if ! scope . HasError () { nowTime := time . Now (). Unix () if createTimeField , ok := scope . FieldByName ( \"CreatedOn\" ); ok { if createTimeField . IsBlank { createTimeField . Set ( nowTime ) } } if modifyTimeField , ok := scope . FieldByName ( \"ModifiedOn\" ); ok { if modifyTimeField . IsBlank { modifyTimeField . Set ( nowTime ) } } } } // updateTimeStampForUpdateCallback will set `ModifyTime` when updating func updateTimeStampForUpdateCallback ( scope * gorm . Scope ) { if _ , ok := scope . Get ( \"gorm:update_column\" ); ! ok { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) } } 通过 scope.FieldByName(name) 判断是否存在相关字段, 该方法通过 scope.Fields() 获取所有字段 通过 .IsBlank 判断值是否为空 通过 .Set(interface{}) 设置相关值 通过 scope.Get() 获取参数的参数值, 案例中回去查找 gorm:update_column 这个字段的属性 通过 scope.SetColumn(Field, value) 设定字段的值","text_tokens":["参数","createtimefield","设定","回去","fieldbyname","\"","中",";","判断","段","设置","为空","func","gorm",".","存在","name","if","ok","modifytimefield","/","modifiedon","fields","model","属性","updatetimestampforcreatecallback","!","go","column","方法","creating",":","scope","通过","modifytime",")","value","=","`","参数值","获取","createdon","nowtime","updating","这个","}","(","数值","相关","time","{","unix","now","案例","查找","isblank","的","will","_","该","在","get","*","haserror","setcolumn","field"," ","update","set","字","interface","字段","when","值","定义","文件",",","所有","是否","updatetimestampforupdatecallback"],"title":"定义callback","title_tokens":["callback","定义"]},{"location":"Golang/Project/10 GORM-Callback/#callback_1","text":"在 model.go 的 ini 函数中注册callback db . Callback (). Create (). Replace ( \"gorm:update_time_stamp\" , updateTimeStampForCreateCallback ) db . Callback (). Update (). Replace ( \"gorm:update_time_stamp\" , updateTimeStampForUpdateCallback )","text_tokens":["go"," ","update","\"","注册","中","(",":","函数","callback","time",",","gorm","create","的",")",".","db","_","ini","在","model","updatetimestampforcreatecallback","stamp","updatetimestampforupdatecallback","replace"],"title":"调用callback","title_tokens":["callback","调用"]},{"location":"Golang/Project/10 GORM-Callback/#_2","text":"当程序写了 Callback 方法的时候, 当GORM执行到相关的操作会自动触发相应的 Callback 方法","text_tokens":["写","触发","方法"," ","了","程序","callback","相应","相关","执行",",","操作","到","gorm","的","自动","会","时候","当"],"title":"效果","title_tokens":["效果"]},{"location":"Golang/Project/10 GORM-Callback/#_3","text":"软删除, 添加删除时间, 为 model.go 的 Model 结构体添加 DeletedOn 字段 type Model struct { ID int `gorm:\"primary_key\" json:\"id\"` CreatedOn int `json:\"created_on\"` ModifiedOn int `json:\"modified_on\"` DeletedOn int `json:\"deleted_on\"` } func deleteCallback ( scope * gorm . Scope ) { if ! scope . HasError () { var extraOption string if str , ok := scope . Get ( \"gorm:delete_option\" ); ok { extraOption = fmt . Sprint ( str ) } deletedOnField , hasDeletedOnField := scope . FieldByName ( \"DeletedOn\" ) if ! scope . Search . Unscoped && hasDeletedOnField { scope . Raw ( fmt . Sprintf ( \"UPDATE %v SET %v=%v%v%v\" , scope . QuotedTableName (), scope . Quote ( deletedOnField . DBName ), scope . AddToVars ( time . Now (). Unix ()), addExtraSpaceIfExist ( scope . CombinedConditionSql ()), addExtraSpaceIfExist ( extraOption ), )). Exec () } else { scope . Raw ( fmt . Sprintf ( \"DELETE FROM %v%v%v\" , scope . QuotedTableName (), addExtraSpaceIfExist ( scope . CombinedConditionSql ()), addExtraSpaceIfExist ( extraOption ), )). Exec () } } } func addExtraSpaceIfExist ( str string ) string { if str != \"\" { return \" \" + str } return \"\" } 在 model.go 的 ini函数 中添加 db.Callback().Delete().Replace(\"gorm:delete\", deleteCallback) 1. scope.QuotedTableName() 返回引用的表名 2. scope.Raw() 构建原生sql 3. fmt.Sprintf() 格式化并且返回格式化后的字符串数据 4. scope.AddToVars(value) 为字段添加参数 5. scope.Quote() 转义 6. scope 当你在数据库中文完成任何操作, scope包含了当前操作信息 // Scope contain current operation's information when you perform any operation on the database type Scope struct { Search * search Value interface {} SQL string SQLVars [] interface {} db * DB instanceID string primaryKeyField * Field skipLeft bool fields * [] * Field selectAttrs * [] string }","text_tokens":["extraoption","参数","else","selectattrs","fieldbyname","格式","了","结构","\"","skipleft",";","中","database","quote","段","exec","函数","数据库","func","gorm","引用","任何","deletecallback","删除",".","sql","if","ok","当前","/","you","你","原生","完成","2","id","据库","modifiedon","fields","model","!","6","+","体","addtovars","go","构建","3","5","hasdeletedonfield","var","deleted",":","primary","信息","scope","option","delete","from","后","combinedconditionsql","the","并且","操作","information","]",")","value","=","db","`","perform","fmt","quotedtablename","int","当","字符串","createdon","on","deletedonfield","return","字符","dbname","sqlvars","json","sprint","包含","deletedon","返回","}","sprintf","key","(","数据","v","addextraspaceifexist","contain","s","unscoped","time","{","unix","now","格式化","modified","的","1","instanceid","&&","_","添加","string","raw","ini","在","get","created","*","operation","haserror","field","[","为","4"," ","表名","update","字","set","interface","软","str","current","when","v%","any","search","callback","转义","%",",","'","struct","中文","bool","primarykeyfield","type","时间","replace"],"title":"拓展","title_tokens":["拓展"]},{"location":"Golang/Project/10 GORM-Callback/#ref","text":"official: callback in gorm","text_tokens":["official",":","callback"," ","in","gorm"],"title":"REF:","title_tokens":["ref",":"]},{"location":"Golang/Project/FlowChart/","text":"流程图 请求流程图 URL 请求打到 gin ，由 gin 分发各个请求到相应的接口 接口对应 GET ， POST ， PUT ， DELETE 等多种请求方式 接口接收 URL 中的参数，构造相应的CRUD查询，查询数据库 将数据库返回的数据返回到前端调用者 JWT产生以及认证 生成JWT JWT认证","text_tokens":["gin","参数","调用","流程"," ","返回","对应","打","post","中","以及","数据","流程图","各个","url","分发","查询","数据库","相应","delete","查询数据库","多种","构造","请求","jwt","到","的","生成","等","put","调用者","，","产生","认证","get","前端","crud","将","据库","用者","接口","方式","接收","由"],"title":"流程图","title_tokens":["流程图","流程"]},{"location":"Golang/Project/FlowChart/#_1","text":"","text_tokens":[],"title":"流程图","title_tokens":["流程图","流程"]},{"location":"Golang/Project/FlowChart/#_2","text":"URL 请求打到 gin ，由 gin 分发各个请求到相应的接口 接口对应 GET ， POST ， PUT ， DELETE 等多种请求方式 接口接收 URL 中的参数，构造相应的CRUD查询，查询数据库 将数据库返回的数据返回到前端调用者","text_tokens":["gin","参数","调用"," ","返回","对应","打","post","中","数据","各个","url","分发","查询","数据库","相应","delete","查询数据库","多种","构造","请求","到","的","等","put","调用者","，","get","前端","crud","将","据库","用者","接口","方式","接收","由"],"title":"请求流程图","title_tokens":["流程图","流程","请求"]},{"location":"Golang/Project/FlowChart/#jwt","text":"生成JWT JWT认证","text_tokens":["jwt","生成","认证"," "],"title":"JWT产生以及认证","title_tokens":["jwt","以及","产生","认证"]},{"location":"Golang/Project/InterfaceTestInstance/","text":"接口测试实例","text_tokens":["实例","接口","测试"],"title":"接口测试实例","title_tokens":["实例","接口","测试"]},{"location":"Golang/Project/InterfaceTestInstance/#_1","text":"","text_tokens":[],"title":"接口测试实例","title_tokens":["实例","接口","测试"]},{"location":"Linux/changeSources/","text":"Linux02: 更改Ubuntu源 备份源文件 添加源 更新 sudo cp /etc/apt/sources.list /etc/apt/sources_init.list sudo gedit /etc/apt/sources.list apt-get update","text_tokens":["apt"," ","update",":","备份","文件","list","gedit","-","linux02","源文件","init","sources",".","_","添加","源","ubuntu","/","get","更改","etc","更新","sudo","cp"],"title":"Linux02: 更改Ubuntu源","title_tokens":[":","更改"," ","源","ubuntu","linux02"]},{"location":"Linux/changeSources/#linux02-ubuntu","text":"备份源文件 添加源 更新 sudo cp /etc/apt/sources.list /etc/apt/sources_init.list sudo gedit /etc/apt/sources.list apt-get update","text_tokens":["apt"," ","update","备份","文件","list","gedit","-","源文件","init","sources",".","_","添加","源","/","get","etc","更新","sudo","cp"],"title":"Linux02: 更改Ubuntu源","title_tokens":[":","更改"," ","源","ubuntu","linux02"]},{"location":"Linux/formattingUdisk/","text":"Linux01: 彻底格式化U盘 在 cmd 下输入 diskpart 在弹出的窗口输出 list disk 选择目标磁盘 select disk 1 清除 clean","text_tokens":["输入","select"," ","输出","格式","u盘","cmd",":","弹出","list","目标","清除","linux01","格式化","的","1","clean","窗口","选择","在","diskpart","下","彻底","磁盘","disk"],"title":"Linux01: 彻底格式化U盘","title_tokens":[":"," ","彻底","格式","linux01","u盘","格式化"]},{"location":"Linux/formattingUdisk/#linux01-u","text":"在 cmd 下输入 diskpart 在弹出的窗口输出 list disk 选择目标磁盘 select disk 1 清除 clean","text_tokens":["输入","select"," ","输出","cmd","弹出","list","清除","的","1","clean","窗口","选择","在","diskpart","下","disk","磁盘","目标"],"title":"Linux01: 彻底格式化U盘","title_tokens":[":"," ","彻底","格式","linux01","u盘","格式化"]}]}