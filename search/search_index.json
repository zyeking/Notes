{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Mysite","title":"index"},{"location":"#welcome-to-mysite","text":"","title":"Welcome to Mysite"},{"location":"Docker/01 ChangeImageSource/","text":"Docker 01\uff1a\u4fee\u6539\u955c\u50cf\u6e90 \u5728 settings -> Daemon -> Advanced \u5728 registry-mirrors \u62ec\u53f7\u5185\u6dfb\u52a0 \"https://registry.docker-cn.com\" docker info \u67e5\u8be2 registry-mirrors","title":"Docker 01\uff1a\u4fee\u6539\u955c\u50cf\u6e90"},{"location":"Docker/01 ChangeImageSource/#docker-01","text":"\u5728 settings -> Daemon -> Advanced \u5728 registry-mirrors \u62ec\u53f7\u5185\u6dfb\u52a0 \"https://registry.docker-cn.com\" docker info \u67e5\u8be2 registry-mirrors","title":"Docker 01\uff1a\u4fee\u6539\u955c\u50cf\u6e90"},{"location":"Docker/02 EntryPointAndCMD/","text":"Docker 02\uff1aDockerfile\u4e2d\u7684ENTRYPOINT\u3001RUN\u4e0eCMD CMD\u4e0eENRTYPOINT RUN CMD \u6bcf\u4e2a Dockerfile \u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a CMD , \u5982\u679c\u6709\u591a\u4e2a\u90a3\u4e48\u53ea\u4f1a\u6267\u884c\u6700\u540e\u4e00\u4e2a. CMD \u76f8\u5f53\u4e8e\u542f\u52a8 docker \u65f6\u5019\u540e\u9762\u6dfb\u52a0\u7684\u53c2\u6570: docker run -itd --name aaa docker_image /bin/bash -c. \u955c\u50cf\u540d\u79f0\u540e\u9762\u8ddf\u4e86 /bin/bash -c \u7b49\u4ef7\u4e8e\u5728dockerfile\u4e2d\u7684 CMD [\"/bin/bash\", \"-c\"] \u82e5\u6267\u884c\u7684\u65f6\u5019\u6dfb\u52a0\u4e86\u53c2\u6570,\u9ed8\u8ba4\u7684 CMD \u4e2d\u7684\u53c2\u6570\u5219\u65e0\u6548 ENTRYPOINT \u7c7b\u4f3c CMD , \u6bcf\u4e2a Dockerfile \u53ea\u80fd\u6709\u4e00\u4e2a ENTRYPOINT , \u5982\u679c\u5b58\u5728\u591a\u4e2a\u53ea\u6267\u884c\u6700\u540e\u4e00\u4e2a. \u5fc5\u5b9a\u6267\u884c, \u4e0d\u4f1a\u52a8\u6001\u6539\u53d8 \u4e66\u5199\u683c\u5f0f Shell\u683c\u5f0f\uff1a , \u4f8b\u5982: apt-get install python3 Exec [\"executable\", \"param1\", \"param2\", ...], \u4f8b\u5982: [\"apt-get\", \"install\", \"python3\"] CMD\u547d\u4ee4 CMD echo \"hello world\" 1. \u8fd0\u884c docker run -it [image] , \u8f93\u51fahello world 2. \u8fd0\u884c docker run -it [image]/bin/bash , CMD \u547d\u4ee4\u4f1a\u88ab\u5ffd\u7565, \u547d\u4ee4 bash \u4f1a\u88ab\u6267\u884c ENTRYPOINT ENTRYPOINT [\"/bin/echo\", \"Hello\"] 1. \u8fd0\u884c docker run -it [image] , \u8f93\u51faHello 2. \u8fd0\u884c docker run -it [image] kk , \u8f93\u51faHello kk, \u539f\u672c\u7684Hello\u4ecd\u7136\u4f1a\u8f93\u51fa \u4fee\u6539 Dockerfile \u4e3a ENTRYPOINT [\"/bin/echo\", \"Hello\"] CMD [\"world\"] 1. \u8fd0\u884c docker run -it [name] , \u8f93\u51faHello world 2. \u8fd0\u884c docker run -it [name] king , \u8f93\u51faHello king, CMD \u53c2\u6570\u88ab\u52a8\u6001\u66ff\u6362. RUN\u547d\u4ee4 RUN apt-get update && apt-get install -y \\ bzr \\ cvs \\ git \\ mercurial \\ subversion 1. apt-get update \u548c apt-get install \u653e\u5728\u540c\u4e00\u4e2a RUN \u6307\u4ee4\u6267\u884c\u53ef\u4ee5==\u4fdd\u8bc1\u6bcf\u6b21\u5b89\u88c5\u7684\u90fd\u662f\u6700\u65b0\u7684\u5305==; \u5982\u679c\u5c06 apt-get install \u653e\u5728\u5355\u72ec\u7684\u7684 RUN \u4e2d\u6267\u884c, \u5219\u4f1a\u4f7f\u7528 apt-get update \u521b\u5efa\u7684\u955c\u50cf\u5c42, \u8fd9\u5c42\u955c\u50cf\u53ef\u80fd\u662f\u5f88\u4e45\u4ee5\u524d\u7f13\u5b58\u7684. \u603b\u7ed3 CMD \u8bbe\u7f6e\u5bb9\u5668\u542f\u52a8\u540e==\u9ed8\u8ba4\u6267\u884c\u7684\u547d\u4ee4\u4ee5\u53ca\u53c2\u6570==, \u8bbe\u7f6e\u7684\u6307\u4ee4\u53ef\u4ee5\u88ab docker run \u547d\u4ee4\u540e\u9762\u7684\u547d\u4ee4\u51fd\u53c2\u6570==\u52a8\u6001\u66ff\u6362== ENTRYPOINT \u914d\u7f6e\u5bb9\u5668\u542f\u52a8\u65f6\u7684\u6267\u884c\u547d\u4ee4, \u4e0d\u4f1a\u88ab\u5ffd\u7565, \u4e00\u5b9a\u4f1a\u88ab\u6267\u884c , \u5373\u4f7f\u8fd0\u884c\u4e86 docker run \u65f6\u6307\u5b9a\u4e86\u5176\u4ed6\u547d\u4ee4 \u4f7f\u7528 RUN \u6307\u4ee4\u5b89\u88c5\u5e94\u7528\u548c\u8f6f\u4ef6\u5305\uff0c\u6784\u5efa\u955c\u50cf\u3002 \u5982\u679c Docker \u955c\u50cf\u7684\u7528\u9014\u662f\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u6216\u670d\u52a1, \u6bd4\u5982\u8fd0\u884c\u4e00\u4e2a MySQL, \u5e94\u8be5\u4f18\u5148\u4f7f\u7528 Exec \u683c\u5f0f\u7684 ENTRYPOINT \u6307\u4ee4. CMD \u53ef\u4e3a ENTRYPOINT \u63d0\u4f9b\u989d\u5916\u7684\u9ed8\u8ba4\u53c2\u6570, \u540c\u65f6\u53ef\u5229\u7528 docker run \u547d\u4ee4\u884c\u66ff\u6362\u9ed8\u8ba4\u53c2\u6570. \u5982\u679c\u60f3\u4e3a\u5bb9\u5668\u8bbe\u7f6e\u9ed8\u8ba4\u7684\u542f\u52a8\u547d\u4ee4,\u53ef\u4f7f\u7528 CMD \u6307\u4ee4.\u7528\u6237\u53ef\u5728 docker run \u547d\u4ee4\u884c\u4e2d\u66ff\u6362\u6b64\u9ed8\u8ba4\u547d\u4ee4. REF: Dockerfile RUN\uff0cCMD\uff0cENTRYPOINT\u547d\u4ee4\u533a\u522b Dockerfile\u4e2dENTRYPOINT \u548c CMD\u7684\u533a\u522b","title":"Docker 02\uff1aDockerfile\u4e2d\u7684ENTRYPOINT\u3001RUN\u4e0eCMD"},{"location":"Docker/02 EntryPointAndCMD/#docker-02dockerfileentrypointruncmd","text":"","title":"Docker 02\uff1aDockerfile\u4e2d\u7684ENTRYPOINT\u3001RUN\u4e0eCMD"},{"location":"Docker/02 EntryPointAndCMD/#cmdenrtypoint","text":"RUN CMD \u6bcf\u4e2a Dockerfile \u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a CMD , \u5982\u679c\u6709\u591a\u4e2a\u90a3\u4e48\u53ea\u4f1a\u6267\u884c\u6700\u540e\u4e00\u4e2a. CMD \u76f8\u5f53\u4e8e\u542f\u52a8 docker \u65f6\u5019\u540e\u9762\u6dfb\u52a0\u7684\u53c2\u6570: docker run -itd --name aaa docker_image /bin/bash -c. \u955c\u50cf\u540d\u79f0\u540e\u9762\u8ddf\u4e86 /bin/bash -c \u7b49\u4ef7\u4e8e\u5728dockerfile\u4e2d\u7684 CMD [\"/bin/bash\", \"-c\"] \u82e5\u6267\u884c\u7684\u65f6\u5019\u6dfb\u52a0\u4e86\u53c2\u6570,\u9ed8\u8ba4\u7684 CMD \u4e2d\u7684\u53c2\u6570\u5219\u65e0\u6548 ENTRYPOINT \u7c7b\u4f3c CMD , \u6bcf\u4e2a Dockerfile \u53ea\u80fd\u6709\u4e00\u4e2a ENTRYPOINT , \u5982\u679c\u5b58\u5728\u591a\u4e2a\u53ea\u6267\u884c\u6700\u540e\u4e00\u4e2a. \u5fc5\u5b9a\u6267\u884c, \u4e0d\u4f1a\u52a8\u6001\u6539\u53d8","title":"CMD\u4e0eENRTYPOINT"},{"location":"Docker/02 EntryPointAndCMD/#_1","text":"Shell\u683c\u5f0f\uff1a , \u4f8b\u5982: apt-get install python3 Exec [\"executable\", \"param1\", \"param2\", ...], \u4f8b\u5982: [\"apt-get\", \"install\", \"python3\"]","title":"\u4e66\u5199\u683c\u5f0f"},{"location":"Docker/02 EntryPointAndCMD/#cmd","text":"CMD echo \"hello world\" 1. \u8fd0\u884c docker run -it [image] , \u8f93\u51fahello world 2. \u8fd0\u884c docker run -it [image]/bin/bash , CMD \u547d\u4ee4\u4f1a\u88ab\u5ffd\u7565, \u547d\u4ee4 bash \u4f1a\u88ab\u6267\u884c","title":"CMD\u547d\u4ee4"},{"location":"Docker/02 EntryPointAndCMD/#entrypoint","text":"ENTRYPOINT [\"/bin/echo\", \"Hello\"] 1. \u8fd0\u884c docker run -it [image] , \u8f93\u51faHello 2. \u8fd0\u884c docker run -it [image] kk , \u8f93\u51faHello kk, \u539f\u672c\u7684Hello\u4ecd\u7136\u4f1a\u8f93\u51fa \u4fee\u6539 Dockerfile \u4e3a ENTRYPOINT [\"/bin/echo\", \"Hello\"] CMD [\"world\"] 1. \u8fd0\u884c docker run -it [name] , \u8f93\u51faHello world 2. \u8fd0\u884c docker run -it [name] king , \u8f93\u51faHello king, CMD \u53c2\u6570\u88ab\u52a8\u6001\u66ff\u6362.","title":"ENTRYPOINT"},{"location":"Docker/02 EntryPointAndCMD/#run","text":"RUN apt-get update && apt-get install -y \\ bzr \\ cvs \\ git \\ mercurial \\ subversion 1. apt-get update \u548c apt-get install \u653e\u5728\u540c\u4e00\u4e2a RUN \u6307\u4ee4\u6267\u884c\u53ef\u4ee5==\u4fdd\u8bc1\u6bcf\u6b21\u5b89\u88c5\u7684\u90fd\u662f\u6700\u65b0\u7684\u5305==; \u5982\u679c\u5c06 apt-get install \u653e\u5728\u5355\u72ec\u7684\u7684 RUN \u4e2d\u6267\u884c, \u5219\u4f1a\u4f7f\u7528 apt-get update \u521b\u5efa\u7684\u955c\u50cf\u5c42, \u8fd9\u5c42\u955c\u50cf\u53ef\u80fd\u662f\u5f88\u4e45\u4ee5\u524d\u7f13\u5b58\u7684.","title":"RUN\u547d\u4ee4"},{"location":"Docker/02 EntryPointAndCMD/#_2","text":"CMD \u8bbe\u7f6e\u5bb9\u5668\u542f\u52a8\u540e==\u9ed8\u8ba4\u6267\u884c\u7684\u547d\u4ee4\u4ee5\u53ca\u53c2\u6570==, \u8bbe\u7f6e\u7684\u6307\u4ee4\u53ef\u4ee5\u88ab docker run \u547d\u4ee4\u540e\u9762\u7684\u547d\u4ee4\u51fd\u53c2\u6570==\u52a8\u6001\u66ff\u6362== ENTRYPOINT \u914d\u7f6e\u5bb9\u5668\u542f\u52a8\u65f6\u7684\u6267\u884c\u547d\u4ee4, \u4e0d\u4f1a\u88ab\u5ffd\u7565, \u4e00\u5b9a\u4f1a\u88ab\u6267\u884c , \u5373\u4f7f\u8fd0\u884c\u4e86 docker run \u65f6\u6307\u5b9a\u4e86\u5176\u4ed6\u547d\u4ee4 \u4f7f\u7528 RUN \u6307\u4ee4\u5b89\u88c5\u5e94\u7528\u548c\u8f6f\u4ef6\u5305\uff0c\u6784\u5efa\u955c\u50cf\u3002 \u5982\u679c Docker \u955c\u50cf\u7684\u7528\u9014\u662f\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u6216\u670d\u52a1, \u6bd4\u5982\u8fd0\u884c\u4e00\u4e2a MySQL, \u5e94\u8be5\u4f18\u5148\u4f7f\u7528 Exec \u683c\u5f0f\u7684 ENTRYPOINT \u6307\u4ee4. CMD \u53ef\u4e3a ENTRYPOINT \u63d0\u4f9b\u989d\u5916\u7684\u9ed8\u8ba4\u53c2\u6570, \u540c\u65f6\u53ef\u5229\u7528 docker run \u547d\u4ee4\u884c\u66ff\u6362\u9ed8\u8ba4\u53c2\u6570. \u5982\u679c\u60f3\u4e3a\u5bb9\u5668\u8bbe\u7f6e\u9ed8\u8ba4\u7684\u542f\u52a8\u547d\u4ee4,\u53ef\u4f7f\u7528 CMD \u6307\u4ee4.\u7528\u6237\u53ef\u5728 docker run \u547d\u4ee4\u884c\u4e2d\u66ff\u6362\u6b64\u9ed8\u8ba4\u547d\u4ee4.","title":"\u603b\u7ed3"},{"location":"Docker/02 EntryPointAndCMD/#ref","text":"Dockerfile RUN\uff0cCMD\uff0cENTRYPOINT\u547d\u4ee4\u533a\u522b Dockerfile\u4e2dENTRYPOINT \u548c CMD\u7684\u533a\u522b","title":"REF:"},{"location":"Golang/Basic/01 Channel/","text":"channel what is channel channel\u662fgoroutine\u548cgoroutine\u4e4b\u95f4\u65e0\u9501\u4ea4\u6d41\u7684\u3010\u5a92\u4ecb\u3011\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0cchannel\u662f\u4e00\u79cd\u5141\u8bb8\u4e00\u4e2agoroutine\u53d1\u9001\u6570\u636e\u7ed9\u53e6\u5916\u4e00\u4e2agoroutine\u7684\u6280\u672f\uff0c\u9ed8\u8ba4\u7684channel\u662f\u53cc\u5411\u7684\uff0c\u610f\u5473\u7740goroutines\u53ef\u4ee5\u901a\u8fc7\u540c\u4e00\u4e2achannel\u53d1\u3001\u6536\u6570\u636e\u3002 how syntax var Channel_name chan Type channel_name := make(chan Type) \u5728golang\u4e2d, \u6211\u4eec\u7528\u5173\u952e\u5b57 Channel_name chan Type \u521b\u5efa\u67d0\u79cd\u7c7b\u578b\u7684channel\uff0c\u5176\u4e2dchannel\u4ec5\u4ec5\u53ef\u4ee5\u4f20\u9012\u540c\u79cd\u7c7b\u578b\u7684\u6570\u636e\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u4e0d\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u7c7b\u578b\u7684channel\u4f20\u9012\u3002 Send and Receive Data From a Channel \u5728golang\u4e2d\uff0cchannel\u4e3b\u8981\u6709\u4e24\u4e2a\u64cd\u4f5c\uff0c\u4e00\u4e2a\u662f sending \uff0c\u4e00\u4e2a\u662f receiving \uff0c\u8fd9\u4e24\u79cd\u64cd\u4f5c\u88ab\u79f0\u4e3a\u901a\u8baf\u3002 <- \u7bad\u5934\u7684\u65b9\u5411\u8868\u660e\u662f\u53d1\u9001\u6570\u636e\u8fd8\u662f\u63a5\u53d7\u6570\u636e\u3002\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cchannel\u4e2d\u7684\u53d1\u9001\u3001\u63a5\u53d7\u64cd\u4f5c\u5757\u3010\u76f4\u5230\u53e6\u4e00\u7aef\u672a\u5c31\u7eea\u3011 \uff0c\u5141\u8bb8goroutine\u4e4b\u95f4\u5728\u6ca1\u6709\u663e\u5f0f\u9501\u6216\u8005\u6761\u4ef6\u53d8\u91cf\u7684\u65f6\u5019\u4e92\u76f8\u540c\u6b65 \u53d1\u9001\u64cd\u4f5c\uff1a\u5728channel\u7684\u5e2e\u52a9\u4e0b\u7528\u6765\u5c06goroutine\u7684\u6570\u636e\u53d1\u9001\u7ed9\u53e6\u5916\u4e00\u4e2agoroutine\uff0c\u901a\u8fc7channel\u53d1\u9001 float64 \uff0c int \uff0c bool \u662f\u5b89\u5168\u5207\u5bb9\u6613\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u503c\u4f1a\u88ab \u62f7\u8d1d \u4e00\u4efd\uff0c\u4e0d\u4f1a\u6709\u610f\u5916\u5e76\u53d1\u7684\u98ce\u9669\uff0c\u540c\u6837\u7684\uff0c strings \u7c7b\u578b\u4e5f\u662f\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u5b83\u662f immutable\uff08\u4e0d\u53ef\u66f4\u6539\uff09 \u3002\u5728\u53d1\u9001 pointers \u6216\u8005 slice \uff0c map \u7b49\u5f15\u7528\u7684\u65f6\u5019\uff0cchannel\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u6307\u9488\u6216\u8005\u5f15\u7528\u4f1a\u88ab\u53d1\u9001\u8005\u6216\u8005\u63a5\u6536\u8005\u5728\u540c\u4e00\u65f6\u95f4\u4fee\u6539\uff0c\u7ed3\u679c\u662f\u4e0d\u53ef\u9884\u77e5\u7684\uff0c\u56e0\u6b64\u9700\u8981==\u786e\u4fdd\u53ea\u6709\u4e00\u4e2agoroutine\u80fd\u591f\u8bbf\u95ee== Mychannel <- element \u8868\u660e\u4e86\u6570\u636e\uff08element\uff09\u53d1\u9001\u7ed9\u4e86Mychannel \u63a5\u53d7\u64cd\u4f5c\uff1a element := <- Mychannel package main import \"fmt\" func main () { fmt . Println ( \"starting Main method\" ) ch := make ( chan int ) go myfunc ( ch ) ch <- 23 fmt . Println ( \"End Main method\" ) } func myfunc ( ch chan int ) { fmt . Println ( 234 + <- ch ) } Closing a Channel close() \u8fd9\u662f\u4e00\u4e2a\u5185\u7f6e\u51fd\u6570\uff0c\u8bbe\u4e86\u4e00\u4e2a\u8868\u793a\u8868\u660e\u4e0d\u4f1a\u518d\u6709\u503c\u53d1\u9001\u7ed9\u8be5channel\u3002 ele, ok = <- Mychannel \u901a\u8fc7\u5faa\u73af\uff0c\u63a5\u53d7\u8005\u4f1a\u68c0\u67e5\u8be5channel\u662f\u6253\u5f00\u7684\u8fd8\u662f\u5173\u95ed\u7684\uff0c\u5982\u679cok\u662f\u771f\uff0c\u5219\u610f\u5473\u7740\u8be5channel\u662f\u6253\u5f00\u7684\u3002 package main import \"fmt\" func main () { c := make ( chan string ) // \u8c03\u7528goroutine go myFunc ( c ) for { res , ok := <- c if ok == false { fmt . Println ( \"Channel Close\" , ok ) break } fmt . Println ( \"Channel Open\" , res , ok ) } } func myFunc ( mychnl chan string ) { for v := 0 ; v < 4 ; v ++ { mychnl <- \"GeeksforGeeks\" } close ( mychnl ) } Blocking Send and Receive \u5728channel\u4e2d\uff0c\u5f53\u6570\u636e\u53d1\u9001\u7ed9\u4e00\u4e2achannel\uff0c\u76f4\u5230\u53e6\u5916\u7684goroutine\u8bfb\u53d6\u8fd9\u4e2achannel\u524d\uff0c\u53d1\u9001\u7684\u58f0\u660e\u662f\u88ab\u963b\u585e\u7684\uff08\u53d1\u9001\u5b8c\u540e\u5fc5\u987b\u7b49\u5f85\u8be5\u4fe1\u606f\u88ab\u8bfb\u53d6\u624d\u80fd\u591f\u7ee7\u7eed\u53d1\u9001\uff09\u3002\u540c\u6837\u7684\uff0c\u5f53\u4e00\u4e2achannel\u63a5\u53d7\u6570\u636e\u7684\u65f6\u5019\u5728\u63a5\u6536\u5230\u6570\u636e\u524d\u90fd\u662f\u88ab\u963b\u585e\u7684\u3002 channel\u4e2d\u7684\u96f6\u503c\u662f nil \u3002 for \u5faa\u73af\u53ef\u4ee5\u8fed\u4ee3channel\u4e2d\u6240\u6709\u8fde\u7eed\u7684\u503c\uff0c\u76f4\u5230\u8be5channel\u3002 package main import \"fmt\" func main () { mychnl := make ( chan string ) go func () { mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" mychnl <- \"asdjjak\" close ( mychnl ) }() for res := range mychnl { fmt . Println ( res ) } } Length of the Channel len() \u8868\u660e\u5728channel\u7f13\u51b2\u533a\u4e2d==\u503c\u7684\u6570\u91cf== package main import \"fmt\" func main () { mychnl := make ( chan string , 4 ) mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" mychnl <- \"asdjjak\" fmt . Println ( \"Length of the channel is:\" , len ( mychnl )) } Capacity of the Channel cap() \u8868\u660echannel\u7f13\u51b2\u533a\u7684\u5927\u5c0f package main import \"fmt\" func main () { mychnl := make ( chan string , 8 ) mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" fmt . Println ( \"Capacity of the channel is:\" , cap ( mychnl )) }","title":"channel"},{"location":"Golang/Basic/01 Channel/#channel","text":"","title":"channel"},{"location":"Golang/Basic/01 Channel/#what-is-channel","text":"channel\u662fgoroutine\u548cgoroutine\u4e4b\u95f4\u65e0\u9501\u4ea4\u6d41\u7684\u3010\u5a92\u4ecb\u3011\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0cchannel\u662f\u4e00\u79cd\u5141\u8bb8\u4e00\u4e2agoroutine\u53d1\u9001\u6570\u636e\u7ed9\u53e6\u5916\u4e00\u4e2agoroutine\u7684\u6280\u672f\uff0c\u9ed8\u8ba4\u7684channel\u662f\u53cc\u5411\u7684\uff0c\u610f\u5473\u7740goroutines\u53ef\u4ee5\u901a\u8fc7\u540c\u4e00\u4e2achannel\u53d1\u3001\u6536\u6570\u636e\u3002","title":"what is channel"},{"location":"Golang/Basic/01 Channel/#how","text":"syntax var Channel_name chan Type channel_name := make(chan Type) \u5728golang\u4e2d, \u6211\u4eec\u7528\u5173\u952e\u5b57 Channel_name chan Type \u521b\u5efa\u67d0\u79cd\u7c7b\u578b\u7684channel\uff0c\u5176\u4e2dchannel\u4ec5\u4ec5\u53ef\u4ee5\u4f20\u9012\u540c\u79cd\u7c7b\u578b\u7684\u6570\u636e\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u4e0d\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u7c7b\u578b\u7684channel\u4f20\u9012\u3002","title":"how"},{"location":"Golang/Basic/01 Channel/#send-and-receive-data-from-a-channel","text":"\u5728golang\u4e2d\uff0cchannel\u4e3b\u8981\u6709\u4e24\u4e2a\u64cd\u4f5c\uff0c\u4e00\u4e2a\u662f sending \uff0c\u4e00\u4e2a\u662f receiving \uff0c\u8fd9\u4e24\u79cd\u64cd\u4f5c\u88ab\u79f0\u4e3a\u901a\u8baf\u3002 <- \u7bad\u5934\u7684\u65b9\u5411\u8868\u660e\u662f\u53d1\u9001\u6570\u636e\u8fd8\u662f\u63a5\u53d7\u6570\u636e\u3002\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cchannel\u4e2d\u7684\u53d1\u9001\u3001\u63a5\u53d7\u64cd\u4f5c\u5757\u3010\u76f4\u5230\u53e6\u4e00\u7aef\u672a\u5c31\u7eea\u3011 \uff0c\u5141\u8bb8goroutine\u4e4b\u95f4\u5728\u6ca1\u6709\u663e\u5f0f\u9501\u6216\u8005\u6761\u4ef6\u53d8\u91cf\u7684\u65f6\u5019\u4e92\u76f8\u540c\u6b65 \u53d1\u9001\u64cd\u4f5c\uff1a\u5728channel\u7684\u5e2e\u52a9\u4e0b\u7528\u6765\u5c06goroutine\u7684\u6570\u636e\u53d1\u9001\u7ed9\u53e6\u5916\u4e00\u4e2agoroutine\uff0c\u901a\u8fc7channel\u53d1\u9001 float64 \uff0c int \uff0c bool \u662f\u5b89\u5168\u5207\u5bb9\u6613\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u503c\u4f1a\u88ab \u62f7\u8d1d \u4e00\u4efd\uff0c\u4e0d\u4f1a\u6709\u610f\u5916\u5e76\u53d1\u7684\u98ce\u9669\uff0c\u540c\u6837\u7684\uff0c strings \u7c7b\u578b\u4e5f\u662f\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u5b83\u662f immutable\uff08\u4e0d\u53ef\u66f4\u6539\uff09 \u3002\u5728\u53d1\u9001 pointers \u6216\u8005 slice \uff0c map \u7b49\u5f15\u7528\u7684\u65f6\u5019\uff0cchannel\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u6307\u9488\u6216\u8005\u5f15\u7528\u4f1a\u88ab\u53d1\u9001\u8005\u6216\u8005\u63a5\u6536\u8005\u5728\u540c\u4e00\u65f6\u95f4\u4fee\u6539\uff0c\u7ed3\u679c\u662f\u4e0d\u53ef\u9884\u77e5\u7684\uff0c\u56e0\u6b64\u9700\u8981==\u786e\u4fdd\u53ea\u6709\u4e00\u4e2agoroutine\u80fd\u591f\u8bbf\u95ee== Mychannel <- element \u8868\u660e\u4e86\u6570\u636e\uff08element\uff09\u53d1\u9001\u7ed9\u4e86Mychannel \u63a5\u53d7\u64cd\u4f5c\uff1a element := <- Mychannel package main import \"fmt\" func main () { fmt . Println ( \"starting Main method\" ) ch := make ( chan int ) go myfunc ( ch ) ch <- 23 fmt . Println ( \"End Main method\" ) } func myfunc ( ch chan int ) { fmt . Println ( 234 + <- ch ) }","title":"Send and Receive Data From a Channel"},{"location":"Golang/Basic/01 Channel/#closing-a-channel","text":"close() \u8fd9\u662f\u4e00\u4e2a\u5185\u7f6e\u51fd\u6570\uff0c\u8bbe\u4e86\u4e00\u4e2a\u8868\u793a\u8868\u660e\u4e0d\u4f1a\u518d\u6709\u503c\u53d1\u9001\u7ed9\u8be5channel\u3002 ele, ok = <- Mychannel \u901a\u8fc7\u5faa\u73af\uff0c\u63a5\u53d7\u8005\u4f1a\u68c0\u67e5\u8be5channel\u662f\u6253\u5f00\u7684\u8fd8\u662f\u5173\u95ed\u7684\uff0c\u5982\u679cok\u662f\u771f\uff0c\u5219\u610f\u5473\u7740\u8be5channel\u662f\u6253\u5f00\u7684\u3002 package main import \"fmt\" func main () { c := make ( chan string ) // \u8c03\u7528goroutine go myFunc ( c ) for { res , ok := <- c if ok == false { fmt . Println ( \"Channel Close\" , ok ) break } fmt . Println ( \"Channel Open\" , res , ok ) } } func myFunc ( mychnl chan string ) { for v := 0 ; v < 4 ; v ++ { mychnl <- \"GeeksforGeeks\" } close ( mychnl ) }","title":"Closing a Channel"},{"location":"Golang/Basic/01 Channel/#blocking-send-and-receive","text":"\u5728channel\u4e2d\uff0c\u5f53\u6570\u636e\u53d1\u9001\u7ed9\u4e00\u4e2achannel\uff0c\u76f4\u5230\u53e6\u5916\u7684goroutine\u8bfb\u53d6\u8fd9\u4e2achannel\u524d\uff0c\u53d1\u9001\u7684\u58f0\u660e\u662f\u88ab\u963b\u585e\u7684\uff08\u53d1\u9001\u5b8c\u540e\u5fc5\u987b\u7b49\u5f85\u8be5\u4fe1\u606f\u88ab\u8bfb\u53d6\u624d\u80fd\u591f\u7ee7\u7eed\u53d1\u9001\uff09\u3002\u540c\u6837\u7684\uff0c\u5f53\u4e00\u4e2achannel\u63a5\u53d7\u6570\u636e\u7684\u65f6\u5019\u5728\u63a5\u6536\u5230\u6570\u636e\u524d\u90fd\u662f\u88ab\u963b\u585e\u7684\u3002 channel\u4e2d\u7684\u96f6\u503c\u662f nil \u3002 for \u5faa\u73af\u53ef\u4ee5\u8fed\u4ee3channel\u4e2d\u6240\u6709\u8fde\u7eed\u7684\u503c\uff0c\u76f4\u5230\u8be5channel\u3002 package main import \"fmt\" func main () { mychnl := make ( chan string ) go func () { mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" mychnl <- \"asdjjak\" close ( mychnl ) }() for res := range mychnl { fmt . Println ( res ) } }","title":"Blocking Send and Receive"},{"location":"Golang/Basic/01 Channel/#length-of-the-channel","text":"len() \u8868\u660e\u5728channel\u7f13\u51b2\u533a\u4e2d==\u503c\u7684\u6570\u91cf== package main import \"fmt\" func main () { mychnl := make ( chan string , 4 ) mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" mychnl <- \"asdjjak\" fmt . Println ( \"Length of the channel is:\" , len ( mychnl )) }","title":"Length of the Channel"},{"location":"Golang/Basic/01 Channel/#capacity-of-the-channel","text":"cap() \u8868\u660echannel\u7f13\u51b2\u533a\u7684\u5927\u5c0f package main import \"fmt\" func main () { mychnl := make ( chan string , 8 ) mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" fmt . Println ( \"Capacity of the channel is:\" , cap ( mychnl )) }","title":"Capacity of the Channel"},{"location":"Golang/Basic/02 UseDelveDebug/","text":"\u4f7f\u7528delve\u8c03\u8bd5Golang \u5b89\u88c5 vscode\u4e2d, \u901a\u8fc7 ctrl+shift+p \u8fd0\u884c Go: Install/Update Tools ,\u9009\u62e9 dlv \u5b89\u88c5 go get -u github.com/go-delve/delve/cmd/dlv \u4f7f\u7528 vscode \u5728vscode\u4e2d\u6309F5, \u5f39\u51fa launch.json \u6587\u4ef6, \u914d\u7f6e { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Launch\" , \"type\" : \"go\" , \"request\" : \"launch\" , \"mode\" : \"debug\" , // auto \"program\" : \"${fileDirname}\" , \"env\" : { \"GOPATH\" : \"d:/workspace/go space/go\" }, \"args\" : [] } ] } \u547d\u4ee4\u884cdebug package main import ( \"net/http\" \"github.com/gin-gonic/gin\" ) func HelloHandler ( c * gin . Context ) { firstname := c . DefaultQuery ( \"firstname\" , \"Guest\" ) lastname := c . Query ( \"lastname\" ) c . String ( http . StatusOK , \"Hello %s %s\" , firstname , lastname ) } func main () { router := gin . Default () router . GET ( \"/welcome\" , HelloHandler ) router . Run ( \":8000\" ) } 1. \u8fdb\u5165\u8981debug\u7684\u6587\u4ef6\u76ee\u5f55 cd ../main.go dlv debug main.go // debug b HelloHandler // break point c // continue n // next s // step in p value // print value stepout // step out function st => start : Start : > http : // www . google . com [ blank ] e => end : > http : // www . google . com op1 => operation : My Operation sub1 => subroutine : My Subroutine cond => condition : Yes or No ? : > http : // www . google . com io => inputoutput : catch something ... st -> op1 -> cond cond ( yes ) -> io -> e cond ( no ) -> sub1 ( right ) -> op1 Title : Here is a title A -> B : Normal line B --> C : Dashed line C ->> D : Open arrow D -->> A : Dashed open arrow","title":"\u4f7f\u7528delve\u8c03\u8bd5Golang"},{"location":"Golang/Basic/02 UseDelveDebug/#delvegolang","text":"","title":"\u4f7f\u7528delve\u8c03\u8bd5Golang"},{"location":"Golang/Basic/02 UseDelveDebug/#_1","text":"vscode\u4e2d, \u901a\u8fc7 ctrl+shift+p \u8fd0\u884c Go: Install/Update Tools ,\u9009\u62e9 dlv \u5b89\u88c5 go get -u github.com/go-delve/delve/cmd/dlv","title":"\u5b89\u88c5"},{"location":"Golang/Basic/02 UseDelveDebug/#_2","text":"","title":"\u4f7f\u7528"},{"location":"Golang/Basic/02 UseDelveDebug/#vscode","text":"\u5728vscode\u4e2d\u6309F5, \u5f39\u51fa launch.json \u6587\u4ef6, \u914d\u7f6e { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Launch\" , \"type\" : \"go\" , \"request\" : \"launch\" , \"mode\" : \"debug\" , // auto \"program\" : \"${fileDirname}\" , \"env\" : { \"GOPATH\" : \"d:/workspace/go space/go\" }, \"args\" : [] } ] }","title":"vscode"},{"location":"Golang/Basic/02 UseDelveDebug/#debug","text":"package main import ( \"net/http\" \"github.com/gin-gonic/gin\" ) func HelloHandler ( c * gin . Context ) { firstname := c . DefaultQuery ( \"firstname\" , \"Guest\" ) lastname := c . Query ( \"lastname\" ) c . String ( http . StatusOK , \"Hello %s %s\" , firstname , lastname ) } func main () { router := gin . Default () router . GET ( \"/welcome\" , HelloHandler ) router . Run ( \":8000\" ) } 1. \u8fdb\u5165\u8981debug\u7684\u6587\u4ef6\u76ee\u5f55 cd ../main.go dlv debug main.go // debug b HelloHandler // break point c // continue n // next s // step in p value // print value stepout // step out function st => start : Start : > http : // www . google . com [ blank ] e => end : > http : // www . google . com op1 => operation : My Operation sub1 => subroutine : My Subroutine cond => condition : Yes or No ? : > http : // www . google . com io => inputoutput : catch something ... st -> op1 -> cond cond ( yes ) -> io -> e cond ( no ) -> sub1 ( right ) -> op1 Title : Here is a title A -> B : Normal line B --> C : Dashed line C ->> D : Open arrow D -->> A : Dashed open arrow","title":"\u547d\u4ee4\u884cdebug"},{"location":"Golang/ErrorCollect/20191127\uff1aCannot fint main module[gomod]/","text":"20191127\uff1aCannot fint the main module[gomod] \u73af\u5883 \u5728\u5c1d\u8bd5vscode\u7684debug\u4e2d\u8f93\u51fa\u4e86 go: cannot find main module; see 'go help modules' \u539f\u56e0 & \u89e3\u51b3 \u6839\u76ee\u5f55\u4e0b\u6ca1\u6709 go.mod \u6587\u4ef6, \u9700\u8981 go mod init \u521d\u59cb\u5316\u5efa\u7acb\u76f8\u5173 .mod \u6587\u4ef6;\u6216\u8005\u5c06\u73af\u5883\u53d8\u91cf\u4e2d\u7684 GO111MODULE=AUTO/OFF","title":"20191127\uff1aCannot fint the main module[gomod]"},{"location":"Golang/ErrorCollect/20191127\uff1aCannot fint main module[gomod]/#20191127cannot-fint-the-main-modulegomod","text":"","title":"20191127\uff1aCannot fint the main module[gomod]"},{"location":"Golang/ErrorCollect/20191127\uff1aCannot fint main module[gomod]/#_1","text":"\u5728\u5c1d\u8bd5vscode\u7684debug\u4e2d\u8f93\u51fa\u4e86 go: cannot find main module; see 'go help modules'","title":"\u73af\u5883"},{"location":"Golang/ErrorCollect/20191127\uff1aCannot fint main module[gomod]/#_2","text":"\u6839\u76ee\u5f55\u4e0b\u6ca1\u6709 go.mod \u6587\u4ef6, \u9700\u8981 go mod init \u521d\u59cb\u5316\u5efa\u7acb\u76f8\u5173 .mod \u6587\u4ef6;\u6216\u8005\u5c06\u73af\u5883\u53d8\u91cf\u4e2d\u7684 GO111MODULE=AUTO/OFF","title":"\u539f\u56e0 &amp; \u89e3\u51b3"},{"location":"Golang/Go-Web/01 HTTPServe/","text":"01\uff1a\u5efa\u7acbHTTP\u670d\u52a1\u5668\u7684\u591a\u79cd\u65b9\u6cd5 \u5efa\u7acb\u670d\u52a1\u5668 package mian import ( \"log\" \"net/http\" ) func main () { http . HadnleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello world\" ) } log . Println ( \"starting HTTP server..\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } http.HandleFunc(pattern string, handler func(ResponseWriter, *Request) \u6839\u636e\u4e00\u4e2a==\u8def\u7531\u89c4\u5219==\u7ed1\u5b9a\u4e00\u4e2a\u6267\u884c\u51fd\u6570, \u5f53\u7528\u6237\u8bbf\u95ee\u5230\u6307\u5b9a\u8def\u7531\u65f6\u6267\u884c. http.HandleFunc \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5fc5\u987b\u7b26\u5408\u51fd\u6570\u7b7e\u540d func(http.ResponseWriter, *http.Request) , \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8bf7\u6c42\u6240\u5bf9\u5e94\u7684\u54cd\u5e94\u5bf9\u8c61 http.ResponseWriter ,\u5305\u542b\u54cd\u5e94\u7801\u3001\u54cd\u5e94\u5934\u548c\u54cd\u5e94\u4f53, \u5728\u8fd9\u91cc\u901a\u8fc7\u8c03\u7528 \u54cd\u5e94\u5bf9\u8c61 \u7684 Write \u65b9\u6cd5\u50cf\u54cd\u5e94\u4f53\u5199\u5165\u5b57\u7b26\u4e32. \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8bf7\u6c42\u6240\u5bf9\u5e94\u7684\u8bf7\u6c42\u5bf9\u8c61 *http.Request ,\u5305\u542b\u8bf7\u6c42\u5934\u3001\u8bf7\u6c42\u4f53\u7b49. http.ListenAndServe \u542f\u52a8HTTP\u670d\u52a1\u5668,\u76d1\u542c \u6307\u5b9a\u5730\u5740 \u548c \u7aef\u53e3\u53f7 \u7684HTTP\u8bf7\u6c42 http.HandleFunc \u5c06\u4f20\u5165\u7684 \u7ed1\u5b9a\u51fd\u6570 \u8f6c\u6362\u4e3a\u7c7b\u578b http.HandleFunc (\u4e00\u4e2aHTTP\u8bf7\u6c42\u5904\u7406\u5668\u5bf9\u8c61),\u8be5\u5bf9\u8c61\u7c7b\u578b\u5b9e\u73b0 http.Handler \u63a5\u53e3,\u63a5\u53e3\u65b9\u6cd5\u8c03\u7528\u81ea\u5df1 // net / http / server . go // The HandlerFunc type is an adapter to allow the use of // ordinary functions as HTTP handlers . If f is a function // with the appropriate signature , HandlerFunc ( f ) is a // Handler that calls f . type HandlerFunc func ( ResponseWriter , * Request ) // ServeHTTP calls f ( w , r ). func ( f HandlerFunc ) ServeHTTP ( w ResponseWriter , r * Request ) { f ( w , r ) } \u81ea\u5b9a\u4e49Handler package main import ( \"log\" \"net/http\" ) type customHandler {} // \u5c06ServeHTTP\u65b9\u6cd5\u7ed1\u5b9a\u5230customHandler\u4e0a func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ){ w . Write ([] byte ( \"hello custom Handler\" ) } func main () { http . Handle ( \"/\" , & cutsomerHandler {}) log . Println ( \"starting HTTP server...\" ) log . Fatl ( http . ListenAndServe ( \":8000\" , nil )) } \u81ea\u5b9a\u4e49\u7c7b\u578b type customHandler{} \u7c7b\u578b\u7ed1\u5b9a ServerHTTP(w http.ResponseWriter, r *http.Request) \u65b9\u6cd5 http.Handle \u8c03\u7528, \u901a\u8fc7 &customHandler{} \u4f20\u5165\u8be5\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u5730\u5740 \u5c11\u4e86\u5c06\u7ed1\u5b9a\u51fd\u6570\u8f6c\u6362\u4e3a type HandleFunc \u7684\u6b65\u9aa4 \u670d\u52a1\u590d\u7528\u5668(ServeMux) // ListenAndServe listens on the TCP network address addr and then calls // Serve with handler to handle requests on incoming connections. // Accepted connections are configured to enable TCP keep-alives. // // The handler is typically nil, in which case the DefaultServeMux is used. // // ListenAndServe always returns a non-nil error. func ListenAndServe ( addr string , handler Handler ) error { server := & Server { Addr : addr , Handler : handler } return server . ListenAndServe () } //*****************************// type Handler interface { ServeHTTP ( ResponseWriter , * Request ) } 1. \u5b9e\u4f8b\u4e2d http.ListenAndServe \u7684nil\u66ff\u4ee3\u4e86\u5b9e\u73b0\u4e86 http.Handler \u63a5\u53e3\u7684\u5bf9\u8c61 2. http.Handler \u5b9e\u73b0 ServeHTTP \u63a5\u53e3 3. \u7f3a\u9677 \u8be5\u65b9\u6cd5\u4e0d\u80fd\u50cf\u4e4b\u524d\u8c03\u7528\u7684 http.HandleFunc \u548c http.Handle \u4e3a\u4e0d\u540c\u8def\u7531\u89c4\u5219\u7ed1\u5b9a\u4e0d\u540c\u7684\u51fd\u6570\u5904\u7406 package main import ( \"log\" \"net/http\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux's ServeHTTP\" )) } func main () { log . Println ( \"starting HTTP server... \" ) log . Fatal ( http . ListenAndServe ( \":8000\" , & customHandler {})) } \u81ea\u5b9a\u4e49Serve Mux // HandleFunc registers the handler function for the given pattern // in the DefaultServeMux. // The documentation for ServeMux explains how patterns are matched. func HandleFunc ( pattern string , handler func ( ResponseWriter , * Request )) { DefaultServeMux . HandleFunc ( pattern , handler ) } //*****************************// // DefaultServeMux is the default ServeMux used by Serve. var DefaultServeMux = & defaultServeMux var defaultServeMux ServeMux //*****************************// type ServeMux struct { mu sync . RWMutex m map [ string ] muxEntry es [] muxEntry // slice of entries sorted from longest to shortest. hosts bool // whether any patterns contain hostnames } handle.Handle \u8c03\u7528 DefaultServeMux ,\u8be5 DefaultMux \u662f http.ServeMux \u7684\u5c01\u88c5 http.ServeMux \u5e26\u6709\u57fa\u672c\u8def\u7531\u529f\u80fd\u7684\u670d\u52a1\u590d\u7528\u5668(Serve Multiplexer) \u901a\u8fc7 http.NewServeMux \u64cd\u4f5c http.ServeMux \u5bf9\u8c61, \u8c03\u7528 http.NewServeMux \u7684 .Handle \u65b9\u6cd5 package main import ( \"log\" \"net/http\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello new custom server mux\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , mux )) } \u670d\u52a1\u5668\u5bf9\u8c61(Server) func ListenAndServe ( addr string , handler Handler ) error { server := & Server { Addr : addr , Handler : handler } return server . ListenAndServe () } //***************************// type Server struct { Addr string Handler Handler ... } \u81ea\u5b9a\u4e49server1 \u8c03\u7528 http.ListenAndServe \u7684\u65f6\u5019\u521b\u5efa\u4e86\u53e6\u4e00\u4e2a http.Serve \u5bf9\u8c61 package main import ( \"log\" \"net/http\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) serve := & http . Server { Addr : \":8000\" , Handler : mux , } log . Println ( \"starting HTTP serve...\" ) log . Fatal ( serve . ListenAndServe ()) } \u81ea\u5b9a\u4e49server2 // custome server 2 package main import ( \"log\" \"net/http\" \"time\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux2\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) mux . HandleFunc ( \"/timeout\" , func ( w http . ResponseWriter , r * http . Request ) { // \u8d85\u65f6 time . Sleep ( 2 * time . Second ) w . Write ([] byte ( \"Timeout\" )) }) server := & http . Server { Addr : \":8000\" , Handler : mux , WriteTimeout : 2 * time . Second , } log . Println ( \"starting HTTP server...\" ) log . Fatal ( server . ListenAndServe ()) } 1. \u65e0\u6cd5\u8bbf\u95ee\u5230 localhost:8000/timeout 2. \u6267\u884c\u51fd\u6570\u4f11\u77202\u79d2, \u88ab http.Serve \u5bf9\u8c61\u8ba4\u4e3a\u5df2\u7ecf\u8d85\u65f6,\u63d0\u524d\u5173\u95ed\u4e0e\u5ba2\u6237\u7aef\u4e4b\u95f4\u7684\u8fde\u63a5, \u540e\u9762\u65e0\u6cd5\u50cf\u54cd\u5e94\u4f53\u5199\u5165\u4efb\u4f55\u4fe1\u606f \u4f18\u96c5\u5730\u505c\u6b62\u670d\u52a1 \u901a\u8fc7\u6355\u6349\u7cfb\u7edf\u4fe1\u53f7(Signal)\u3001goroutine\u548c\u901a\u9053(Channel)\u5b9e\u73b0 \u6355\u6349 os.Interrupt \u4fe1\u53f7(ctrl+c)\u7136\u540e\u8c03\u7528 server.Shutdown \u65b9\u6cd5g\u544a\u77e5\u670d\u52a1\u5668\u505c\u6b62\u63a5\u53d7\u65b0\u8bf7\u6c42 http.ErrServerClosed \u6839\u636e\u8be5\u9519\u8bef\u7c7b\u578b\u5224\u65ad\u670d\u52a1\u5668\u662f\u5426\u6b63\u5e38\u5173\u95ed package main import ( \"context\" \"log\" \"net/http\" \"os\" \"os/signal\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux2\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) server := & http . Server { Addr : \":8000\" , Handler : mux , } // \u521b\u5efa\u7cfb\u7edf\u4fe1\u53f7\u63a5\u6536\u5668 quit := make ( chan os . Signal ) signal . Notify ( quit , os . Interrupt ) go func () { <- quit if err := server . Shutdown ( context . Background ()); err != nil { log . Fatal ( \"Shutdown server:\" , err ) } }() log . Println ( \"start HTTP server...\" ) err := server . ListenAndServe () if err != nil { if err == http . ErrServerClosed { log . Print ( \"Server Closed under request\" ) } else { log . Fatal ( \"Server closed unexpected\" ) } } }","title":"01\uff1a\u5efa\u7acbHTTP\u670d\u52a1\u5668\u7684\u591a\u79cd\u65b9\u6cd5"},{"location":"Golang/Go-Web/01 HTTPServe/#01http","text":"","title":"01\uff1a\u5efa\u7acbHTTP\u670d\u52a1\u5668\u7684\u591a\u79cd\u65b9\u6cd5"},{"location":"Golang/Go-Web/01 HTTPServe/#_1","text":"package mian import ( \"log\" \"net/http\" ) func main () { http . HadnleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello world\" ) } log . Println ( \"starting HTTP server..\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } http.HandleFunc(pattern string, handler func(ResponseWriter, *Request) \u6839\u636e\u4e00\u4e2a==\u8def\u7531\u89c4\u5219==\u7ed1\u5b9a\u4e00\u4e2a\u6267\u884c\u51fd\u6570, \u5f53\u7528\u6237\u8bbf\u95ee\u5230\u6307\u5b9a\u8def\u7531\u65f6\u6267\u884c. http.HandleFunc \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5fc5\u987b\u7b26\u5408\u51fd\u6570\u7b7e\u540d func(http.ResponseWriter, *http.Request) , \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8bf7\u6c42\u6240\u5bf9\u5e94\u7684\u54cd\u5e94\u5bf9\u8c61 http.ResponseWriter ,\u5305\u542b\u54cd\u5e94\u7801\u3001\u54cd\u5e94\u5934\u548c\u54cd\u5e94\u4f53, \u5728\u8fd9\u91cc\u901a\u8fc7\u8c03\u7528 \u54cd\u5e94\u5bf9\u8c61 \u7684 Write \u65b9\u6cd5\u50cf\u54cd\u5e94\u4f53\u5199\u5165\u5b57\u7b26\u4e32. \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8bf7\u6c42\u6240\u5bf9\u5e94\u7684\u8bf7\u6c42\u5bf9\u8c61 *http.Request ,\u5305\u542b\u8bf7\u6c42\u5934\u3001\u8bf7\u6c42\u4f53\u7b49. http.ListenAndServe \u542f\u52a8HTTP\u670d\u52a1\u5668,\u76d1\u542c \u6307\u5b9a\u5730\u5740 \u548c \u7aef\u53e3\u53f7 \u7684HTTP\u8bf7\u6c42 http.HandleFunc \u5c06\u4f20\u5165\u7684 \u7ed1\u5b9a\u51fd\u6570 \u8f6c\u6362\u4e3a\u7c7b\u578b http.HandleFunc (\u4e00\u4e2aHTTP\u8bf7\u6c42\u5904\u7406\u5668\u5bf9\u8c61),\u8be5\u5bf9\u8c61\u7c7b\u578b\u5b9e\u73b0 http.Handler \u63a5\u53e3,\u63a5\u53e3\u65b9\u6cd5\u8c03\u7528\u81ea\u5df1 // net / http / server . go // The HandlerFunc type is an adapter to allow the use of // ordinary functions as HTTP handlers . If f is a function // with the appropriate signature , HandlerFunc ( f ) is a // Handler that calls f . type HandlerFunc func ( ResponseWriter , * Request ) // ServeHTTP calls f ( w , r ). func ( f HandlerFunc ) ServeHTTP ( w ResponseWriter , r * Request ) { f ( w , r ) }","title":"\u5efa\u7acb\u670d\u52a1\u5668"},{"location":"Golang/Go-Web/01 HTTPServe/#handler","text":"package main import ( \"log\" \"net/http\" ) type customHandler {} // \u5c06ServeHTTP\u65b9\u6cd5\u7ed1\u5b9a\u5230customHandler\u4e0a func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ){ w . Write ([] byte ( \"hello custom Handler\" ) } func main () { http . Handle ( \"/\" , & cutsomerHandler {}) log . Println ( \"starting HTTP server...\" ) log . Fatl ( http . ListenAndServe ( \":8000\" , nil )) } \u81ea\u5b9a\u4e49\u7c7b\u578b type customHandler{} \u7c7b\u578b\u7ed1\u5b9a ServerHTTP(w http.ResponseWriter, r *http.Request) \u65b9\u6cd5 http.Handle \u8c03\u7528, \u901a\u8fc7 &customHandler{} \u4f20\u5165\u8be5\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u5730\u5740 \u5c11\u4e86\u5c06\u7ed1\u5b9a\u51fd\u6570\u8f6c\u6362\u4e3a type HandleFunc \u7684\u6b65\u9aa4","title":"\u81ea\u5b9a\u4e49Handler"},{"location":"Golang/Go-Web/01 HTTPServe/#servemux","text":"// ListenAndServe listens on the TCP network address addr and then calls // Serve with handler to handle requests on incoming connections. // Accepted connections are configured to enable TCP keep-alives. // // The handler is typically nil, in which case the DefaultServeMux is used. // // ListenAndServe always returns a non-nil error. func ListenAndServe ( addr string , handler Handler ) error { server := & Server { Addr : addr , Handler : handler } return server . ListenAndServe () } //*****************************// type Handler interface { ServeHTTP ( ResponseWriter , * Request ) } 1. \u5b9e\u4f8b\u4e2d http.ListenAndServe \u7684nil\u66ff\u4ee3\u4e86\u5b9e\u73b0\u4e86 http.Handler \u63a5\u53e3\u7684\u5bf9\u8c61 2. http.Handler \u5b9e\u73b0 ServeHTTP \u63a5\u53e3 3. \u7f3a\u9677 \u8be5\u65b9\u6cd5\u4e0d\u80fd\u50cf\u4e4b\u524d\u8c03\u7528\u7684 http.HandleFunc \u548c http.Handle \u4e3a\u4e0d\u540c\u8def\u7531\u89c4\u5219\u7ed1\u5b9a\u4e0d\u540c\u7684\u51fd\u6570\u5904\u7406 package main import ( \"log\" \"net/http\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux's ServeHTTP\" )) } func main () { log . Println ( \"starting HTTP server... \" ) log . Fatal ( http . ListenAndServe ( \":8000\" , & customHandler {})) }","title":"\u670d\u52a1\u590d\u7528\u5668(ServeMux)"},{"location":"Golang/Go-Web/01 HTTPServe/#serve-mux","text":"// HandleFunc registers the handler function for the given pattern // in the DefaultServeMux. // The documentation for ServeMux explains how patterns are matched. func HandleFunc ( pattern string , handler func ( ResponseWriter , * Request )) { DefaultServeMux . HandleFunc ( pattern , handler ) } //*****************************// // DefaultServeMux is the default ServeMux used by Serve. var DefaultServeMux = & defaultServeMux var defaultServeMux ServeMux //*****************************// type ServeMux struct { mu sync . RWMutex m map [ string ] muxEntry es [] muxEntry // slice of entries sorted from longest to shortest. hosts bool // whether any patterns contain hostnames } handle.Handle \u8c03\u7528 DefaultServeMux ,\u8be5 DefaultMux \u662f http.ServeMux \u7684\u5c01\u88c5 http.ServeMux \u5e26\u6709\u57fa\u672c\u8def\u7531\u529f\u80fd\u7684\u670d\u52a1\u590d\u7528\u5668(Serve Multiplexer) \u901a\u8fc7 http.NewServeMux \u64cd\u4f5c http.ServeMux \u5bf9\u8c61, \u8c03\u7528 http.NewServeMux \u7684 .Handle \u65b9\u6cd5 package main import ( \"log\" \"net/http\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello new custom server mux\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , mux )) }","title":"\u81ea\u5b9a\u4e49Serve Mux"},{"location":"Golang/Go-Web/01 HTTPServe/#server","text":"func ListenAndServe ( addr string , handler Handler ) error { server := & Server { Addr : addr , Handler : handler } return server . ListenAndServe () } //***************************// type Server struct { Addr string Handler Handler ... }","title":"\u670d\u52a1\u5668\u5bf9\u8c61(Server)"},{"location":"Golang/Go-Web/01 HTTPServe/#server1","text":"\u8c03\u7528 http.ListenAndServe \u7684\u65f6\u5019\u521b\u5efa\u4e86\u53e6\u4e00\u4e2a http.Serve \u5bf9\u8c61 package main import ( \"log\" \"net/http\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) serve := & http . Server { Addr : \":8000\" , Handler : mux , } log . Println ( \"starting HTTP serve...\" ) log . Fatal ( serve . ListenAndServe ()) }","title":"\u81ea\u5b9a\u4e49server1"},{"location":"Golang/Go-Web/01 HTTPServe/#server2","text":"// custome server 2 package main import ( \"log\" \"net/http\" \"time\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux2\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) mux . HandleFunc ( \"/timeout\" , func ( w http . ResponseWriter , r * http . Request ) { // \u8d85\u65f6 time . Sleep ( 2 * time . Second ) w . Write ([] byte ( \"Timeout\" )) }) server := & http . Server { Addr : \":8000\" , Handler : mux , WriteTimeout : 2 * time . Second , } log . Println ( \"starting HTTP server...\" ) log . Fatal ( server . ListenAndServe ()) } 1. \u65e0\u6cd5\u8bbf\u95ee\u5230 localhost:8000/timeout 2. \u6267\u884c\u51fd\u6570\u4f11\u77202\u79d2, \u88ab http.Serve \u5bf9\u8c61\u8ba4\u4e3a\u5df2\u7ecf\u8d85\u65f6,\u63d0\u524d\u5173\u95ed\u4e0e\u5ba2\u6237\u7aef\u4e4b\u95f4\u7684\u8fde\u63a5, \u540e\u9762\u65e0\u6cd5\u50cf\u54cd\u5e94\u4f53\u5199\u5165\u4efb\u4f55\u4fe1\u606f","title":"\u81ea\u5b9a\u4e49server2"},{"location":"Golang/Go-Web/01 HTTPServe/#_2","text":"\u901a\u8fc7\u6355\u6349\u7cfb\u7edf\u4fe1\u53f7(Signal)\u3001goroutine\u548c\u901a\u9053(Channel)\u5b9e\u73b0 \u6355\u6349 os.Interrupt \u4fe1\u53f7(ctrl+c)\u7136\u540e\u8c03\u7528 server.Shutdown \u65b9\u6cd5g\u544a\u77e5\u670d\u52a1\u5668\u505c\u6b62\u63a5\u53d7\u65b0\u8bf7\u6c42 http.ErrServerClosed \u6839\u636e\u8be5\u9519\u8bef\u7c7b\u578b\u5224\u65ad\u670d\u52a1\u5668\u662f\u5426\u6b63\u5e38\u5173\u95ed package main import ( \"context\" \"log\" \"net/http\" \"os\" \"os/signal\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux2\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) server := & http . Server { Addr : \":8000\" , Handler : mux , } // \u521b\u5efa\u7cfb\u7edf\u4fe1\u53f7\u63a5\u6536\u5668 quit := make ( chan os . Signal ) signal . Notify ( quit , os . Interrupt ) go func () { <- quit if err := server . Shutdown ( context . Background ()); err != nil { log . Fatal ( \"Shutdown server:\" , err ) } }() log . Println ( \"start HTTP server...\" ) err := server . ListenAndServe () if err != nil { if err == http . ErrServerClosed { log . Print ( \"Server Closed under request\" ) } else { log . Fatal ( \"Server closed unexpected\" ) } } }","title":"\u4f18\u96c5\u5730\u505c\u6b62\u670d\u52a1"},{"location":"Golang/Go-Web/02 BasicTemplateUsage/","text":"02\uff1a\u57fa\u7840\u6a21\u677f \u4e3a\u4ec0\u4e48\u8981\u7528\u6a21\u677f HTTP\u670d\u52a1\u5668\u54cd\u5e94\u56fa\u5b9a\u7684\u5b57\u7b26\u4e32\u4e0d\u7b26\u5408\u5b9e\u9645\u73af\u5883, \u901a\u8fc7 text/template \u5305\u5411\u5ba2\u6237\u7aef \u54cd\u5e94\u52a8\u6001\u5185\u5bb9 . \u7279\u6027 \u5c06\u6a21\u677f\u5e94\u7528\u4e8e\u7ed9\u5b9a\u7684\u6570\u636e\u7ed3\u6784\u6765\u6267\u884c\u6a21\u677f\uff0c\u6a21\u677f\u7684\u7f16\u7801\u4e0e Go \u8bed\u8a00\u6e90\u4ee3\u7801\u6587\u4ef6\u76f8\u540c\uff0c\u9700\u4e3a UTF-8 \u7f16\u7801 \u6a21\u677f\u4e2d\u7684\u6ce8\u89e3\uff08Annotation\uff09\u4f1a\u6839\u636e\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5143\u7d20\u6765\u6267\u884c\u5e76\u6d3e\u751f\u5177\u4f53\u7684\u663e\u793a\u7ed3\u6784\uff0c\u8fd9\u4e9b\u5143\u7d20\u4e00\u822c\u6307\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u6216 map \u4e2d\u7684\u952e\u540d \u6a21\u677f\u7684\u6267\u884c\u903b\u8f91\u4f1a\u4f9d\u636e\u70b9\uff08Dot\uff0c\".\"\uff09\u64cd\u4f5c\u7b26\u6765\u8bbe\u5b9a\u5f53\u524d\u7684\u6267\u884c\u4f4d\u7f6e\uff0c\u5e76\u6309\u5e8f\u5b8c\u6210\u6240\u6709\u903b\u8f91\u7684\u6267\u884c\u3002 \u6a21\u677f\u4e2d\u7684\u884c\u4e3a\uff08Action\uff09\u5305\u62ec\u6570\u636e\u8bc4\u4f30\uff08Data Evaluation\uff09\u548c\u63a7\u5236\u903b\u8f91\uff0c\u4e14\u9700\u8981\u4f7f\u7528\u53cc\u5c42\u5927\u62ec\u53f7\uff08{{ \u548c }}\uff09\u5305\u88f9\u3002\u9664\u884c\u4e3a\u4ee5\u5916\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u4f1a\u539f\u6837\u8f93\u51fa\u4e0d\u505a\u4fee\u6539\u3002 \u6a21\u677f\u89e3\u6790\u5b8c\u6210\u540e\uff0c\u4ece\u8bbe\u8ba1\u4e0a\u53ef\u4ee5\u5e76\u53d1\u5730\u8fdb\u884c\u6e32\u67d3\uff0c\u4f46\u8981\u6ce8\u610f\u88ab\u6e32\u67d3\u5bf9\u8c61\u7684\u5e76\u53d1\u5b89\u5168\u6027\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u6a21\u677f\u53ef\u4ee5\u540c\u65f6\u4e3a\u591a\u4e2a\u5ba2\u6237\u7aef\u7684\u54cd\u5e94\u8fdb\u884c\u6e32\u67d3\uff0c\u56e0\u4e3a\u8f93\u51fa\u5bf9\u8c61\uff08Writer\uff09\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u4f46\u662f\u88ab\u6e32\u67d3\u7684\u5bf9\u8c61\u53ef\u80fd\u6709\u5404\u81ea\u7684\u72b6\u6001\u548c\u65f6\u6548\u6027\u3002 \u5982\u4f55\u4f7f\u7528\u6a21\u677f \u5b9e\u4f8b package main import ( \"fmt\" \"text/template\" \"log\" \"net/http\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // \u521b\u5efa\u6a21\u677f\u5bf9\u8c61\u5e76\u89e3\u6790\u6a21\u677f\u5185\u5bb9 tmpl , err := template . New ( \"test\" ). Parse ( \"Hello world!\" ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } // \u8c03\u7528\u6a21\u677f\u5bf9\u8c61\u7684\u6e32\u67d3\u65b9\u6cd5 err = tmpl . Execute ( w , nil ) if err != nil { fmt . Fprintf ( w , \"Excute: %v\" , err ) return } }) log . Println ( \"starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } 1. \u5f15\u5165 text/template \u5305. 2. \u8c03\u7528 template.New \u65b9\u6cd5\u6839\u636e\u7ed9\u5b9a\u7684\u540d\u79f0\u65b0\u5efa\u6a21\u677f, \u8fd4\u56de\u4e00\u4e2a *template.Template \u5bf9\u8c61. 3. *template.Template \u5bf9\u8c61\u7684 Parse \u65b9\u6cd5\u63a5\u53d7\u5b57\u7b26\u4e32\u53c2\u6570(\u6587\u672c\u6a21\u677f\u5185\u5bb9), \u89e3\u6790\u5e76\u8fd4\u56de\u89e3\u6790\u4e2d\u9047\u5230\u7684\u9519\u8bef. 4. \u8c03\u7528 template.Execute \u6e32\u67d3\u6a21\u677f, \u53c2\u6570\u5206\u522b\u4e3a \u8f93\u51fa\u5bf9\u8c61 \u548c \u6307\u5b9a\u6570\u636e\u5bf9\u8c61 , \u5b9e\u73b0\u4e86 io.Writer \u63a5\u53e3\u7684\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8f93\u51fa\u5bf9\u8c61. \u6e32\u67d3\u53d8\u91cf package main import ( \"net/http\" \"log\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Reqeust ){ w . Write ([] byte ( r . URL . QUERY (). GET ( \"val\" ))) }) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } HTTP\u534f\u8bae\u901a\u8fc7 GET \u8bf7\u6c42\u83b7\u53d6URL\u53c2\u6570(URL\u4e2d?\u540e\u7684\u503c). \u8c03\u7528 *http.Request \u5bf9\u8c61\u7684 URL.QUERY().GET() \u65b9\u6cd5. package main import ( \"fmt\" \"text/template\" \"log\" \"net/http\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // \u521b\u5efa\u6a21\u677f\u5e76\u89e3\u6790\u5185\u5bb9 tmpl , err := template . New ( \"test\" ). Parse ( \"The value is: {{.}}\" ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } // \u83b7\u53d6URL\u53c2\u6570\u7684\u503c val := r . URL . Query (). Get ( \"val\" ) // \u8c03\u7528\u6a21\u677f\u5bf9\u8c61\u6e32\u67d3\u65b9\u6cd5 err = tmpl . Execute ( w , val ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } \u6a21\u677f\u5185\u5bb9\u4fee\u6539\u6210 The value is : {{.}} , \u7528\u4e86 \u5206\u9694\u7b26 \u5c06 . \u64cd\u4f5c\u7b26\u5305\u88f9\u8d77\u6765, . \u64cd\u4f5c\u7b26\u9ed8\u8ba4\u6307\u5411 \u6839\u5bf9\u8c61 , \u5373 template.Execute \u4e2d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570. \u5728 template.Execute \u65b9\u6cd5\u4e2d\u4f20\u5165 val , . \u64cd\u4f5c\u7b26\u6e32\u67d3\u8be5\u53d8\u91cf val \u5b9e\u73b0\u52a8\u6001\u8f93\u51fa. \u6e32\u67d3\u590d\u6742\u5bf9\u8c61 package main import ( \"fmt\" \"text/template\" \"log\" \"net/http\" \"strconv\" ) // Inventory \u5e93\u5b58 type Inventory struct { SKU string Name string UnitPrice float64 Quantity int64 , } func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( `Inventory SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse:%v\" , err ) return } // \u6839\u636eURL\u67e5\u8be2\u53c2\u6570\u7684\u503c\u521b\u5efaInventory\u5b9e\u4f8b inventory := & Inventory { SKU : r . URL . Query (). Get ( \"sku\" ), Name : r . URL . Query (). Get ( \"name\" ), } // \u6570\u636e\u5904\u7406 inventory . UnitPrice , _ = strconv . ParseFloat ( r . URL . Query (). Get ( \"unitPrice\" ), 64 ) inventory . Quantity , _ = strconv . ParseInt ( r . URL . Query (). Get ( \"quantity\" ), 10 , 64 ) // \u6e32\u67d3 err = tmpl . Execute ( w , inventory ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"start HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } template.Execute \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7c7b\u578b\u4e3a interface{} , \u53ef\u4ee5\u4f20\u5165\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570. func ( t * Template ) Execute ( wr io . Writer , data interface {}) error { if err := t . escape (); err != nil { return err } return t . text . Execute ( wr , data ) } http/template \u4f1a\u6839\u636e\u4f20\u5165\u7684 \u6839\u5bf9\u8c61 \u8fdb\u884c\u5e95\u5c42\u7c7b\u578b\u5206\u6790, \u81ea\u52a8\u8bc6\u522b\u53d8\u91cf, \u6b64\u65f6\u7684 . \u64cd\u4f5c\u7b26\u4ee3\u8868 inventory \u7ed3\u6784\u4f53, \u56e0\u6b64\u53ef\u4ee5\u8c03\u7528 inventory \u7684\u5404\u4e2a\u5c5e\u6027. \u5728 Parse \u7684\u65f6\u5019\u7528\u53cd\u5f15\u53f7``\u5c06\u7ed3\u6784\u4f53\u5305\u8d77\u6765. \u6e32\u67d3\u4e2d\u8c03\u7528\u7ed3\u6784\u4f53\u7684\u65b9\u6cd5 func ( i * Inventory ) Subtotal () float64 { return i . UnitPrice * float64 ( i . Quantity ) } //******************************// http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( `Inventory SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} Subtotal: {{.Subtotal}} ` ) map\u7c7b\u578b\u4f5c\u4e3a\u6a21\u677f\u8ddf\u5bf9\u8c61 package main import ( \"fmt\" \"log\" \"net/http\" \"strconv\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // \u521b\u5efa\u6a21\u677f\u5bf9\u8c61\u5e76\u89e3\u6790\u6a21\u677f\u5185\u5bb9 tmpl , err := template . New ( \"test\" ). Parse ( `Inventory SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } // \u76f4\u63a5\u5c06URL \u67e5\u8be2\u53c2\u6570\u7684\u503c\u8d4b\u503c\u7ed9\u53d8\u91cf sku := r . URL . Query (). Get ( \"sku\" ) name := r . URL . Query (). Get ( \"name\" ) unitPrice , _ := strconv . ParseFloat ( r . URL . Query (). Get ( \"unitPrice\" ), 64 ) quantity , _ := strconv . ParseInt ( r . URL . Query (). Get ( \"quantity\" ), 10 , 64 ) err = tmpl . Execute ( w , map [ string ] interface {}{ \"SKU\" : sku , \"Name\" : name , \"UnitPrice\" : unitPrice , \"Quantity\" : quantity , }) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"Starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \"localhost:8000\" , nil )) } 1. \u4f20\u9012\u7ed9 Execute \u4e00\u4e2a map[string]interface{} \u4f5c\u4e3a\u6a21\u677f\u5bf9\u8c61,\u53ef\u4ee5\u4f20\u5165\u4efb\u610f\u7c7b\u578b\u7684\u503c, \u5c06\u7ed3\u6784\u4f53\u7684\u6240\u6709\u503c\u90fd\u4f20\u5165. 2. \u4e0d\u518d\u9700\u8981\u5355\u72ec\u521b\u5efa\u5b9e\u4f8b, \u53ea\u9700\u8981\u901a\u8fc7 r.URL.Query().Get(valName) \u83b7\u53d6URL\u67e5\u8be2\u53c2\u6570\u7684\u503c. 3. \u5176\u4e2d\u6570\u503c\u9700\u8981\u7528\u5230 strconv.ParseInt/ParseFloat \u8fdb\u884c\u8f6c\u5316 \u6ce8\u91ca tmpl , err := template . New ( \"test\" ). Parse ( `Inventory{{/* \u6253\u5370\u53c2\u6570\u7684\u503c */}} SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} ` ) 1. \u901a\u8fc7 {{}} \u53cc\u5c42\u5927\u62ec\u53f7\u548c /**/ \u62ec\u8d77\u6765\u7684\u503c\u662f\u6ce8\u91ca \u6a21\u677f\u6d41\u7a0b template.New \u65b0\u5efa\u6a21\u677f, \u8fd4\u56de *template.Template \u5bf9\u8c61 \u8c03\u7528 *template.Template \u5bf9\u8c61\u7684 Parse \u65b9\u6cd5\u89e3\u6790\u6a21\u677f \u4f20\u5165\u6a21\u677f\u5b9e\u4f8b \u6570\u636e\u5904\u7406 strconv \u8c03\u7528 *template.Template \u5bf9\u8c61\u7684 Execute \u65b9\u6cd5\u6e32\u67d3\u6a21\u677f","title":"02\uff1a\u57fa\u7840\u6a21\u677f"},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#02","text":"","title":"02\uff1a\u57fa\u7840\u6a21\u677f"},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_1","text":"HTTP\u670d\u52a1\u5668\u54cd\u5e94\u56fa\u5b9a\u7684\u5b57\u7b26\u4e32\u4e0d\u7b26\u5408\u5b9e\u9645\u73af\u5883, \u901a\u8fc7 text/template \u5305\u5411\u5ba2\u6237\u7aef \u54cd\u5e94\u52a8\u6001\u5185\u5bb9 .","title":"\u4e3a\u4ec0\u4e48\u8981\u7528\u6a21\u677f"},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_2","text":"\u5c06\u6a21\u677f\u5e94\u7528\u4e8e\u7ed9\u5b9a\u7684\u6570\u636e\u7ed3\u6784\u6765\u6267\u884c\u6a21\u677f\uff0c\u6a21\u677f\u7684\u7f16\u7801\u4e0e Go \u8bed\u8a00\u6e90\u4ee3\u7801\u6587\u4ef6\u76f8\u540c\uff0c\u9700\u4e3a UTF-8 \u7f16\u7801 \u6a21\u677f\u4e2d\u7684\u6ce8\u89e3\uff08Annotation\uff09\u4f1a\u6839\u636e\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5143\u7d20\u6765\u6267\u884c\u5e76\u6d3e\u751f\u5177\u4f53\u7684\u663e\u793a\u7ed3\u6784\uff0c\u8fd9\u4e9b\u5143\u7d20\u4e00\u822c\u6307\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u6216 map \u4e2d\u7684\u952e\u540d \u6a21\u677f\u7684\u6267\u884c\u903b\u8f91\u4f1a\u4f9d\u636e\u70b9\uff08Dot\uff0c\".\"\uff09\u64cd\u4f5c\u7b26\u6765\u8bbe\u5b9a\u5f53\u524d\u7684\u6267\u884c\u4f4d\u7f6e\uff0c\u5e76\u6309\u5e8f\u5b8c\u6210\u6240\u6709\u903b\u8f91\u7684\u6267\u884c\u3002 \u6a21\u677f\u4e2d\u7684\u884c\u4e3a\uff08Action\uff09\u5305\u62ec\u6570\u636e\u8bc4\u4f30\uff08Data Evaluation\uff09\u548c\u63a7\u5236\u903b\u8f91\uff0c\u4e14\u9700\u8981\u4f7f\u7528\u53cc\u5c42\u5927\u62ec\u53f7\uff08{{ \u548c }}\uff09\u5305\u88f9\u3002\u9664\u884c\u4e3a\u4ee5\u5916\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u4f1a\u539f\u6837\u8f93\u51fa\u4e0d\u505a\u4fee\u6539\u3002 \u6a21\u677f\u89e3\u6790\u5b8c\u6210\u540e\uff0c\u4ece\u8bbe\u8ba1\u4e0a\u53ef\u4ee5\u5e76\u53d1\u5730\u8fdb\u884c\u6e32\u67d3\uff0c\u4f46\u8981\u6ce8\u610f\u88ab\u6e32\u67d3\u5bf9\u8c61\u7684\u5e76\u53d1\u5b89\u5168\u6027\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u6a21\u677f\u53ef\u4ee5\u540c\u65f6\u4e3a\u591a\u4e2a\u5ba2\u6237\u7aef\u7684\u54cd\u5e94\u8fdb\u884c\u6e32\u67d3\uff0c\u56e0\u4e3a\u8f93\u51fa\u5bf9\u8c61\uff08Writer\uff09\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u4f46\u662f\u88ab\u6e32\u67d3\u7684\u5bf9\u8c61\u53ef\u80fd\u6709\u5404\u81ea\u7684\u72b6\u6001\u548c\u65f6\u6548\u6027\u3002","title":"\u7279\u6027"},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_3","text":"","title":"\u5982\u4f55\u4f7f\u7528\u6a21\u677f"},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_4","text":"package main import ( \"fmt\" \"text/template\" \"log\" \"net/http\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // \u521b\u5efa\u6a21\u677f\u5bf9\u8c61\u5e76\u89e3\u6790\u6a21\u677f\u5185\u5bb9 tmpl , err := template . New ( \"test\" ). Parse ( \"Hello world!\" ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } // \u8c03\u7528\u6a21\u677f\u5bf9\u8c61\u7684\u6e32\u67d3\u65b9\u6cd5 err = tmpl . Execute ( w , nil ) if err != nil { fmt . Fprintf ( w , \"Excute: %v\" , err ) return } }) log . Println ( \"starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } 1. \u5f15\u5165 text/template \u5305. 2. \u8c03\u7528 template.New \u65b9\u6cd5\u6839\u636e\u7ed9\u5b9a\u7684\u540d\u79f0\u65b0\u5efa\u6a21\u677f, \u8fd4\u56de\u4e00\u4e2a *template.Template \u5bf9\u8c61. 3. *template.Template \u5bf9\u8c61\u7684 Parse \u65b9\u6cd5\u63a5\u53d7\u5b57\u7b26\u4e32\u53c2\u6570(\u6587\u672c\u6a21\u677f\u5185\u5bb9), \u89e3\u6790\u5e76\u8fd4\u56de\u89e3\u6790\u4e2d\u9047\u5230\u7684\u9519\u8bef. 4. \u8c03\u7528 template.Execute \u6e32\u67d3\u6a21\u677f, \u53c2\u6570\u5206\u522b\u4e3a \u8f93\u51fa\u5bf9\u8c61 \u548c \u6307\u5b9a\u6570\u636e\u5bf9\u8c61 , \u5b9e\u73b0\u4e86 io.Writer \u63a5\u53e3\u7684\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8f93\u51fa\u5bf9\u8c61.","title":"\u5b9e\u4f8b"},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_5","text":"package main import ( \"net/http\" \"log\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Reqeust ){ w . Write ([] byte ( r . URL . QUERY (). GET ( \"val\" ))) }) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } HTTP\u534f\u8bae\u901a\u8fc7 GET \u8bf7\u6c42\u83b7\u53d6URL\u53c2\u6570(URL\u4e2d?\u540e\u7684\u503c). \u8c03\u7528 *http.Request \u5bf9\u8c61\u7684 URL.QUERY().GET() \u65b9\u6cd5. package main import ( \"fmt\" \"text/template\" \"log\" \"net/http\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // \u521b\u5efa\u6a21\u677f\u5e76\u89e3\u6790\u5185\u5bb9 tmpl , err := template . New ( \"test\" ). Parse ( \"The value is: {{.}}\" ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } // \u83b7\u53d6URL\u53c2\u6570\u7684\u503c val := r . URL . Query (). Get ( \"val\" ) // \u8c03\u7528\u6a21\u677f\u5bf9\u8c61\u6e32\u67d3\u65b9\u6cd5 err = tmpl . Execute ( w , val ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } \u6a21\u677f\u5185\u5bb9\u4fee\u6539\u6210 The value is : {{.}} , \u7528\u4e86 \u5206\u9694\u7b26 \u5c06 . \u64cd\u4f5c\u7b26\u5305\u88f9\u8d77\u6765, . \u64cd\u4f5c\u7b26\u9ed8\u8ba4\u6307\u5411 \u6839\u5bf9\u8c61 , \u5373 template.Execute \u4e2d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570. \u5728 template.Execute \u65b9\u6cd5\u4e2d\u4f20\u5165 val , . \u64cd\u4f5c\u7b26\u6e32\u67d3\u8be5\u53d8\u91cf val \u5b9e\u73b0\u52a8\u6001\u8f93\u51fa.","title":"\u6e32\u67d3\u53d8\u91cf"},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_6","text":"package main import ( \"fmt\" \"text/template\" \"log\" \"net/http\" \"strconv\" ) // Inventory \u5e93\u5b58 type Inventory struct { SKU string Name string UnitPrice float64 Quantity int64 , } func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( `Inventory SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse:%v\" , err ) return } // \u6839\u636eURL\u67e5\u8be2\u53c2\u6570\u7684\u503c\u521b\u5efaInventory\u5b9e\u4f8b inventory := & Inventory { SKU : r . URL . Query (). Get ( \"sku\" ), Name : r . URL . Query (). Get ( \"name\" ), } // \u6570\u636e\u5904\u7406 inventory . UnitPrice , _ = strconv . ParseFloat ( r . URL . Query (). Get ( \"unitPrice\" ), 64 ) inventory . Quantity , _ = strconv . ParseInt ( r . URL . Query (). Get ( \"quantity\" ), 10 , 64 ) // \u6e32\u67d3 err = tmpl . Execute ( w , inventory ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"start HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } template.Execute \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7c7b\u578b\u4e3a interface{} , \u53ef\u4ee5\u4f20\u5165\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570. func ( t * Template ) Execute ( wr io . Writer , data interface {}) error { if err := t . escape (); err != nil { return err } return t . text . Execute ( wr , data ) } http/template \u4f1a\u6839\u636e\u4f20\u5165\u7684 \u6839\u5bf9\u8c61 \u8fdb\u884c\u5e95\u5c42\u7c7b\u578b\u5206\u6790, \u81ea\u52a8\u8bc6\u522b\u53d8\u91cf, \u6b64\u65f6\u7684 . \u64cd\u4f5c\u7b26\u4ee3\u8868 inventory \u7ed3\u6784\u4f53, \u56e0\u6b64\u53ef\u4ee5\u8c03\u7528 inventory \u7684\u5404\u4e2a\u5c5e\u6027. \u5728 Parse \u7684\u65f6\u5019\u7528\u53cd\u5f15\u53f7``\u5c06\u7ed3\u6784\u4f53\u5305\u8d77\u6765.","title":"\u6e32\u67d3\u590d\u6742\u5bf9\u8c61"},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_7","text":"func ( i * Inventory ) Subtotal () float64 { return i . UnitPrice * float64 ( i . Quantity ) } //******************************// http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( `Inventory SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} Subtotal: {{.Subtotal}} ` )","title":"\u6e32\u67d3\u4e2d\u8c03\u7528\u7ed3\u6784\u4f53\u7684\u65b9\u6cd5"},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#map","text":"package main import ( \"fmt\" \"log\" \"net/http\" \"strconv\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // \u521b\u5efa\u6a21\u677f\u5bf9\u8c61\u5e76\u89e3\u6790\u6a21\u677f\u5185\u5bb9 tmpl , err := template . New ( \"test\" ). Parse ( `Inventory SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } // \u76f4\u63a5\u5c06URL \u67e5\u8be2\u53c2\u6570\u7684\u503c\u8d4b\u503c\u7ed9\u53d8\u91cf sku := r . URL . Query (). Get ( \"sku\" ) name := r . URL . Query (). Get ( \"name\" ) unitPrice , _ := strconv . ParseFloat ( r . URL . Query (). Get ( \"unitPrice\" ), 64 ) quantity , _ := strconv . ParseInt ( r . URL . Query (). Get ( \"quantity\" ), 10 , 64 ) err = tmpl . Execute ( w , map [ string ] interface {}{ \"SKU\" : sku , \"Name\" : name , \"UnitPrice\" : unitPrice , \"Quantity\" : quantity , }) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"Starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \"localhost:8000\" , nil )) } 1. \u4f20\u9012\u7ed9 Execute \u4e00\u4e2a map[string]interface{} \u4f5c\u4e3a\u6a21\u677f\u5bf9\u8c61,\u53ef\u4ee5\u4f20\u5165\u4efb\u610f\u7c7b\u578b\u7684\u503c, \u5c06\u7ed3\u6784\u4f53\u7684\u6240\u6709\u503c\u90fd\u4f20\u5165. 2. \u4e0d\u518d\u9700\u8981\u5355\u72ec\u521b\u5efa\u5b9e\u4f8b, \u53ea\u9700\u8981\u901a\u8fc7 r.URL.Query().Get(valName) \u83b7\u53d6URL\u67e5\u8be2\u53c2\u6570\u7684\u503c. 3. \u5176\u4e2d\u6570\u503c\u9700\u8981\u7528\u5230 strconv.ParseInt/ParseFloat \u8fdb\u884c\u8f6c\u5316","title":"map\u7c7b\u578b\u4f5c\u4e3a\u6a21\u677f\u8ddf\u5bf9\u8c61"},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_8","text":"tmpl , err := template . New ( \"test\" ). Parse ( `Inventory{{/* \u6253\u5370\u53c2\u6570\u7684\u503c */}} SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} ` ) 1. \u901a\u8fc7 {{}} \u53cc\u5c42\u5927\u62ec\u53f7\u548c /**/ \u62ec\u8d77\u6765\u7684\u503c\u662f\u6ce8\u91ca","title":"\u6ce8\u91ca"},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_9","text":"template.New \u65b0\u5efa\u6a21\u677f, \u8fd4\u56de *template.Template \u5bf9\u8c61 \u8c03\u7528 *template.Template \u5bf9\u8c61\u7684 Parse \u65b9\u6cd5\u89e3\u6790\u6a21\u677f \u4f20\u5165\u6a21\u677f\u5b9e\u4f8b \u6570\u636e\u5904\u7406 strconv \u8c03\u7528 *template.Template \u5bf9\u8c61\u7684 Execute \u65b9\u6cd5\u6e32\u67d3\u6a21\u677f","title":"\u6a21\u677f\u6d41\u7a0b"},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/","text":"03\uff1a\u8fdb\u9636\u6a21\u677f\u7528\u6cd5 \u5728\u6a21\u677f\u4e2d\u5b9a\u4e49\u53d8\u91cf package main import ( \"fmt\" \"log\" \"net/http\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{$name := \"Alice\"}} {{$age := 18}} {{$round2 := true}} Name: {{$name}} Age: {{$age}} Round2: {{$round2}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } err = tmpl . Execute ( w , nil ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } \u7528\u7f8e\u5143\u7b26\u53f7 $ \u4f5c\u4e3a\u524d\u7f00\u8868\u793a\u53d8 $name , $age \u53d8\u91cf\u7684\u5b9a\u4e49/\u8d4b\u503c\u5fc5\u987b\u4f7f\u7528 := \u8bed\u6cd5 \u76f4\u63a5\u901a\u8fc7 {{$VarName}} \u8c03\u7528 \u6240\u6709\u53d8\u91cf\u7684\u64cd\u4f5c\u90fd\u5c5e\u4e8e\u6a21\u677f\u8bed\u6cd5\u7684\u4e00\u90e8\u5206,\u9700\u8981\u7528 {{}} \u62ec\u8d77\u6765 \u4fee\u6539\u53d8\u91cf\u7684\u503c ... tmpl , err := template . New ( \"test\" ). Parse ( ` {{$name := \"Alice\"}} {{$age := 18}} {{$round2 := true}} Name: {{$name}} Age: {{$age}} Round2: {{$round2}} {{$name = \"K\"}} Name: {{$name}} ` ) ... \u7c7b\u4f3c\u8d4b\u503c, \u7528 = \u53f7\u76f4\u63a5\u4fee\u6539\u53d8\u91cf\u503c \u5728\u6a21\u677f\u4e2d\u4f7f\u7528\u6761\u4ef6\u5224\u65ad(if) package main import ( \"fmt\" \"log\" \"net/http\" \"strconv\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{if .yIsZero}} \u9664\u6570\u4e0d\u80fd\u4e3a0 {{else}} {{.result}} {{end}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } x , _ := strconv . ParseInt ( r . URL . Query (). Get ( \"x\" ), 10 , 64 ) y , _ := strconv . ParseInt ( r . URL . Query (). Get ( \"y\" ), 10 , 64 ) yIsZero := y == 0 result := 0.0 if ! yIsZero { result = float64 ( x ) / float64 ( y ) } err = tmpl . Execute ( w , map [ string ] interface {}{ \"yIsZero\" : yIsZero , \"result\" : result , }) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) } }) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } \u7528 {{}} \u5c06 if \u903b\u8f91\u8bed\u53e5\u62ec\u8d77\u6765, if \u540e\u9762\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a bool \u503c if \u8bed\u53e5\u5305\u62ec {{if}} , {{else}} , {{end}} \u7b49\u5f0f\u548c\u4e0d\u7b49\u5f0f eq \uff1a\u5f53\u7b49\u5f0f arg1 == arg2 \u6210\u7acb\u65f6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false ne \uff1a\u5f53\u4e0d\u7b49\u5f0f arg1 != arg2 \u6210\u7acb\u65f6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false lt \uff1a\u5f53\u4e0d\u7b49\u5f0f arg1 < arg2 \u6210\u7acb\u65f6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false le \uff1a\u5f53\u4e0d\u7b49\u5f0f arg1 <= arg2 \u6210\u7acb\u65f6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false gt \uff1a\u5f53\u4e0d\u7b49\u5f0f arg1 > arg2 \u6210\u7acb\u65f6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false ge \uff1a\u5f53\u4e0d\u7b49\u5f0f arg1 >= arg2 \u6210\u7acb\u65f6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false package main import ( \"fmt\" \"log\" \"net/http\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{$name1 := \"alice\"}} {{$name2 := \"bob\"}} {{$age1 := 18}} {{$age2 := 23}} {{if eq $age1 $age2}} \u5e74\u9f84\u76f8\u540c {{else}} \u5e74\u9f84\u4e0d\u540c {{end}} {{if ne $name1 $name2}} \u540d\u5b57\u4e0d\u76f8\u540c {{end}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } err = tmpl . Execute ( w , nil ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"Starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \"localhost:8000\" , nil )) } \u8fed\u4ee3\u64cd\u4f5c(range) Go \u8bed\u8a00\u4e2d\u4e00\u822c\u6765\u8bf4\u6709\u4e09\u79cd\u7c7b\u578b\u53ef\u4ee5\u8fdb\u884c\u8fed\u4ee3\u64cd\u4f5c\uff0c\u6570\u7ec4\uff08Array\uff09\u3001\u5207\u7247\uff08Slice\uff09\u548c map \u7c7b\u578b package main import ( \"fmt\" \"log\" \"net/http\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{range $name := .Names}} {{$name}} {{end}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } err = tmpl . Execute ( w , map [ string ] interface {}{ \"Names\" : [] string { \"Alice\" , \"Bob\" , \"Carol\" , \"David\" , }, }) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"Starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \"localhost:8000\" , nil )) } \u83b7\u5f97\u8fed\u4ee3\u5143\u7d20\u7684\u7d22\u5f15 ... func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // \u521b\u5efa\u6a21\u677f\u5bf9\u8c61\u5e76\u89e3\u6790\u6a21\u677f\u5185\u5bb9 tmpl , err := template . New ( \"test\" ). Parse ( ` {{range $i, $name := .Names}} {{$i}}. {{$name}} {{end}} ` ) ... map\u7c7b\u578b ... func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // \u521b\u5efa\u6a21\u677f\u5bf9\u8c61\u5e76\u89e3\u6790\u6a21\u677f\u5185\u5bb9 tmpl , err := template . New ( \"test\" ). Parse ( ` {{range $name, $val := .}} {{$name}}: {{$val}} {{end}} ` ) ... // \u8c03\u7528\u6a21\u677f\u5bf9\u8c61\u7684\u6e32\u67d3\u65b9\u6cd5 err = tmpl . Execute ( w , map [ string ] interface {}{ \"Names\" : [] string { \"Alice\" , \"Bob\" , \"Carol\" , \"David\" , }, \"Numbers\" : [] int { 1 , 3 , 5 , 7 }, }) ... } with tmpl , err := template . New ( \"test\" ). Parse ( `Inventory {{with .Inventory}} SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} {{end}} ` ) //****************************// err = tmpl . Execute ( w , map [ string ] interface {}{ \"Inventory\" : Inventory { // \u7c7b\u578b SKU : \"11000\" , Name : \"Phone\" , UnitPrice : 699.99 , Quantity : 666 , }, }) 1. \u7528 {{with}} \u6765\u66ff\u4ee3\u76f8\u5173\u5b9e\u4f8b\" Inventory \". \u7a7a\u767d\u7b26\u53f7\u5904\u7406 {{- \u8868\u793a\u5254\u9664\u6a21\u677f\u5185\u5bb9 \u5de6\u4fa7 \u7684\u6240\u6709\u7a7a\u767d\u7b26\u53f7, -}} \u8868\u793a\u5254\u9664\u6a21\u677f\u5185\u5bb9 \u53f3\u4fa7 \u7684\u6240\u6709\u7a7a\u767d\u7b26\u53f7. ... func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // \u521b\u5efa\u6a21\u677f\u5bf9\u8c61\u5e76\u89e3\u6790\u6a21\u677f\u5185\u5bb9 tmpl , err := template . New ( \"test\" ). Parse ( `Inventory {{- with .Inventory}} SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} {{- end}} ` ) ...","title":"03\uff1a\u8fdb\u9636\u6a21\u677f\u7528\u6cd5"},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#03","text":"","title":"03\uff1a\u8fdb\u9636\u6a21\u677f\u7528\u6cd5"},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#_1","text":"package main import ( \"fmt\" \"log\" \"net/http\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{$name := \"Alice\"}} {{$age := 18}} {{$round2 := true}} Name: {{$name}} Age: {{$age}} Round2: {{$round2}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } err = tmpl . Execute ( w , nil ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } \u7528\u7f8e\u5143\u7b26\u53f7 $ \u4f5c\u4e3a\u524d\u7f00\u8868\u793a\u53d8 $name , $age \u53d8\u91cf\u7684\u5b9a\u4e49/\u8d4b\u503c\u5fc5\u987b\u4f7f\u7528 := \u8bed\u6cd5 \u76f4\u63a5\u901a\u8fc7 {{$VarName}} \u8c03\u7528 \u6240\u6709\u53d8\u91cf\u7684\u64cd\u4f5c\u90fd\u5c5e\u4e8e\u6a21\u677f\u8bed\u6cd5\u7684\u4e00\u90e8\u5206,\u9700\u8981\u7528 {{}} \u62ec\u8d77\u6765","title":"\u5728\u6a21\u677f\u4e2d\u5b9a\u4e49\u53d8\u91cf"},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#_2","text":"... tmpl , err := template . New ( \"test\" ). Parse ( ` {{$name := \"Alice\"}} {{$age := 18}} {{$round2 := true}} Name: {{$name}} Age: {{$age}} Round2: {{$round2}} {{$name = \"K\"}} Name: {{$name}} ` ) ... \u7c7b\u4f3c\u8d4b\u503c, \u7528 = \u53f7\u76f4\u63a5\u4fee\u6539\u53d8\u91cf\u503c","title":"\u4fee\u6539\u53d8\u91cf\u7684\u503c"},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#if","text":"package main import ( \"fmt\" \"log\" \"net/http\" \"strconv\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{if .yIsZero}} \u9664\u6570\u4e0d\u80fd\u4e3a0 {{else}} {{.result}} {{end}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } x , _ := strconv . ParseInt ( r . URL . Query (). Get ( \"x\" ), 10 , 64 ) y , _ := strconv . ParseInt ( r . URL . Query (). Get ( \"y\" ), 10 , 64 ) yIsZero := y == 0 result := 0.0 if ! yIsZero { result = float64 ( x ) / float64 ( y ) } err = tmpl . Execute ( w , map [ string ] interface {}{ \"yIsZero\" : yIsZero , \"result\" : result , }) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) } }) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } \u7528 {{}} \u5c06 if \u903b\u8f91\u8bed\u53e5\u62ec\u8d77\u6765, if \u540e\u9762\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a bool \u503c if \u8bed\u53e5\u5305\u62ec {{if}} , {{else}} , {{end}}","title":"\u5728\u6a21\u677f\u4e2d\u4f7f\u7528\u6761\u4ef6\u5224\u65ad(if)"},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#_3","text":"eq \uff1a\u5f53\u7b49\u5f0f arg1 == arg2 \u6210\u7acb\u65f6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false ne \uff1a\u5f53\u4e0d\u7b49\u5f0f arg1 != arg2 \u6210\u7acb\u65f6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false lt \uff1a\u5f53\u4e0d\u7b49\u5f0f arg1 < arg2 \u6210\u7acb\u65f6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false le \uff1a\u5f53\u4e0d\u7b49\u5f0f arg1 <= arg2 \u6210\u7acb\u65f6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false gt \uff1a\u5f53\u4e0d\u7b49\u5f0f arg1 > arg2 \u6210\u7acb\u65f6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false ge \uff1a\u5f53\u4e0d\u7b49\u5f0f arg1 >= arg2 \u6210\u7acb\u65f6\uff0c\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false package main import ( \"fmt\" \"log\" \"net/http\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{$name1 := \"alice\"}} {{$name2 := \"bob\"}} {{$age1 := 18}} {{$age2 := 23}} {{if eq $age1 $age2}} \u5e74\u9f84\u76f8\u540c {{else}} \u5e74\u9f84\u4e0d\u540c {{end}} {{if ne $name1 $name2}} \u540d\u5b57\u4e0d\u76f8\u540c {{end}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } err = tmpl . Execute ( w , nil ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"Starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \"localhost:8000\" , nil )) }","title":"\u7b49\u5f0f\u548c\u4e0d\u7b49\u5f0f"},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#range","text":"Go \u8bed\u8a00\u4e2d\u4e00\u822c\u6765\u8bf4\u6709\u4e09\u79cd\u7c7b\u578b\u53ef\u4ee5\u8fdb\u884c\u8fed\u4ee3\u64cd\u4f5c\uff0c\u6570\u7ec4\uff08Array\uff09\u3001\u5207\u7247\uff08Slice\uff09\u548c map \u7c7b\u578b package main import ( \"fmt\" \"log\" \"net/http\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{range $name := .Names}} {{$name}} {{end}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } err = tmpl . Execute ( w , map [ string ] interface {}{ \"Names\" : [] string { \"Alice\" , \"Bob\" , \"Carol\" , \"David\" , }, }) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"Starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \"localhost:8000\" , nil )) }","title":"\u8fed\u4ee3\u64cd\u4f5c(range)"},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#_4","text":"... func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // \u521b\u5efa\u6a21\u677f\u5bf9\u8c61\u5e76\u89e3\u6790\u6a21\u677f\u5185\u5bb9 tmpl , err := template . New ( \"test\" ). Parse ( ` {{range $i, $name := .Names}} {{$i}}. {{$name}} {{end}} ` ) ...","title":"\u83b7\u5f97\u8fed\u4ee3\u5143\u7d20\u7684\u7d22\u5f15"},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#map","text":"... func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // \u521b\u5efa\u6a21\u677f\u5bf9\u8c61\u5e76\u89e3\u6790\u6a21\u677f\u5185\u5bb9 tmpl , err := template . New ( \"test\" ). Parse ( ` {{range $name, $val := .}} {{$name}}: {{$val}} {{end}} ` ) ... // \u8c03\u7528\u6a21\u677f\u5bf9\u8c61\u7684\u6e32\u67d3\u65b9\u6cd5 err = tmpl . Execute ( w , map [ string ] interface {}{ \"Names\" : [] string { \"Alice\" , \"Bob\" , \"Carol\" , \"David\" , }, \"Numbers\" : [] int { 1 , 3 , 5 , 7 }, }) ... }","title":"map\u7c7b\u578b"},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#with","text":"tmpl , err := template . New ( \"test\" ). Parse ( `Inventory {{with .Inventory}} SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} {{end}} ` ) //****************************// err = tmpl . Execute ( w , map [ string ] interface {}{ \"Inventory\" : Inventory { // \u7c7b\u578b SKU : \"11000\" , Name : \"Phone\" , UnitPrice : 699.99 , Quantity : 666 , }, }) 1. \u7528 {{with}} \u6765\u66ff\u4ee3\u76f8\u5173\u5b9e\u4f8b\" Inventory \".","title":"with"},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#_5","text":"{{- \u8868\u793a\u5254\u9664\u6a21\u677f\u5185\u5bb9 \u5de6\u4fa7 \u7684\u6240\u6709\u7a7a\u767d\u7b26\u53f7, -}} \u8868\u793a\u5254\u9664\u6a21\u677f\u5185\u5bb9 \u53f3\u4fa7 \u7684\u6240\u6709\u7a7a\u767d\u7b26\u53f7. ... func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // \u521b\u5efa\u6a21\u677f\u5bf9\u8c61\u5e76\u89e3\u6790\u6a21\u677f\u5185\u5bb9 tmpl , err := template . New ( \"test\" ). Parse ( `Inventory {{- with .Inventory}} SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} {{- end}} ` ) ...","title":"\u7a7a\u767d\u7b26\u53f7\u5904\u7406"},{"location":"Golang/Project/go-gin-example/01 Config/","text":"go-gin-example 01\uff1a\u914d\u7f6e Golang \u73af\u5883\u5b89\u88c5\u914d\u7f6e \u4e0b\u8f7d \u914d\u7f6e\u73af\u5883\u53d8\u91cf \u6587\u4ef6\u914d\u7f6e $ mkdir go-gin-example && cd go-gin-example $ go env -w GO111MODULE = on $ go env -w GOPROXY = https://goproxy.cn,direct $ go mod init [ MODULE_PATH ] $ ls > go.mod mkdir go-gin-example && cd go-gin-example \uff1a\u521b\u5efa\u5e76\u5207\u6362\u5230\u9879\u76ee\u76ee\u5f55\u3002 go env -w GO111MUDOLE=on \uff1a\u6253\u5f00Go module \u5f00\u5173\u3002 go env -w GOPROXY=... \uff1a\u8bbe\u7f6eGOPROXY\u4ee3\u7406\uff0c\u7b2c\u4e00\u4e2a\u4e3a\u4e03\u725bGo\u4ee3\u7406\uff0c direct \u4e3aGo\u5728\u62c9\u53d6\u6a21\u5757\u9047\u5230\u9519\u8bef\u4f1a\u56de\u6e90\u5230\u539f\u6a21\u5757\u7248\u672c\u7684\u6e90\u5730\u5740\u53bb\u6293\u53d6\u3002 go mod init [Module_Path] \uff1a\u521d\u59cb\u5316Go module\uff0c\u4ea7\u751fgo.mod\u6587\u4ef6 module go-gin-example go 1 .12 GOMODULE\u57fa\u7840\u4f7f\u7528 go get \uff1a\u62c9\u53d6\u65b0\u7684\u4f9d\u8d56 \u62c9\u53d6\u6700\u65b0\u7684\u7248\u672c\uff1a go get golang/org/x/text@lastest \u62c9\u53d6 master \u5206\u652f\u7684\u6700\u65b0commit\uff1a go get golang.org/x/text@master go tidy \uff1a\u6574\u7406\u4f9d","title":"go-gin-example 01\uff1a\u914d\u7f6e"},{"location":"Golang/Project/go-gin-example/01 Config/#go-gin-example-01","text":"","title":"go-gin-example 01\uff1a\u914d\u7f6e"},{"location":"Golang/Project/go-gin-example/01 Config/#golang","text":"","title":"Golang \u73af\u5883\u5b89\u88c5\u914d\u7f6e"},{"location":"Golang/Project/go-gin-example/01 Config/#_1","text":"","title":"\u4e0b\u8f7d"},{"location":"Golang/Project/go-gin-example/01 Config/#_2","text":"","title":"\u914d\u7f6e\u73af\u5883\u53d8\u91cf"},{"location":"Golang/Project/go-gin-example/01 Config/#_3","text":"$ mkdir go-gin-example && cd go-gin-example $ go env -w GO111MODULE = on $ go env -w GOPROXY = https://goproxy.cn,direct $ go mod init [ MODULE_PATH ] $ ls > go.mod mkdir go-gin-example && cd go-gin-example \uff1a\u521b\u5efa\u5e76\u5207\u6362\u5230\u9879\u76ee\u76ee\u5f55\u3002 go env -w GO111MUDOLE=on \uff1a\u6253\u5f00Go module \u5f00\u5173\u3002 go env -w GOPROXY=... \uff1a\u8bbe\u7f6eGOPROXY\u4ee3\u7406\uff0c\u7b2c\u4e00\u4e2a\u4e3a\u4e03\u725bGo\u4ee3\u7406\uff0c direct \u4e3aGo\u5728\u62c9\u53d6\u6a21\u5757\u9047\u5230\u9519\u8bef\u4f1a\u56de\u6e90\u5230\u539f\u6a21\u5757\u7248\u672c\u7684\u6e90\u5730\u5740\u53bb\u6293\u53d6\u3002 go mod init [Module_Path] \uff1a\u521d\u59cb\u5316Go module\uff0c\u4ea7\u751fgo.mod\u6587\u4ef6 module go-gin-example go 1 .12","title":"\u6587\u4ef6\u914d\u7f6e"},{"location":"Golang/Project/go-gin-example/01 Config/#gomodule","text":"go get \uff1a\u62c9\u53d6\u65b0\u7684\u4f9d\u8d56 \u62c9\u53d6\u6700\u65b0\u7684\u7248\u672c\uff1a go get golang/org/x/text@lastest \u62c9\u53d6 master \u5206\u652f\u7684\u6700\u65b0commit\uff1a go get golang.org/x/text@master go tidy \uff1a\u6574\u7406\u4f9d","title":"GOMODULE\u57fa\u7840\u4f7f\u7528"},{"location":"Golang/Project/go-gin-example/02 API-1/","text":"go-gin-example 02\uff1aAPI-1 \u521d\u59cb\u8bbe\u7f6e \u9879\u76ee\u76ee\u5f55 go-gin-example/ \u251c\u2500conf \u251c\u2500middleware \u251c\u2500models \u251c\u2500pkg \u251c\u2500routers \u2514\u2500runtime conf\uff1a\u7528\u4e8e\u5b58\u50a8\u914d\u7f6e\u6587\u4ef6 middleware\uff1a\u5e94\u7528\u4e2d\u95f4\u4ef6 models\uff1a\u5e94\u7528\u6570\u636e\u5e93\u6a21\u578b pkg\uff1a\u7b2c\u4e09\u65b9\u5305 routers\uff1a\u8def\u7531\u903b\u8f91\u5904\u7406 runtime\uff1a\u5e94\u7528\u8fd0\u884c\u65f6\u6570\u636e \u6dfb\u52a0Go Modules Replace\u914d\u7f6e\u672c\u5730\u6a21\u5757\u8def\u5f84 \uff08\u597d\u50cf\u4e0d\u5fc5\u8981\uff09 module go - gin - example go 1.12 require ( \u00b7\u00b7\u00b7 ) replace ( . / go - gin - example / conf => . / go - gin - example / pkg / conf . / go - gin - example / middleware => . / go - gin - example / middleware . / go - gin - example / models => . / go - gin - example / models . / go - gin - example / pkg / e => . / go - gin - example / pkg / e . / go - gin - example / pkg / setting => . / go - gin - example / pkg / setting . / go - gin - example / pkg / util => . / go - gin - example / pkg / util . / go - gin - example / routers => . / go - gin - example / routers ) # \u7528 replace \u5c06\u5176\u6307\u5b9a\u8bfb\u53d6\u672c\u5730\u7684\u6a21\u5757\u8def\u5f84 \uff0c \u8fd9\u6837\u5b50\u5c31\u53ef\u4ee5\u89e3\u51b3\u672c\u5730\u6a21\u5757\u8bfb\u53d6\u7684\u95ee\u9898 \u4f7f\u7528ini\u914d\u7f6e\u6587\u4ef6\u5e93/\u7f16\u5199\u9879\u76ee\u914d\u7f6e\u5305 \u5e94\u7528\u914d\u7f6e\u6587\u4ef6 \u5c06\u516c\u5171\u914d\u7f6e\u90e8\u5206\u63d0\u53d6\u51fa\u6765\uff0c\u5199\u6210\u4e13\u95e8\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u7edf\u4e00\u5199\u6570\u636e\u5e93\u73af\u5883\u3001\u670d\u52a1\u5668\u73af\u5883\u7b49\u3002 \u5728 ./conf \u76ee\u5f55\u4e0b\u65b0\u5efa app.ini \u6587\u4ef6 \u5b9a\u4e49RUN_MODE \u5b9a\u4e49\u6570\u636e\u5e93\u7aef\u53e3\u3001\u8d26\u53f7\u3001\u8868\u683c\u7b49 \u5b9a\u4e49\u516c\u5171\u53c2\u6570\uff1a\u5206\u9875 \u5b9a\u4e49\u670d\u52a1\u5668\u7aef\u53e3\u3001TIMEOUT\u65f6\u95f4\u7b49 # debug or release RUN_MODE = debug [app] PAGE_SIZE = 10 JWT_SECRET = 23347$040412 [server] HTTP_PORT = 8000 READ_TIMEOUT = 60 WRITE_TIMEOUT = 60 [database] TYPE = mysql USER = root # \u6570\u636e\u5e93\u8d26\u53f7 PASSWORD = root # \u6570\u636e\u5e93\u5bc6\u7801 HOST = 127.0.0.1:3306 # \u6570\u636e\u5e93IP:\u6570\u636e\u5e93\u7aef\u53e3\u53f7 NAME = blog TABLE_PREFIX = blog_ \u8c03\u7528\u914d\u7f6e\u7684setting\u6a21\u5757 \u8d1f\u8d23\u8c03\u7528app.ini go get -u github.com/go-ini/ini \u5728 ./pkg/setting \u76ee\u5f55\u4e0b\u65b0\u5efa setting.go \u6587\u4ef6 package setting import ( \"log\" \"time\" \"github.com/go-ini/ini\" ) var ( Cfg * ini . File // Cfg\u4e3aini\u6587\u4ef6\u7c7b\u578b // \u58f0\u660eapp.ini\u6587\u4ef6\u5199\u597d\u7684\u5404\u79cd\u914d\u7f6e\u7684\u7c7b\u578b RunMode string HTTPPort int ReadTimeout time . Duration WriteTimeout time . Duration PageSize int JwtSecret string ) func init () { var err error // \u52a0\u8f7d\u521d\u59cb\u5316\u6587\u4ef6 Cfg , err = ini . Load ( \"conf/app.ini\" ) if err != nil { log . Fatalf ( \"Fail to parse 'conf/app.ini`: %v\" , err ) } LoadBase () LoadServer () LoadApp () } // \u52a0\u8f7d\u57fa\u7840\u8bbe\u7f6e func LoadBase () { // \u8bbe\u7f6eRUN_MODE\u4e3a'debug' RunMode = Cfg . Section ( \"\" ). Key ( \"RUN_MODE\" ). MustString ( \"debug\" ) } // LoadServer \u52a0\u8f7d\u670d\u52a1\u5668\u914d\u7f6e func LoadServer () { // \u83b7\u53d6'server'\u7684section\u4fe1\u606f // \u8fd9\u91cc\u7684section\u5305\u542b'server'\u7684\u5404\u79cd\u4fe1\u606f, \u7531./config/app,ini\u914d\u7f6e\u6587\u4ef6\u63d0\u4f9b sec , err := Cfg . GetSection ( \"server\" ) if err != nil { log . Fatalf ( \"Fail to get section 'server':%v\" , err ) } RunMode = Cfg . Section ( \"\" ). Key ( \"RUN_MODE\" ). MustString ( \"debug\" ) // \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 HTTPPort = sec . Key ( \"HTTP_PORT\" ). MustInt ( 8000 ) ReadTimeout = time . Duration ( sec . Key ( \"READ_TIMEOUT\" ). MustInt ( 60 )) * time . Second WriteTimeout = time . Duration ( sec . Key ( \"WRITE_TIMEOUT\" ). MustInt ( 60 )) * time . Second } // LoadApp \u52a0\u8f7dAPP\u914d\u7f6e func LoadApp () { // \u83b7\u53d6./config/app.ini\u914d\u7f6e\u6587\u4ef6\u7684APP\u914d\u7f6e sec , err := Cfg . GetSection ( \"app\" ) if err != nil { log . Fatalf ( \"Fail to get section 'app':%v\" , err ) } JwtSecret = sec . Key ( \"JWT_SECRET\" ). MustString ( \"!@)*#)!@U#@*!@!)\" ) PageSize = sec . Key ( \"PAGE_SIZE\" ). MustInt ( 10 ) } API\u9519\u8bef\u7801\u5305 \u5efa\u7acb\u9519\u8bef\u7801e\u6a21\u5757 \u5728 ./pkg/e \u76ee\u5f55\u4e0b\u65b0\u5efa code.go \u548c msg.go \u6587\u4ef6 code.go package e // API\u9519\u8bef\u4ee3\u7801 const ( SUCCESS = 200 ERROR = 500 INVALID_PARAMS = 400 ERROR_EXIST_TAG = 10001 ERROR_NOT_EXIST_TAG = 10002 ERROR_NOT_EXIST_ARTICLE = 10003 ERROR_AUTH_CHECK_TOKEN_FAIL = 20001 ERROR_AUTH_CHECK_TOKEN_TIMEOUT = 20002 ERROR_AUTH_TOKEN = 20003 ERROR_AUTH = 20004 ) msg.go package e //msg.go // MsgFlags \u9519\u8bef\u4fe1\u606f var MsgFlags = map [ int ] string { SUCCESS : \"ok\" , ERROR : \"fail\" , INVALID_PARAMS : \"\u8bf7\u6c42\u53c2\u6570\u9519\u8bef\" , ERROR_EXIST_TAG : \"\u5df2\u5b58\u5728\u8be5\u6807\u7b7e\u540d\u79f0\" , ERROR_NOT_EXIST_TAG : \"\u8be5\u6807\u7b7e\u4e0d\u5b58\u5728\" , ERROR_NOT_EXIST_ARTICLE : \"\u8be5\u6587\u7ae0\u4e0d\u5b58\u5728\" , ERROR_AUTH_CHECK_TOKEN_FAIL : \"Token\u9274\u6743\u5931\u8d25\" , ERROR_AUTH_CHECK_TOKEN_TIMEOUT : \"Token\u9274\u6743\u8d85\u65f6\" , ERROR_AUTH_TOKEN : \"Token\u751f\u6210\u5931\u8d25\" , ERROR_AUTH : \"Token\u9519\u8bef\" , } // GetMsg \u83b7\u53d6\u9519\u8bef\u4fe1\u606f func GetMsg ( code int ) string { msg , ok := MsgFlags [ code ] if ok { return msg } return MsgFlags [ ERROR ] } \u5de5\u5177\u5305 \u516c\u5171\u65b9\u6cd5\uff1a\u4f8b\u5982\u83b7\u53d6\u5206\u9875\u9875\u7801\u7b49 go get -u github.com/unknwon/com \u5728 ./pkg/util \u76ee\u5f55\u4e0b\u65b0\u5efa pagination.go \u6587\u4ef6 package util import ( setting \"go-gin-example/pkg/settings\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetPage \u83b7\u53d6page\u6570\u91cf func GetPage ( c * gin . Context ) int { result := 0 // page\u8f6c\u6362\u4e3aint page , _ := com . StrTo ( c . Query ( \"page\" )). Int () if page > 0 { result = ( page - 1 ) * setting . PageSize } return result } \u6570\u636e\u5e93\u6a21\u578b\u6620\u5c04 \u901a\u8fc7gorm\u5c06golang\u7ed3\u6784\u4f53\u6620\u5c04\u5230\u6570\u636e\u5e93\u4e2d\u81ea\u52a8\u751f\u6210\u6a21\u578b go get -u github.com/jinzhu/gorm go get -u github.com/go-sql-driver/mysql \u5728 ./models \u76ee\u5f55\u4e0b\u65b0\u5efa models.go \u6587\u4ef6\u3002 package models import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"log\" \"github.com/jinzhu/gorm\" ) var db * gorm . DB // Model \u6570\u636e\u5e93\u6a21\u578b type Model struct { ID int `gorm:\"primary_key\" json:id` CreatedOn int `json:\"created_on\"` ModifiedOn int `json:\"modified_on\"` } func init () { var ( err error dbType , dbName , user , password , host , tablePrefix string ) // \u83b7\u53d6\u914d\u7f6e\u6587\u4ef6\u7684\u6570\u636e\u5e93\u914d\u7f6e sec , err := setting . Cfg . GetSection ( \"database\" ) if err != nil { log . Fatal ( 2 , \"Fail to get get scetion `database`:%v\" , err ) } dbType = sec . Key ( \"TYPE\" ). String () dbName = sec . Key ( \"NAME\" ). String () user = sec . Key ( \"USER\" ). String () password = sec . Key ( \"PASSWORD\" ). String () host = sec . Key ( \"HOST\" ). String () tablePrefix = sec . Key ( \"TABLE_PREFIX\" ). String () db , err = gorm . Open ( dbtype , fmt . Sprintf ( \"%s:%s@tcp(%s)/%s?charset=utf8&parseTime=True&loc=Local\" , user , password , dbName )) if err != nil { log . Println ( err ) } gorm . DefaultTableNameHandler = func ( db * gorm . DB , defaultTableName string ) string { return tablePrefix + defaultTableName } db . SingularTable ( true ) db . LogMode ( true ) db . DB (). SetMaxIdleConns ( 10 ) db . DB (). SetMaxOpenConns ( 100 ) } // CloseDB \u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5 func CloseDB () { defer db . Close () } Demo \u5b9e\u4f8b\u7a0b\u5e8f \u5728 ./ \u76ee\u5f55\u4e0b\u65b0\u5efa main.go \u6587\u4ef6 package main import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"net/http\" \"github.com/gin-gonic/gin\" ) func main () { router := gin . Default () router . GET ( \"/test\" , func ( c * gin . Context ) { c . JSON ( 200 , gin . H { \"message\" : \"test\" , }) }) s := & http . Server { Addr : fmt . Sprintf ( \":%d\" , setting . HTTPPort ), Handler : router , ReadTimeout : setting . ReadTimeout , WriteTimeout : setting . WriteTimeout , MaxHeaderBytes : 1 << 20 , } // \u8c03\u7528\u5728&http.Server\u4e2d\u8bbe\u7f6e\u7684\u53c2\u6570,\u56e0\u6b64\u4e0a\u9762\u8981\u7528&,\u8981\u6539\u53d8\u53c2\u6570\u7684\u503c s . ListenAndServe () } \u6d4f\u89c8\u5668\u8f93\u5165 localhost\uff1a8000/test \u8fd4\u56de {\"message\":\"test\"} \u5219\u6210\u529f \u4ecemain.go\u4e2d\u5206\u79bb\u8def\u7531 \u5728 ./routers \u76ee\u5f55\u4e0b\u65b0\u5efa router.go \u6587\u4ef6 package routers import ( setting \"go-gin-example/pkg/settings\" \"github.com/gin-gonic/gin\" ) func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) r . GET ( \"/test\" , func ( c * gin . Context ) { c . JSON ( 200 , gin . H { \"message\" : \"test\" , }) }) return r } \u4fee\u6539 main.go \u6587\u4ef6 package main import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/routers\" \"net/http\" ) func main () { router := routers . InitRouter () s := & http . Server { Addr : fmt . Sprintf ( \":%d\" , setting . HTTPPort ), Handler : router , ReadTimeout : setting . ReadTimeout , WriteTimeout : setting . WriteTimeout , MaxHeaderBytes : 1 << 20 , } s . ListenAndServer () } \u5f53\u524d\u76ee\u5f55\u7ed3\u6784 go-gin-example/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 app.ini \u251c\u2500\u2500 main.go \u251c\u2500\u2500 middleware \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 models.go \u251c\u2500\u2500 pkg \u2502 \u251c\u2500\u2500 e \u2502 \u2502 \u251c\u2500\u2500 code.go \u2502 \u2502 \u2514\u2500\u2500 msg.go \u2502 \u251c\u2500\u2500 setting \u2502 \u2502 \u2514\u2500\u2500 setting.go \u2502 \u2514\u2500\u2500 util \u2502 \u2514\u2500\u2500 pagination.go \u251c\u2500\u2500 routers \u2502 \u2514\u2500\u2500 router.go \u251c\u2500\u2500 runtime","title":"go-gin-example 02\uff1aAPI-1"},{"location":"Golang/Project/go-gin-example/02 API-1/#go-gin-example-02api-1","text":"\u521d\u59cb\u8bbe\u7f6e","title":"go-gin-example 02\uff1aAPI-1"},{"location":"Golang/Project/go-gin-example/02 API-1/#_1","text":"go-gin-example/ \u251c\u2500conf \u251c\u2500middleware \u251c\u2500models \u251c\u2500pkg \u251c\u2500routers \u2514\u2500runtime conf\uff1a\u7528\u4e8e\u5b58\u50a8\u914d\u7f6e\u6587\u4ef6 middleware\uff1a\u5e94\u7528\u4e2d\u95f4\u4ef6 models\uff1a\u5e94\u7528\u6570\u636e\u5e93\u6a21\u578b pkg\uff1a\u7b2c\u4e09\u65b9\u5305 routers\uff1a\u8def\u7531\u903b\u8f91\u5904\u7406 runtime\uff1a\u5e94\u7528\u8fd0\u884c\u65f6\u6570\u636e","title":"\u9879\u76ee\u76ee\u5f55"},{"location":"Golang/Project/go-gin-example/02 API-1/#go-modules-replace","text":"module go - gin - example go 1.12 require ( \u00b7\u00b7\u00b7 ) replace ( . / go - gin - example / conf => . / go - gin - example / pkg / conf . / go - gin - example / middleware => . / go - gin - example / middleware . / go - gin - example / models => . / go - gin - example / models . / go - gin - example / pkg / e => . / go - gin - example / pkg / e . / go - gin - example / pkg / setting => . / go - gin - example / pkg / setting . / go - gin - example / pkg / util => . / go - gin - example / pkg / util . / go - gin - example / routers => . / go - gin - example / routers ) # \u7528 replace \u5c06\u5176\u6307\u5b9a\u8bfb\u53d6\u672c\u5730\u7684\u6a21\u5757\u8def\u5f84 \uff0c \u8fd9\u6837\u5b50\u5c31\u53ef\u4ee5\u89e3\u51b3\u672c\u5730\u6a21\u5757\u8bfb\u53d6\u7684\u95ee\u9898","title":"\u6dfb\u52a0Go Modules Replace\u914d\u7f6e\u672c\u5730\u6a21\u5757\u8def\u5f84 \uff08\u597d\u50cf\u4e0d\u5fc5\u8981\uff09"},{"location":"Golang/Project/go-gin-example/02 API-1/#ini","text":"","title":"\u4f7f\u7528ini\u914d\u7f6e\u6587\u4ef6\u5e93/\u7f16\u5199\u9879\u76ee\u914d\u7f6e\u5305"},{"location":"Golang/Project/go-gin-example/02 API-1/#_2","text":"\u5c06\u516c\u5171\u914d\u7f6e\u90e8\u5206\u63d0\u53d6\u51fa\u6765\uff0c\u5199\u6210\u4e13\u95e8\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u7edf\u4e00\u5199\u6570\u636e\u5e93\u73af\u5883\u3001\u670d\u52a1\u5668\u73af\u5883\u7b49\u3002 \u5728 ./conf \u76ee\u5f55\u4e0b\u65b0\u5efa app.ini \u6587\u4ef6 \u5b9a\u4e49RUN_MODE \u5b9a\u4e49\u6570\u636e\u5e93\u7aef\u53e3\u3001\u8d26\u53f7\u3001\u8868\u683c\u7b49 \u5b9a\u4e49\u516c\u5171\u53c2\u6570\uff1a\u5206\u9875 \u5b9a\u4e49\u670d\u52a1\u5668\u7aef\u53e3\u3001TIMEOUT\u65f6\u95f4\u7b49 # debug or release RUN_MODE = debug [app] PAGE_SIZE = 10 JWT_SECRET = 23347$040412 [server] HTTP_PORT = 8000 READ_TIMEOUT = 60 WRITE_TIMEOUT = 60 [database] TYPE = mysql USER = root # \u6570\u636e\u5e93\u8d26\u53f7 PASSWORD = root # \u6570\u636e\u5e93\u5bc6\u7801 HOST = 127.0.0.1:3306 # \u6570\u636e\u5e93IP:\u6570\u636e\u5e93\u7aef\u53e3\u53f7 NAME = blog TABLE_PREFIX = blog_","title":"\u5e94\u7528\u914d\u7f6e\u6587\u4ef6"},{"location":"Golang/Project/go-gin-example/02 API-1/#setting","text":"\u8d1f\u8d23\u8c03\u7528app.ini go get -u github.com/go-ini/ini \u5728 ./pkg/setting \u76ee\u5f55\u4e0b\u65b0\u5efa setting.go \u6587\u4ef6 package setting import ( \"log\" \"time\" \"github.com/go-ini/ini\" ) var ( Cfg * ini . File // Cfg\u4e3aini\u6587\u4ef6\u7c7b\u578b // \u58f0\u660eapp.ini\u6587\u4ef6\u5199\u597d\u7684\u5404\u79cd\u914d\u7f6e\u7684\u7c7b\u578b RunMode string HTTPPort int ReadTimeout time . Duration WriteTimeout time . Duration PageSize int JwtSecret string ) func init () { var err error // \u52a0\u8f7d\u521d\u59cb\u5316\u6587\u4ef6 Cfg , err = ini . Load ( \"conf/app.ini\" ) if err != nil { log . Fatalf ( \"Fail to parse 'conf/app.ini`: %v\" , err ) } LoadBase () LoadServer () LoadApp () } // \u52a0\u8f7d\u57fa\u7840\u8bbe\u7f6e func LoadBase () { // \u8bbe\u7f6eRUN_MODE\u4e3a'debug' RunMode = Cfg . Section ( \"\" ). Key ( \"RUN_MODE\" ). MustString ( \"debug\" ) } // LoadServer \u52a0\u8f7d\u670d\u52a1\u5668\u914d\u7f6e func LoadServer () { // \u83b7\u53d6'server'\u7684section\u4fe1\u606f // \u8fd9\u91cc\u7684section\u5305\u542b'server'\u7684\u5404\u79cd\u4fe1\u606f, \u7531./config/app,ini\u914d\u7f6e\u6587\u4ef6\u63d0\u4f9b sec , err := Cfg . GetSection ( \"server\" ) if err != nil { log . Fatalf ( \"Fail to get section 'server':%v\" , err ) } RunMode = Cfg . Section ( \"\" ). Key ( \"RUN_MODE\" ). MustString ( \"debug\" ) // \u81ea\u52a8\u7c7b\u578b\u8f6c\u6362 HTTPPort = sec . Key ( \"HTTP_PORT\" ). MustInt ( 8000 ) ReadTimeout = time . Duration ( sec . Key ( \"READ_TIMEOUT\" ). MustInt ( 60 )) * time . Second WriteTimeout = time . Duration ( sec . Key ( \"WRITE_TIMEOUT\" ). MustInt ( 60 )) * time . Second } // LoadApp \u52a0\u8f7dAPP\u914d\u7f6e func LoadApp () { // \u83b7\u53d6./config/app.ini\u914d\u7f6e\u6587\u4ef6\u7684APP\u914d\u7f6e sec , err := Cfg . GetSection ( \"app\" ) if err != nil { log . Fatalf ( \"Fail to get section 'app':%v\" , err ) } JwtSecret = sec . Key ( \"JWT_SECRET\" ). MustString ( \"!@)*#)!@U#@*!@!)\" ) PageSize = sec . Key ( \"PAGE_SIZE\" ). MustInt ( 10 ) }","title":"\u8c03\u7528\u914d\u7f6e\u7684setting\u6a21\u5757"},{"location":"Golang/Project/go-gin-example/02 API-1/#api","text":"\u5efa\u7acb\u9519\u8bef\u7801e\u6a21\u5757 \u5728 ./pkg/e \u76ee\u5f55\u4e0b\u65b0\u5efa code.go \u548c msg.go \u6587\u4ef6 code.go package e // API\u9519\u8bef\u4ee3\u7801 const ( SUCCESS = 200 ERROR = 500 INVALID_PARAMS = 400 ERROR_EXIST_TAG = 10001 ERROR_NOT_EXIST_TAG = 10002 ERROR_NOT_EXIST_ARTICLE = 10003 ERROR_AUTH_CHECK_TOKEN_FAIL = 20001 ERROR_AUTH_CHECK_TOKEN_TIMEOUT = 20002 ERROR_AUTH_TOKEN = 20003 ERROR_AUTH = 20004 ) msg.go package e //msg.go // MsgFlags \u9519\u8bef\u4fe1\u606f var MsgFlags = map [ int ] string { SUCCESS : \"ok\" , ERROR : \"fail\" , INVALID_PARAMS : \"\u8bf7\u6c42\u53c2\u6570\u9519\u8bef\" , ERROR_EXIST_TAG : \"\u5df2\u5b58\u5728\u8be5\u6807\u7b7e\u540d\u79f0\" , ERROR_NOT_EXIST_TAG : \"\u8be5\u6807\u7b7e\u4e0d\u5b58\u5728\" , ERROR_NOT_EXIST_ARTICLE : \"\u8be5\u6587\u7ae0\u4e0d\u5b58\u5728\" , ERROR_AUTH_CHECK_TOKEN_FAIL : \"Token\u9274\u6743\u5931\u8d25\" , ERROR_AUTH_CHECK_TOKEN_TIMEOUT : \"Token\u9274\u6743\u8d85\u65f6\" , ERROR_AUTH_TOKEN : \"Token\u751f\u6210\u5931\u8d25\" , ERROR_AUTH : \"Token\u9519\u8bef\" , } // GetMsg \u83b7\u53d6\u9519\u8bef\u4fe1\u606f func GetMsg ( code int ) string { msg , ok := MsgFlags [ code ] if ok { return msg } return MsgFlags [ ERROR ] }","title":"API\u9519\u8bef\u7801\u5305"},{"location":"Golang/Project/go-gin-example/02 API-1/#_3","text":"\u516c\u5171\u65b9\u6cd5\uff1a\u4f8b\u5982\u83b7\u53d6\u5206\u9875\u9875\u7801\u7b49 go get -u github.com/unknwon/com \u5728 ./pkg/util \u76ee\u5f55\u4e0b\u65b0\u5efa pagination.go \u6587\u4ef6 package util import ( setting \"go-gin-example/pkg/settings\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetPage \u83b7\u53d6page\u6570\u91cf func GetPage ( c * gin . Context ) int { result := 0 // page\u8f6c\u6362\u4e3aint page , _ := com . StrTo ( c . Query ( \"page\" )). Int () if page > 0 { result = ( page - 1 ) * setting . PageSize } return result }","title":"\u5de5\u5177\u5305"},{"location":"Golang/Project/go-gin-example/02 API-1/#_4","text":"\u901a\u8fc7gorm\u5c06golang\u7ed3\u6784\u4f53\u6620\u5c04\u5230\u6570\u636e\u5e93\u4e2d\u81ea\u52a8\u751f\u6210\u6a21\u578b go get -u github.com/jinzhu/gorm go get -u github.com/go-sql-driver/mysql \u5728 ./models \u76ee\u5f55\u4e0b\u65b0\u5efa models.go \u6587\u4ef6\u3002 package models import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"log\" \"github.com/jinzhu/gorm\" ) var db * gorm . DB // Model \u6570\u636e\u5e93\u6a21\u578b type Model struct { ID int `gorm:\"primary_key\" json:id` CreatedOn int `json:\"created_on\"` ModifiedOn int `json:\"modified_on\"` } func init () { var ( err error dbType , dbName , user , password , host , tablePrefix string ) // \u83b7\u53d6\u914d\u7f6e\u6587\u4ef6\u7684\u6570\u636e\u5e93\u914d\u7f6e sec , err := setting . Cfg . GetSection ( \"database\" ) if err != nil { log . Fatal ( 2 , \"Fail to get get scetion `database`:%v\" , err ) } dbType = sec . Key ( \"TYPE\" ). String () dbName = sec . Key ( \"NAME\" ). String () user = sec . Key ( \"USER\" ). String () password = sec . Key ( \"PASSWORD\" ). String () host = sec . Key ( \"HOST\" ). String () tablePrefix = sec . Key ( \"TABLE_PREFIX\" ). String () db , err = gorm . Open ( dbtype , fmt . Sprintf ( \"%s:%s@tcp(%s)/%s?charset=utf8&parseTime=True&loc=Local\" , user , password , dbName )) if err != nil { log . Println ( err ) } gorm . DefaultTableNameHandler = func ( db * gorm . DB , defaultTableName string ) string { return tablePrefix + defaultTableName } db . SingularTable ( true ) db . LogMode ( true ) db . DB (). SetMaxIdleConns ( 10 ) db . DB (). SetMaxOpenConns ( 100 ) } // CloseDB \u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5 func CloseDB () { defer db . Close () }","title":"\u6570\u636e\u5e93\u6a21\u578b\u6620\u5c04"},{"location":"Golang/Project/go-gin-example/02 API-1/#demo","text":"\u5b9e\u4f8b\u7a0b\u5e8f \u5728 ./ \u76ee\u5f55\u4e0b\u65b0\u5efa main.go \u6587\u4ef6 package main import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"net/http\" \"github.com/gin-gonic/gin\" ) func main () { router := gin . Default () router . GET ( \"/test\" , func ( c * gin . Context ) { c . JSON ( 200 , gin . H { \"message\" : \"test\" , }) }) s := & http . Server { Addr : fmt . Sprintf ( \":%d\" , setting . HTTPPort ), Handler : router , ReadTimeout : setting . ReadTimeout , WriteTimeout : setting . WriteTimeout , MaxHeaderBytes : 1 << 20 , } // \u8c03\u7528\u5728&http.Server\u4e2d\u8bbe\u7f6e\u7684\u53c2\u6570,\u56e0\u6b64\u4e0a\u9762\u8981\u7528&,\u8981\u6539\u53d8\u53c2\u6570\u7684\u503c s . ListenAndServe () } \u6d4f\u89c8\u5668\u8f93\u5165 localhost\uff1a8000/test \u8fd4\u56de {\"message\":\"test\"} \u5219\u6210\u529f","title":"Demo"},{"location":"Golang/Project/go-gin-example/02 API-1/#maingo","text":"\u5728 ./routers \u76ee\u5f55\u4e0b\u65b0\u5efa router.go \u6587\u4ef6 package routers import ( setting \"go-gin-example/pkg/settings\" \"github.com/gin-gonic/gin\" ) func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) r . GET ( \"/test\" , func ( c * gin . Context ) { c . JSON ( 200 , gin . H { \"message\" : \"test\" , }) }) return r } \u4fee\u6539 main.go \u6587\u4ef6 package main import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/routers\" \"net/http\" ) func main () { router := routers . InitRouter () s := & http . Server { Addr : fmt . Sprintf ( \":%d\" , setting . HTTPPort ), Handler : router , ReadTimeout : setting . ReadTimeout , WriteTimeout : setting . WriteTimeout , MaxHeaderBytes : 1 << 20 , } s . ListenAndServer () }","title":"\u4ecemain.go\u4e2d\u5206\u79bb\u8def\u7531"},{"location":"Golang/Project/go-gin-example/02 API-1/#_5","text":"go-gin-example/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 app.ini \u251c\u2500\u2500 main.go \u251c\u2500\u2500 middleware \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 models.go \u251c\u2500\u2500 pkg \u2502 \u251c\u2500\u2500 e \u2502 \u2502 \u251c\u2500\u2500 code.go \u2502 \u2502 \u2514\u2500\u2500 msg.go \u2502 \u251c\u2500\u2500 setting \u2502 \u2502 \u2514\u2500\u2500 setting.go \u2502 \u2514\u2500\u2500 util \u2502 \u2514\u2500\u2500 pagination.go \u251c\u2500\u2500 routers \u2502 \u2514\u2500\u2500 router.go \u251c\u2500\u2500 runtime","title":"\u5f53\u524d\u76ee\u5f55\u7ed3\u6784"},{"location":"Golang/Project/go-gin-example/03 API-2/","text":"go-gin-example 03\uff1aAPI-2 \u5b8c\u6210\u535a\u5ba2\u7684\u6807\u7b7e\u7c7b\u63a5\u53e3\u5b9a\u4e49\u548c\u7f16\u5199 \u5b9a\u4e49\u63a5\u53e3 \u5b9a\u4e49\u6587\u7ae0\u6807\u7b7e\u7684\u8def\u7531\u5206\u53d1\u64cd\u4f5c \u83b7\u53d6\u6807\u7b7e\u5217\u8868\uff1aGET(\u201c/tags\u201d) \u65b0\u5efa\u6807\u7b7e\uff1aPOST(\u201c/tags\u201d) \u66f4\u65b0\u6307\u5b9a\u6807\u7b7e\uff1aPUT(\u201c/tags/:id\u201d) \u5220\u9664\u6307\u5b9a\u6807\u7b7e\uff1aDELETE(\u201c/tags/:id\u201d) \u7a7a\u58f3\u8def\u7531 \u6ce8\u518c\u8def\u7531\u5c06\u8bf7\u6c42\u5206\u53d1\u5230\u8be5\u8def\u7531\u4e2d\uff0c\u7531\u8be5API\u8def\u7531\u4e2d\u51fd\u6570\u5904\u7406 \u5728./routers/api \u4e0b\u65b0\u5efa v1 \u76ee\u5f55\uff0c\u76ee\u5f55\u5185\u65b0\u5efa tag.go \u6587\u4ef6\u4ee3\u8868\u7b2c\u4e00\u4e2aAPI\u5927\u7248\u672c package v1 import ( \"github.com/gin-gonic/gin\" ) // GetTags \u83b7\u53d6\u591a\u4e2a\u6587\u7ae0\u6807\u7b7e func GetTags ( c * gin . Context ) { } // AddTag \u65b0\u589e\u6587\u7ae0\u6807\u7b7e func AddTag ( c * gin . Context ) { } // EditTag \u4fee\u6539\u6587\u7ae0\u6807\u7b7e func EditTag ( c * gin . Context ) { } // DeleteTag \u5220\u9664\u6587\u7ae0\u6807\u7b7e func DeleteTag ( c * gin . Context ) { } \u6ce8\u518c\u8def\u7531 \u8be5\u8def\u7531\u8d1f\u8d23\u5206\u53d1\u5404\u4e2aapi\u8bf7\u6c42\u7ed9\u76f8\u5e94\u7684 handler \u8005 \u6253\u5f00 ./routers \u4e0b\u7684 router.go \u6587\u4ef6\uff0c\u4fee\u6539\u4e3a\uff1a package routers import ( setting \"go-gin-example/pkg/settings\" v1 \"go-gin-example/routers/api/v1\" \"github.com/gin-gonic/gin\" ) // InitRouter \u521d\u59cb\u5316\u8def\u7531 func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) apiv1 := r . Group ( \"/api/v1\" ) { apiv1 . GET ( \"/tags\" , v1 . GetTags ) apiv1 . POST ( \"/tags\" , v1 . AddTag ) apiv1 . PUT ( \"/tags/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/tags/:id\" , v1 . DeleteTag ) } return r } \u7528 go run main.go \u68c0\u6d4b\u662f\u5426\u6210\u529f\u6ce8\u518c\u8def\u7531 \u8868\u5355\u9a8c\u8bc1 \u7528beego\u7684validation\u6765\u8fdb\u884c\u8868\u5355\u6821\u9a8c\u6570\u636e \u8be5 tag.go \u6a21\u578b\u4e2d\u7ee7\u627f\u4e86 model.Model \u7ed3\u6784\u4f53\u5916\u65b0\u589e\u4e86\u6807\u7b7e\u7ed3\u6784\u4f53\u4e2d\u7684\u4e00\u4e9b\u5c5e\u6027\uff0c\u5728\u8be5\u6587\u4ef6\u4e0b\u9664\u4e86\u901a\u8fc7 gorm \u6620\u5c04\u6570\u636e\u5e93\u6a21\u578b\u5916\u8fd8\u6dfb\u52a0\u4e86\u5bf9\u6807\u7b7e\u7684CRUD\u64cd\u4f5c\u65b9\u6cd5\uff0c\u5728 ./routers/api/v1/tag.go \u4e2d\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e9bCRUD\u65b9\u6cd5 go get -u github.com/astaxie/beego/validation \u5728 models \u76ee\u5f55\u4e0b\u7684 tag.go \u5199\u5165 package models import ( \"time\" \"github.com/jinzhu/gorm\" ) // Tag \u6807\u7b7e\u7ed3\u6784\u4f53 // \u7ed9\u7ed3\u6784\u4f53\u8d4b\u4e88json\u5c5e\u6027, \u5728c.JSON\u4e2d\u4f1a\u81ea\u52a8\u8f6c\u6362 type Tag struct { // \u7ee7\u627fModel\u7684\u7ed3\u6784\u4f53 Model Name string `json:\"name\"` CreatedBy string `json:\"created_by\"` ModifiedBy string `json:\"modified_by\"` State int `json:\"state\"` } // BeforeCreate \u521b\u5efa\u6807\u7b7e\u4e4b\u524d\u81ea\u52a8\u8865\u5168CreatedOn\u65f6\u95f4 func ( tag * Tag ) BeforeCreate ( scope * gorm . Scope ) error { scope . SetColumn ( \"CreatedOn\" , time . Now (). Unix ()) return nil } // BeforeUpdate \u66f4\u65b0\u6807\u7b7e\u4e4b\u524d\u81ea\u52a8\u8865\u5168ModifiedOn\u65f6\u95f4 func ( tag * Tag ) BeforeUpdate ( scope * gorm . Scope ) error { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) return nil } // GetTags \u83b7\u53d6\u6587\u7ae0\u6807\u7b7e func GetTags ( pageNum int , pageSize int , maps interface {}) ( tags [] Tag ) { db . Where ( maps ). Offset ( pageNum ). Limit ( pageSize ). Find ( & tags ) return } // GetTagTotal \u83b7\u53d6\u5168\u90e8\u6587\u7ae0\u6807\u7b7e func GetTagTotal ( maps interface {}) ( count int ) { db . Model ( & Tag {}). Where ( maps ). Count ( & count ) return } // ExistTagByName \u67e5\u8be2\u6587\u7ae0\u6807\u7b7e\u662f\u5426\u5b58\u5728 func ExistTagByName ( name string ) bool { var tag Tag db . Select ( \"id\" ). Where ( \"name = ?\" , name ). First ( & tag ) if tag . ID > 0 { return true } return false } // ExistTagByID \u67e5\u8be2ID\u6587\u7ae0\u662f\u5426\u5b58\u5728 func ExistTagByID ( id int ) bool { var tag Tag db . Select ( \"id\" ). Where ( \"id = ?\" , id ). First ( & tag ) if tag . ID > 0 { return true } return false } // AddTag \u6dfb\u52a0\u6587\u7ae0\u6807\u7b7e func AddTag ( name string , state int , createdBy string ) bool { db . Create ( & Tag { Name : name , State : state , CreatedBy : createdBy , }) return true } // DeleteTag \u5220\u9664\u6587\u7ae0\u6807\u7b7e func DeleteTag ( id int ) bool { db . Where ( \"id = ? \" , id ). Delete ( & Tag {}) return true } // EditTag \u7f16\u8f91\u6587\u7ae0\u6807\u7b7e func EditTag ( id int , data interface {}) bool { db . Model ( & Tag {}). Where ( \"id = ? \" , id ). Update ( data ) return true } \u7f16\u5199\u6807\u7b7e\u5217\u8868\u7684\u8def\u7531\u903b\u8f91 \u5b8c\u5584\u7a7a\u58f3\u8def\u7531 \u901a\u8fc7 beego/validation \u5bf9URL\u4f20\u9012\u8fdb\u6765\u7684\u53c2\u6570\u8fdb\u884c\u6821\u9a8c\uff0c\u64cd\u4f5c\u4e3a\u58f0\u660e validation.Validation \u5bf9\u8c61\uff0c\u8c03\u7528\u5176 .Required \u3001 .MaxSize \u3001 .Range \u3001 .Message \u7b49\u65b9\u6cd5 \u901a\u8fc7 c.Query \u83b7\u53d6URL\u4e2d ?name=test&state=1 \u4e2d\u7684\u53c2\u6570\uff0c c.DefaultQuery \u5219\u652f\u6301\u8bbe\u7f6e\u4e00\u4e2a\u9ed8\u8ba4\u503c util.GetPage \u786e\u4fdd\u5404\u4e2a\u63a5\u53e3\u7684 page \u5904\u7406\u662f\u4e00\u81f4\u7684 \u5728 ./routers/v1/tag.go \u5199\u5165 package v1 import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/pkg/util\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetTags \u83b7\u53d6\u6587\u7ae0\u6807\u7b7e func GetTags ( c * gin . Context ) { // \u4eceURL\u83b7\u53d6\u53c2\u6570 // localhost:8000/tags?name=test&state=1 name := c . Query ( \"name\" ) maps := make ( map [ string ] interface {}) data := make ( map [ string ] interface {}) if name != \"\" { // \u5982\u679c\u5b58\u5728name\u53c2\u6570, \u5c06\u5176\u6dfb\u52a0\u5230maps\u4e2d maps [ \"name\" ] = name } var state = - 1 // should omit type , it will be inferred if arg := c . Query ( \"state\" ); arg != \"\" { // \u5982\u679cURL\u4e2d\u5b58\u5728state\u53c2\u6570, \u4e14arg\u4e0d\u7b49\u4e8e\u7a7a\u7684\u65f6\u5019 // \u5c06state\u8f6c\u6362\u4e3aint // \u6dfb\u52a0\u5230maps[\"state\"]\u4e2d state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state } code := e . SUCCESS // \u627e\u5230\u8be5\u6587\u7ae0,\u5c06\u5176\u6dfb\u52a0\u5230lists\u4e2d\u8fd4\u56de data [ \"lists\" ] = models . GetTags ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // AddTag \u589e\u52a0\u6587\u7ae0\u6807\u7b7e func AddTag ( c * gin . Context ) { name := c . Query ( \"name\" ) // state=0\u4ee3\u8868\u8be5\u6807\u7b7e\u4e0d\u5b58\u5728 // \u8bbe\u7f6e\u9ed8\u8ba4\u503c\u4e3a0 state := com . StrTo ( c . DefaultQuery ( \"state\" , \"0\" )). MustInt () createdBy := c . Query ( \"created_by\" ) valid := validation . Validation {} valid . Required ( name , \"name\" ). Message ( \"\u540d\u79f0\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . MaxSize ( name , 100 , \"name\" ). Message ( \"\u540d\u79f0\u6700\u957f\u4e3a100\u5b57\u7b26\" ) valid . Required ( createdBy , \"created_by\" ). Message ( \"\u521b\u5efa\u4eba\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . MaxSize ( createdBy , 100 , \"created_by\" ). Message ( \"\u521b\u5efa\u4eba\u6700\u957f\u4e3a100\u5b57\u7b26\" ) valid . Range ( state , 0 , 1 , \"starte\" ). Message ( \"\u72b6\u6001\u53ea\u5141\u8bb80\u62161\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if ! models . ExistTagByName ( name ) { code = e . SUCCESS models . AddTag ( name , state , createdBy ) } else { code = e . ERROR_EXIST_TAG } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // EditTag \u4fee\u6539\u6587\u7ae0\u6807\u7b7e func EditTag ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () name := c . Query ( \"name\" ) modifiedBy := c . Query ( \"modified_by\" ) valid := validation . Validation {} var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"\u72b6\u6001\u53ea\u5141\u8bb80\u62161\" ) } valid . Required ( id , \"id\" ). Message ( \"ID\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . Required ( modifiedBy , \"modiified_by\" ). Message ( \"\u4fee\u6539\u4eba\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . MaxSize ( modifiedBy , 100 , \"modified_by\" ). Message ( \"\u4fee\u6539\u4eba\u6700\u957f\u4e3a100\u5b57\u7b26\" ) valid . MaxSize ( name , 100 , \"name\" ). Message ( \"\u540d\u79f0\u6700\u957f\u4e3a100\u5b57\u7b26\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { code = e . SUCCESS if models . ExistTagByID ( id ) { data := make ( map [ string ] interface {}) data [ \"modified_by\" ] = modifiedBy if name != \"\" { data [ \"name\" ] = name } if state != - 1 { data [ \"state\" ] = state } models . EditTag ( id , data ) } else { // \u4e0d\u5b58\u5728, \u65e0\u6cd5\u4fee\u6539\u6807\u7b7e code = e . ERROR_NOT_EXIST_ARTICLE } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"message\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // DeleteTag \u5220\u9664\u6587\u7ae0\u6807\u7b7e func DeleteTag ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID\u5fc5\u987b\u5927\u4e8e0\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { code = e . SUCCESS // \u6570\u636e\u5e93\u64cd\u4f5c if models . ExistTagByID ( id ) { models . DeleteTag ( id ) } else { code = e . ERROR_NOT_EXIST_TAG } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) }","title":"go-gin-example 03\uff1aAPI-2"},{"location":"Golang/Project/go-gin-example/03 API-2/#go-gin-example-03api-2","text":"\u5b8c\u6210\u535a\u5ba2\u7684\u6807\u7b7e\u7c7b\u63a5\u53e3\u5b9a\u4e49\u548c\u7f16\u5199","title":"go-gin-example 03\uff1aAPI-2"},{"location":"Golang/Project/go-gin-example/03 API-2/#_1","text":"\u5b9a\u4e49\u6587\u7ae0\u6807\u7b7e\u7684\u8def\u7531\u5206\u53d1\u64cd\u4f5c \u83b7\u53d6\u6807\u7b7e\u5217\u8868\uff1aGET(\u201c/tags\u201d) \u65b0\u5efa\u6807\u7b7e\uff1aPOST(\u201c/tags\u201d) \u66f4\u65b0\u6307\u5b9a\u6807\u7b7e\uff1aPUT(\u201c/tags/:id\u201d) \u5220\u9664\u6307\u5b9a\u6807\u7b7e\uff1aDELETE(\u201c/tags/:id\u201d)","title":"\u5b9a\u4e49\u63a5\u53e3"},{"location":"Golang/Project/go-gin-example/03 API-2/#_2","text":"\u6ce8\u518c\u8def\u7531\u5c06\u8bf7\u6c42\u5206\u53d1\u5230\u8be5\u8def\u7531\u4e2d\uff0c\u7531\u8be5API\u8def\u7531\u4e2d\u51fd\u6570\u5904\u7406 \u5728./routers/api \u4e0b\u65b0\u5efa v1 \u76ee\u5f55\uff0c\u76ee\u5f55\u5185\u65b0\u5efa tag.go \u6587\u4ef6\u4ee3\u8868\u7b2c\u4e00\u4e2aAPI\u5927\u7248\u672c package v1 import ( \"github.com/gin-gonic/gin\" ) // GetTags \u83b7\u53d6\u591a\u4e2a\u6587\u7ae0\u6807\u7b7e func GetTags ( c * gin . Context ) { } // AddTag \u65b0\u589e\u6587\u7ae0\u6807\u7b7e func AddTag ( c * gin . Context ) { } // EditTag \u4fee\u6539\u6587\u7ae0\u6807\u7b7e func EditTag ( c * gin . Context ) { } // DeleteTag \u5220\u9664\u6587\u7ae0\u6807\u7b7e func DeleteTag ( c * gin . Context ) { }","title":"\u7a7a\u58f3\u8def\u7531"},{"location":"Golang/Project/go-gin-example/03 API-2/#_3","text":"\u8be5\u8def\u7531\u8d1f\u8d23\u5206\u53d1\u5404\u4e2aapi\u8bf7\u6c42\u7ed9\u76f8\u5e94\u7684 handler \u8005 \u6253\u5f00 ./routers \u4e0b\u7684 router.go \u6587\u4ef6\uff0c\u4fee\u6539\u4e3a\uff1a package routers import ( setting \"go-gin-example/pkg/settings\" v1 \"go-gin-example/routers/api/v1\" \"github.com/gin-gonic/gin\" ) // InitRouter \u521d\u59cb\u5316\u8def\u7531 func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) apiv1 := r . Group ( \"/api/v1\" ) { apiv1 . GET ( \"/tags\" , v1 . GetTags ) apiv1 . POST ( \"/tags\" , v1 . AddTag ) apiv1 . PUT ( \"/tags/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/tags/:id\" , v1 . DeleteTag ) } return r } \u7528 go run main.go \u68c0\u6d4b\u662f\u5426\u6210\u529f\u6ce8\u518c\u8def\u7531","title":"\u6ce8\u518c\u8def\u7531"},{"location":"Golang/Project/go-gin-example/03 API-2/#_4","text":"\u7528beego\u7684validation\u6765\u8fdb\u884c\u8868\u5355\u6821\u9a8c\u6570\u636e \u8be5 tag.go \u6a21\u578b\u4e2d\u7ee7\u627f\u4e86 model.Model \u7ed3\u6784\u4f53\u5916\u65b0\u589e\u4e86\u6807\u7b7e\u7ed3\u6784\u4f53\u4e2d\u7684\u4e00\u4e9b\u5c5e\u6027\uff0c\u5728\u8be5\u6587\u4ef6\u4e0b\u9664\u4e86\u901a\u8fc7 gorm \u6620\u5c04\u6570\u636e\u5e93\u6a21\u578b\u5916\u8fd8\u6dfb\u52a0\u4e86\u5bf9\u6807\u7b7e\u7684CRUD\u64cd\u4f5c\u65b9\u6cd5\uff0c\u5728 ./routers/api/v1/tag.go \u4e2d\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e9bCRUD\u65b9\u6cd5 go get -u github.com/astaxie/beego/validation \u5728 models \u76ee\u5f55\u4e0b\u7684 tag.go \u5199\u5165 package models import ( \"time\" \"github.com/jinzhu/gorm\" ) // Tag \u6807\u7b7e\u7ed3\u6784\u4f53 // \u7ed9\u7ed3\u6784\u4f53\u8d4b\u4e88json\u5c5e\u6027, \u5728c.JSON\u4e2d\u4f1a\u81ea\u52a8\u8f6c\u6362 type Tag struct { // \u7ee7\u627fModel\u7684\u7ed3\u6784\u4f53 Model Name string `json:\"name\"` CreatedBy string `json:\"created_by\"` ModifiedBy string `json:\"modified_by\"` State int `json:\"state\"` } // BeforeCreate \u521b\u5efa\u6807\u7b7e\u4e4b\u524d\u81ea\u52a8\u8865\u5168CreatedOn\u65f6\u95f4 func ( tag * Tag ) BeforeCreate ( scope * gorm . Scope ) error { scope . SetColumn ( \"CreatedOn\" , time . Now (). Unix ()) return nil } // BeforeUpdate \u66f4\u65b0\u6807\u7b7e\u4e4b\u524d\u81ea\u52a8\u8865\u5168ModifiedOn\u65f6\u95f4 func ( tag * Tag ) BeforeUpdate ( scope * gorm . Scope ) error { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) return nil } // GetTags \u83b7\u53d6\u6587\u7ae0\u6807\u7b7e func GetTags ( pageNum int , pageSize int , maps interface {}) ( tags [] Tag ) { db . Where ( maps ). Offset ( pageNum ). Limit ( pageSize ). Find ( & tags ) return } // GetTagTotal \u83b7\u53d6\u5168\u90e8\u6587\u7ae0\u6807\u7b7e func GetTagTotal ( maps interface {}) ( count int ) { db . Model ( & Tag {}). Where ( maps ). Count ( & count ) return } // ExistTagByName \u67e5\u8be2\u6587\u7ae0\u6807\u7b7e\u662f\u5426\u5b58\u5728 func ExistTagByName ( name string ) bool { var tag Tag db . Select ( \"id\" ). Where ( \"name = ?\" , name ). First ( & tag ) if tag . ID > 0 { return true } return false } // ExistTagByID \u67e5\u8be2ID\u6587\u7ae0\u662f\u5426\u5b58\u5728 func ExistTagByID ( id int ) bool { var tag Tag db . Select ( \"id\" ). Where ( \"id = ?\" , id ). First ( & tag ) if tag . ID > 0 { return true } return false } // AddTag \u6dfb\u52a0\u6587\u7ae0\u6807\u7b7e func AddTag ( name string , state int , createdBy string ) bool { db . Create ( & Tag { Name : name , State : state , CreatedBy : createdBy , }) return true } // DeleteTag \u5220\u9664\u6587\u7ae0\u6807\u7b7e func DeleteTag ( id int ) bool { db . Where ( \"id = ? \" , id ). Delete ( & Tag {}) return true } // EditTag \u7f16\u8f91\u6587\u7ae0\u6807\u7b7e func EditTag ( id int , data interface {}) bool { db . Model ( & Tag {}). Where ( \"id = ? \" , id ). Update ( data ) return true }","title":"\u8868\u5355\u9a8c\u8bc1"},{"location":"Golang/Project/go-gin-example/03 API-2/#_5","text":"\u5b8c\u5584\u7a7a\u58f3\u8def\u7531 \u901a\u8fc7 beego/validation \u5bf9URL\u4f20\u9012\u8fdb\u6765\u7684\u53c2\u6570\u8fdb\u884c\u6821\u9a8c\uff0c\u64cd\u4f5c\u4e3a\u58f0\u660e validation.Validation \u5bf9\u8c61\uff0c\u8c03\u7528\u5176 .Required \u3001 .MaxSize \u3001 .Range \u3001 .Message \u7b49\u65b9\u6cd5 \u901a\u8fc7 c.Query \u83b7\u53d6URL\u4e2d ?name=test&state=1 \u4e2d\u7684\u53c2\u6570\uff0c c.DefaultQuery \u5219\u652f\u6301\u8bbe\u7f6e\u4e00\u4e2a\u9ed8\u8ba4\u503c util.GetPage \u786e\u4fdd\u5404\u4e2a\u63a5\u53e3\u7684 page \u5904\u7406\u662f\u4e00\u81f4\u7684 \u5728 ./routers/v1/tag.go \u5199\u5165 package v1 import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/pkg/util\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetTags \u83b7\u53d6\u6587\u7ae0\u6807\u7b7e func GetTags ( c * gin . Context ) { // \u4eceURL\u83b7\u53d6\u53c2\u6570 // localhost:8000/tags?name=test&state=1 name := c . Query ( \"name\" ) maps := make ( map [ string ] interface {}) data := make ( map [ string ] interface {}) if name != \"\" { // \u5982\u679c\u5b58\u5728name\u53c2\u6570, \u5c06\u5176\u6dfb\u52a0\u5230maps\u4e2d maps [ \"name\" ] = name } var state = - 1 // should omit type , it will be inferred if arg := c . Query ( \"state\" ); arg != \"\" { // \u5982\u679cURL\u4e2d\u5b58\u5728state\u53c2\u6570, \u4e14arg\u4e0d\u7b49\u4e8e\u7a7a\u7684\u65f6\u5019 // \u5c06state\u8f6c\u6362\u4e3aint // \u6dfb\u52a0\u5230maps[\"state\"]\u4e2d state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state } code := e . SUCCESS // \u627e\u5230\u8be5\u6587\u7ae0,\u5c06\u5176\u6dfb\u52a0\u5230lists\u4e2d\u8fd4\u56de data [ \"lists\" ] = models . GetTags ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // AddTag \u589e\u52a0\u6587\u7ae0\u6807\u7b7e func AddTag ( c * gin . Context ) { name := c . Query ( \"name\" ) // state=0\u4ee3\u8868\u8be5\u6807\u7b7e\u4e0d\u5b58\u5728 // \u8bbe\u7f6e\u9ed8\u8ba4\u503c\u4e3a0 state := com . StrTo ( c . DefaultQuery ( \"state\" , \"0\" )). MustInt () createdBy := c . Query ( \"created_by\" ) valid := validation . Validation {} valid . Required ( name , \"name\" ). Message ( \"\u540d\u79f0\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . MaxSize ( name , 100 , \"name\" ). Message ( \"\u540d\u79f0\u6700\u957f\u4e3a100\u5b57\u7b26\" ) valid . Required ( createdBy , \"created_by\" ). Message ( \"\u521b\u5efa\u4eba\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . MaxSize ( createdBy , 100 , \"created_by\" ). Message ( \"\u521b\u5efa\u4eba\u6700\u957f\u4e3a100\u5b57\u7b26\" ) valid . Range ( state , 0 , 1 , \"starte\" ). Message ( \"\u72b6\u6001\u53ea\u5141\u8bb80\u62161\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if ! models . ExistTagByName ( name ) { code = e . SUCCESS models . AddTag ( name , state , createdBy ) } else { code = e . ERROR_EXIST_TAG } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // EditTag \u4fee\u6539\u6587\u7ae0\u6807\u7b7e func EditTag ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () name := c . Query ( \"name\" ) modifiedBy := c . Query ( \"modified_by\" ) valid := validation . Validation {} var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"\u72b6\u6001\u53ea\u5141\u8bb80\u62161\" ) } valid . Required ( id , \"id\" ). Message ( \"ID\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . Required ( modifiedBy , \"modiified_by\" ). Message ( \"\u4fee\u6539\u4eba\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . MaxSize ( modifiedBy , 100 , \"modified_by\" ). Message ( \"\u4fee\u6539\u4eba\u6700\u957f\u4e3a100\u5b57\u7b26\" ) valid . MaxSize ( name , 100 , \"name\" ). Message ( \"\u540d\u79f0\u6700\u957f\u4e3a100\u5b57\u7b26\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { code = e . SUCCESS if models . ExistTagByID ( id ) { data := make ( map [ string ] interface {}) data [ \"modified_by\" ] = modifiedBy if name != \"\" { data [ \"name\" ] = name } if state != - 1 { data [ \"state\" ] = state } models . EditTag ( id , data ) } else { // \u4e0d\u5b58\u5728, \u65e0\u6cd5\u4fee\u6539\u6807\u7b7e code = e . ERROR_NOT_EXIST_ARTICLE } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"message\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // DeleteTag \u5220\u9664\u6587\u7ae0\u6807\u7b7e func DeleteTag ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID\u5fc5\u987b\u5927\u4e8e0\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { code = e . SUCCESS // \u6570\u636e\u5e93\u64cd\u4f5c if models . ExistTagByID ( id ) { models . DeleteTag ( id ) } else { code = e . ERROR_NOT_EXIST_TAG } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) }","title":"\u7f16\u5199\u6807\u7b7e\u5217\u8868\u7684\u8def\u7531\u903b\u8f91"},{"location":"Golang/Project/go-gin-example/04 API-3/","text":"go-gin-example 04\uff1aAPI-3 \u5b8c\u6210\u535a\u5ba2\u7684\u6587\u7ae0\u7c7b\u63a5\u53e3\u5b9a\u4e49\u548c\u7f16\u5199 \u5b9a\u4e49\u63a5\u53e3 \u5b9a\u4e49\u6587\u7ae0\u7684\u8def\u7531\u5206\u53d1\u64cd\u4f5c \u83b7\u53d6\u6587\u7ae0\u5217\u8868\uff1aGET(\u201c/articles\u201d) \u83b7\u53d6\u5355\u7bc7\u6587\u7ae0\uff1aGET(\u201c/articles/:id\u201d) \u66f4\u65b0\u6587\u7ae0\uff1aPUT(\u201c/articles/:id\u201d) \u65b0\u5efa\u6587\u7ae0\uff1aPOST(\u201c/articles\u201d) \u5220\u9664\u6587\u7ae0\uff1aDELETE(\u201c/tags/:id\u201d) \u7a7a\u58f3\u8def\u7531 \u6587\u7ae0\u8bf7\u6c42\u5904\u7406API \u5728 ./routers/api/v1 \u4e0b\u65b0\u5efa article.go \u6587\u4ef6 package v1 import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/pkg/util\" \"log\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetArticle \u83b7\u53d6\u5355\u4e2a\u6587\u7ae0 func GetArticle ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID\u5fc5\u987b\u5927\u4e8e0\" ) code := e . INVALID_PARAMS var data interface {} if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { data = models . GetArticle ( id ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key: %s, err.message: %s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // GetArticles \u83b7\u53d6\u591a\u4e2a\u6587\u7ae0 func GetArticles ( c * gin . Context ) { data := make ( map [ string ] interface {}) maps := make ( map [ string ] interface {}) valid := validation . Validation {} var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"\u72b6\u6001\u53ea\u5141\u8bb80\u62161\" ) } var tagID = - 1 if arg := c . Query ( \"tag_id\" ); arg != \"\" { tagID = com . StrTo ( arg ). MustInt () maps [ \"tag_id\" ] = tagID valid . Min ( tagID , 1 , \"tag_id\" ). Message ( \"\u6807\u7b7eID\u5fc5\u987b\u5927\u4e8e0\" ) } code := e . INVALID_PARAMS if ! valid . HasErrors () { data [ \"list\" ] = models . GetArticles ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) code = e . SUCCESS } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s, err.message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // AddArticle \u589e\u52a0\u6587\u7ae0 func AddArticle ( c * gin . Context ) { tagID := com . StrTo ( c . Query ( \"tag_id\" )). MustInt () title := c . Query ( \"title\" ) desc := c . Query ( \"desc\" ) content := c . Query ( \"content\" ) createdBy := c . Query ( \"created_by\" ) state := com . StrTo ( c . Query ( \"state\" )). MustInt () valid := validation . Validation {} valid . Min ( tagID , 1 , \"tagID\" ). Message ( \"\u6807\u7b7eID\u5fc5\u987b\u5927\u4e8e0\" ) valid . Required ( title , \"title\" ). Message ( \"\u9898\u76ee\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . Required ( desc , \"desc\" ). Message ( \"\u63cf\u8ff0\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . Required ( content , \"content\" ). Message ( \"\u5185\u5bb9\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . Required ( createdBy , \"created_by\" ). Message ( \"\u521b\u5efa\u4eba\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"\u72b6\u6001\u53ea\u80fd\u662f0\u62161\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistTagByID ( tagID ) { data := make ( map [ string ] interface {}) data [ \"tag_id\" ] = tagID data [ \"title\" ] = title data [ \"desc\" ] = desc data [ \"content\" ] = content data [ \"created_by\" ] = createdBy data [ \"state\" ] = state models . AddArticle ( data ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_TAG } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s, err.message%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // EditArticle \u4fee\u6539\u6587\u7ae0 func EditArticle ( c * gin . Context ) { valid := validation . Validation {} id := com . StrTo ( c . Query ( \"id\" )). MustInt () tagID := com . StrTo ( c . Query ( \"tag_id\" )). MustInt () title := c . Query ( \"title\" ) desc := c . Query ( \"desc\" ) content := c . Query ( \"content\" ) modifiedBy := c . Query ( \"modified_by\" ) var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"\u72b6\u6001\u53ea\u80fd\u662f0\u62161\" ) } valid . Min ( id , 1 , \"id\" ). Message ( \"ID\u5fc5\u987b\u5927\u4e8e0\" ) valid . MaxSize ( title , 100 , \"title\" ). Message ( \"\u6807\u9898\u6700\u957f\u4e3a100\u5b57\u7b26\" ) valid . MaxSize ( desc , 255 , \"desc\" ). Message ( \"\u7b80\u8ff0\u6700\u957f\u4e3a255\u5b57\u7b26\" ) valid . MaxSize ( content , 65535 , \"content\" ). Message ( \"\u5185\u5bb9\u6700\u957f\u4e3a65535\u5b57\u7b26\" ) valid . Required ( modifiedBy , \"modified_by\" ). Message ( \"\u4fee\u6539\u4eba\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . MaxSize ( modifiedBy , 100 , \"modified_by\" ). Message ( \"\u4fee\u6539\u4eba\u6700\u957f\u4e3a100\u5b57\u7b26\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { if models . ExistTagByID ( tagID ) { data := make ( map [ string ] interface {}) if tagID > 0 { data [ \"tag_id\" ] = tagID } if title != \"\" { data [ \"title\" ] = title } if desc != \"\" { data [ \"desc\" ] = desc } if content != \"\" { data [ \"content\" ] = content } data [ \"modified_by\" ] = modifiedBy models . EditArticle ( id , data ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_TAG } } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s err.Message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // DeleteArticle \u5220\u9664\u6587\u7ae0 func DeleteArticle ( c * gin . Context ) { id := com . StrTo ( c . Query ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID\u5fc5\u987b\u5927\u4e8e0\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { models . DeleteArticle ( id ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.Key:%s err.Message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } \u5b9a\u4e49\u6587\u7ae0\u7684\u6570\u636e\u5e93\u6a21\u578b \u6570\u636e\u5e93\u6a21\u578b\u548c\u76f8\u5173CRUD\u64cd\u4f5c \u5728 ./models \u4e0b\u65b0\u5efa article.go \u6587\u4ef6 package models import ( \"time\" \"github.com/jinzhu/gorm\" ) // Article \u6587\u7ae0\u7ed3\u6784\u4f53 type Article struct { Model // \u58f0\u660e\u8be5`TagID`\u4e3a\u7d22\u5f15 TagID int `json:\"tag_id\" gorm:\"index\"` Tag Tag `json:tag` Title string `json:\"title\"` Desc string `json:\"desc\"` Content string `json:\"content\"` CreatedBy string `json:\"created_by\"` ModifiedBy string `json:\"modified_by\"` State int `json:state\"` } // BeforeCreate \u521b\u5efa\u6570\u636e\u524d\u7684\u64cd\u4f5c func ( article * Article ) BeforeCreate ( scope * gorm . Scope ) error { // scope \u5305\u542b\u5f53\u524d\u6267\u884c\u7684\u6240\u6709\u4fe1\u606f scope . SetColumn ( \"CreateOn\" , time . Now (). Unix ()) return nil } // BeforeUpdate \u66f4\u65b0(\u7f16\u8f91)\u4e4b\u524d\u6dfb\u52a0\u4fee\u6539\u65f6\u95f4 func ( article * Article ) BeforeUpdate ( scope * gorm . Scope ) error { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) return nil } // ExistArticleByID \u5224\u65ad\u662f\u5426\u5b58\u5728\u6587\u7ae0 func ExistArticleByID ( id int ) bool { var article Article db . Select ( \"id\" ). Where ( \"id = ?\" , id ). Find ( & article ) if article . ID > 0 { return true } return false } // GetArticleTotal \u8ba1\u7b97\u6587\u7ae0\u6570\u91cf func GetArticleTotal ( maps interface {}) ( count int ) { // \u5728Article\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u6240\u6709\u6570\u636e\u540e\u8ba1\u6570\u8fd4\u56de\u7ed9count db . Model ( & Article {}). Where ( maps ). Count ( & count ) return count } // GetArticles \u83b7\u53d6\u6240\u6709\u6587\u7ae0\u5217\u8868 func GetArticles ( pageNum int , pageSize int , maps interface {}) ( articles [] Article ) { // \u6839\u636e\u6761\u4ef6\u9884\u52a0\u8f7d db . Preload ( \"Tag\" ). Where ( maps ). Offset ( pageNum ). Limit ( pageSize ). Find ( & articles ) return articles } // GetArticle \u83b7\u53d6\u5355\u7bc7\u6587\u7ae0 func GetArticle ( id int ) ( article Article ) { // \u627e\u5230\u8be5\u7247\u6587\u7ae0, \u8fd4\u56de\u5230article\u4e2d db . Where ( \"id = ?\" , id ). First ( & article ) // \u83b7\u53d6\u4e0e\u8be5\u7bc7\u6587\u7ae0\u6709\u5173\u7684Tag // \u901a\u8fc7.Related\u5173\u8054\u5230\u5d4c\u5957\u5728Article\u5185\u7684Tag\u7ed3\u6784\u4f53 db . Model ( & article ). Related ( & article . Tag ) return article } // EditArticle \u7f16\u8f91\u6587\u7ae0 func EditArticle ( id int , data interface {}) bool { db . Model ( & Article {}). Where ( \"id = ?\" , id ). Update ( data ) return true } // AddArticle \u6dfb\u52a0\u6587\u7ae0 func AddArticle ( data map [ string ] interface {}) bool { db . Create ( & Article { // v.(I)\u7c7b\u578b\u65ad\u8a00: \u5224\u65ad\u63a5\u53e3v\u7684\u5b9e\u9645\u7c7b\u578b\u662f\u5426\u4e3a(I)\u7c7b\u578b TagID : data [ \"tag_id\" ].( int ), Title : data [ \"title\" ].( string ), Desc : data [ \"desc\" ].( string ), Content : data [ \"content\" ].( string ), CreatedBy : data [ \"created_by\" ].( string ), State : data [ \"state\" ].( int ), }) return true } // DeleteArticle \u5220\u9664\u6587\u7ae0 func DeleteArticle ( id int ) bool { db . Where ( \"id = ?\" , id ). Delete ( Article {}) return true }","title":"go-gin-example 04\uff1aAPI-3"},{"location":"Golang/Project/go-gin-example/04 API-3/#go-gin-example-04api-3","text":"\u5b8c\u6210\u535a\u5ba2\u7684\u6587\u7ae0\u7c7b\u63a5\u53e3\u5b9a\u4e49\u548c\u7f16\u5199","title":"go-gin-example 04\uff1aAPI-3"},{"location":"Golang/Project/go-gin-example/04 API-3/#_1","text":"\u5b9a\u4e49\u6587\u7ae0\u7684\u8def\u7531\u5206\u53d1\u64cd\u4f5c \u83b7\u53d6\u6587\u7ae0\u5217\u8868\uff1aGET(\u201c/articles\u201d) \u83b7\u53d6\u5355\u7bc7\u6587\u7ae0\uff1aGET(\u201c/articles/:id\u201d) \u66f4\u65b0\u6587\u7ae0\uff1aPUT(\u201c/articles/:id\u201d) \u65b0\u5efa\u6587\u7ae0\uff1aPOST(\u201c/articles\u201d) \u5220\u9664\u6587\u7ae0\uff1aDELETE(\u201c/tags/:id\u201d)","title":"\u5b9a\u4e49\u63a5\u53e3"},{"location":"Golang/Project/go-gin-example/04 API-3/#_2","text":"\u6587\u7ae0\u8bf7\u6c42\u5904\u7406API \u5728 ./routers/api/v1 \u4e0b\u65b0\u5efa article.go \u6587\u4ef6 package v1 import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/pkg/util\" \"log\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetArticle \u83b7\u53d6\u5355\u4e2a\u6587\u7ae0 func GetArticle ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID\u5fc5\u987b\u5927\u4e8e0\" ) code := e . INVALID_PARAMS var data interface {} if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { data = models . GetArticle ( id ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key: %s, err.message: %s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // GetArticles \u83b7\u53d6\u591a\u4e2a\u6587\u7ae0 func GetArticles ( c * gin . Context ) { data := make ( map [ string ] interface {}) maps := make ( map [ string ] interface {}) valid := validation . Validation {} var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"\u72b6\u6001\u53ea\u5141\u8bb80\u62161\" ) } var tagID = - 1 if arg := c . Query ( \"tag_id\" ); arg != \"\" { tagID = com . StrTo ( arg ). MustInt () maps [ \"tag_id\" ] = tagID valid . Min ( tagID , 1 , \"tag_id\" ). Message ( \"\u6807\u7b7eID\u5fc5\u987b\u5927\u4e8e0\" ) } code := e . INVALID_PARAMS if ! valid . HasErrors () { data [ \"list\" ] = models . GetArticles ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) code = e . SUCCESS } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s, err.message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // AddArticle \u589e\u52a0\u6587\u7ae0 func AddArticle ( c * gin . Context ) { tagID := com . StrTo ( c . Query ( \"tag_id\" )). MustInt () title := c . Query ( \"title\" ) desc := c . Query ( \"desc\" ) content := c . Query ( \"content\" ) createdBy := c . Query ( \"created_by\" ) state := com . StrTo ( c . Query ( \"state\" )). MustInt () valid := validation . Validation {} valid . Min ( tagID , 1 , \"tagID\" ). Message ( \"\u6807\u7b7eID\u5fc5\u987b\u5927\u4e8e0\" ) valid . Required ( title , \"title\" ). Message ( \"\u9898\u76ee\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . Required ( desc , \"desc\" ). Message ( \"\u63cf\u8ff0\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . Required ( content , \"content\" ). Message ( \"\u5185\u5bb9\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . Required ( createdBy , \"created_by\" ). Message ( \"\u521b\u5efa\u4eba\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"\u72b6\u6001\u53ea\u80fd\u662f0\u62161\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistTagByID ( tagID ) { data := make ( map [ string ] interface {}) data [ \"tag_id\" ] = tagID data [ \"title\" ] = title data [ \"desc\" ] = desc data [ \"content\" ] = content data [ \"created_by\" ] = createdBy data [ \"state\" ] = state models . AddArticle ( data ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_TAG } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s, err.message%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // EditArticle \u4fee\u6539\u6587\u7ae0 func EditArticle ( c * gin . Context ) { valid := validation . Validation {} id := com . StrTo ( c . Query ( \"id\" )). MustInt () tagID := com . StrTo ( c . Query ( \"tag_id\" )). MustInt () title := c . Query ( \"title\" ) desc := c . Query ( \"desc\" ) content := c . Query ( \"content\" ) modifiedBy := c . Query ( \"modified_by\" ) var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"\u72b6\u6001\u53ea\u80fd\u662f0\u62161\" ) } valid . Min ( id , 1 , \"id\" ). Message ( \"ID\u5fc5\u987b\u5927\u4e8e0\" ) valid . MaxSize ( title , 100 , \"title\" ). Message ( \"\u6807\u9898\u6700\u957f\u4e3a100\u5b57\u7b26\" ) valid . MaxSize ( desc , 255 , \"desc\" ). Message ( \"\u7b80\u8ff0\u6700\u957f\u4e3a255\u5b57\u7b26\" ) valid . MaxSize ( content , 65535 , \"content\" ). Message ( \"\u5185\u5bb9\u6700\u957f\u4e3a65535\u5b57\u7b26\" ) valid . Required ( modifiedBy , \"modified_by\" ). Message ( \"\u4fee\u6539\u4eba\u4e0d\u80fd\u4e3a\u7a7a\" ) valid . MaxSize ( modifiedBy , 100 , \"modified_by\" ). Message ( \"\u4fee\u6539\u4eba\u6700\u957f\u4e3a100\u5b57\u7b26\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { if models . ExistTagByID ( tagID ) { data := make ( map [ string ] interface {}) if tagID > 0 { data [ \"tag_id\" ] = tagID } if title != \"\" { data [ \"title\" ] = title } if desc != \"\" { data [ \"desc\" ] = desc } if content != \"\" { data [ \"content\" ] = content } data [ \"modified_by\" ] = modifiedBy models . EditArticle ( id , data ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_TAG } } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s err.Message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // DeleteArticle \u5220\u9664\u6587\u7ae0 func DeleteArticle ( c * gin . Context ) { id := com . StrTo ( c . Query ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID\u5fc5\u987b\u5927\u4e8e0\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { models . DeleteArticle ( id ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.Key:%s err.Message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) }","title":"\u7a7a\u58f3\u8def\u7531"},{"location":"Golang/Project/go-gin-example/04 API-3/#_3","text":"\u6570\u636e\u5e93\u6a21\u578b\u548c\u76f8\u5173CRUD\u64cd\u4f5c \u5728 ./models \u4e0b\u65b0\u5efa article.go \u6587\u4ef6 package models import ( \"time\" \"github.com/jinzhu/gorm\" ) // Article \u6587\u7ae0\u7ed3\u6784\u4f53 type Article struct { Model // \u58f0\u660e\u8be5`TagID`\u4e3a\u7d22\u5f15 TagID int `json:\"tag_id\" gorm:\"index\"` Tag Tag `json:tag` Title string `json:\"title\"` Desc string `json:\"desc\"` Content string `json:\"content\"` CreatedBy string `json:\"created_by\"` ModifiedBy string `json:\"modified_by\"` State int `json:state\"` } // BeforeCreate \u521b\u5efa\u6570\u636e\u524d\u7684\u64cd\u4f5c func ( article * Article ) BeforeCreate ( scope * gorm . Scope ) error { // scope \u5305\u542b\u5f53\u524d\u6267\u884c\u7684\u6240\u6709\u4fe1\u606f scope . SetColumn ( \"CreateOn\" , time . Now (). Unix ()) return nil } // BeforeUpdate \u66f4\u65b0(\u7f16\u8f91)\u4e4b\u524d\u6dfb\u52a0\u4fee\u6539\u65f6\u95f4 func ( article * Article ) BeforeUpdate ( scope * gorm . Scope ) error { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) return nil } // ExistArticleByID \u5224\u65ad\u662f\u5426\u5b58\u5728\u6587\u7ae0 func ExistArticleByID ( id int ) bool { var article Article db . Select ( \"id\" ). Where ( \"id = ?\" , id ). Find ( & article ) if article . ID > 0 { return true } return false } // GetArticleTotal \u8ba1\u7b97\u6587\u7ae0\u6570\u91cf func GetArticleTotal ( maps interface {}) ( count int ) { // \u5728Article\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u6240\u6709\u6570\u636e\u540e\u8ba1\u6570\u8fd4\u56de\u7ed9count db . Model ( & Article {}). Where ( maps ). Count ( & count ) return count } // GetArticles \u83b7\u53d6\u6240\u6709\u6587\u7ae0\u5217\u8868 func GetArticles ( pageNum int , pageSize int , maps interface {}) ( articles [] Article ) { // \u6839\u636e\u6761\u4ef6\u9884\u52a0\u8f7d db . Preload ( \"Tag\" ). Where ( maps ). Offset ( pageNum ). Limit ( pageSize ). Find ( & articles ) return articles } // GetArticle \u83b7\u53d6\u5355\u7bc7\u6587\u7ae0 func GetArticle ( id int ) ( article Article ) { // \u627e\u5230\u8be5\u7247\u6587\u7ae0, \u8fd4\u56de\u5230article\u4e2d db . Where ( \"id = ?\" , id ). First ( & article ) // \u83b7\u53d6\u4e0e\u8be5\u7bc7\u6587\u7ae0\u6709\u5173\u7684Tag // \u901a\u8fc7.Related\u5173\u8054\u5230\u5d4c\u5957\u5728Article\u5185\u7684Tag\u7ed3\u6784\u4f53 db . Model ( & article ). Related ( & article . Tag ) return article } // EditArticle \u7f16\u8f91\u6587\u7ae0 func EditArticle ( id int , data interface {}) bool { db . Model ( & Article {}). Where ( \"id = ?\" , id ). Update ( data ) return true } // AddArticle \u6dfb\u52a0\u6587\u7ae0 func AddArticle ( data map [ string ] interface {}) bool { db . Create ( & Article { // v.(I)\u7c7b\u578b\u65ad\u8a00: \u5224\u65ad\u63a5\u53e3v\u7684\u5b9e\u9645\u7c7b\u578b\u662f\u5426\u4e3a(I)\u7c7b\u578b TagID : data [ \"tag_id\" ].( int ), Title : data [ \"title\" ].( string ), Desc : data [ \"desc\" ].( string ), Content : data [ \"content\" ].( string ), CreatedBy : data [ \"created_by\" ].( string ), State : data [ \"state\" ].( int ), }) return true } // DeleteArticle \u5220\u9664\u6587\u7ae0 func DeleteArticle ( id int ) bool { db . Where ( \"id = ?\" , id ). Delete ( Article {}) return true }","title":"\u5b9a\u4e49\u6587\u7ae0\u7684\u6570\u636e\u5e93\u6a21\u578b"},{"location":"Golang/Project/go-gin-example/05 JWT/","text":"go-gin-example 05\uff1aJWT \u4e3a\u4ec0\u4e48\u8981JWT \u5f53\u524d\u7684API\u63a5\u53e3\u867d\u7136\u7f16\u5199\u597d\u4e86\uff0c\u4f46\u662f\u8fd9\u4e9bAPI\u53ef\u4ee5\u88ab\u968f\u610f\u8c03\u7528\uff0c\u8fd9\u6837\u5b50\u662f\u4e0d\u5b89\u5168\u7684\u3002\u56e0\u6b64\u9700\u8981\u901a\u8fc7 jwt-go \u7684\u65b9\u5f0f\u6765\u89e3\u51b3 \u5982\u4f55\u4f7f\u7528JWT \u4e0b\u8f7d\u4f9d\u8d56\u5305\uff1a go get -u github.com/dgrijalva/jwt-go \u7f16\u5199 ./pkg/util \u4e0b\u7684\u65b0\u5efa jwt.go \u6587\u4ef6 \u5176\u4e2d\u8be5\u5de5\u5177\u5305\u4e3b\u8981\u5305\u542b \u751f\u6210Token \u3001 \u89e3\u6790Token \u529f\u80fd NewWithClaims \u4e2d\u52a0\u5bc6\u65b9\u6cd5\u6709 SigningMethodHS256 \uff0c SigningMethodHS384 \u3001 SigningMethodHS512 \u4e09\u79cd cropto.Hash \u65b9\u6848 package util import ( setting \"go-gin-example/pkg/settings\" \"time\" \"github.com/dgrijalva/jwt-go\" ) var jwtSecret = [] byte ( setting . JwtSecret ) // Claims \u58f0\u660eClaims\u7ed3\u6784\u4f53 type Claims struct { Username string `json: \"username\"` Password string `json: \"password\"` jwt . StandardClaims } // GenerateToken \u751f\u6210\u5bc6\u94a5 func GenerateToken ( username , password string ) ( string , error ) { nowTime := time . Now () expireTime := nowTime . Add ( 3 * time . Hour ) claims := Claims { username , password , jwt . StandardClaims { ExpiresAt : expireTime . Unix (), Issuer : \"gin-blog\" , }, } // \u5bf9claims \u8fdb\u884c\u52a0\u5bc6 tokenClaims := jwt . NewWithClaims ( jwt . SigningMethodHS256 , claims ) // \u83b7\u5f97\u52a0\u5bc6\u540e\u7684token // \u731c\u6d4b\u4e3a\u751f\u6210\u4e00\u4e2a\u52a0\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u7ed9jwtSecret token , err := tokenClaims . SignedString ( jwtSecret ) return token , err } // ParseToken \u89e3\u6790\u5bc6\u94a5 func ParseToken ( token string ) ( * Claims , error ) { tokenClaims , err := jwt . ParseWithClaims ( token , & Claims {}, func ( token * jwt . Token ) ( interface {}, error ) { return jwtSecret , nil }) if tokenClaims != nil { if claims , ok := tokenClaims . Claims .( * Claims ); ok && tokenClaims . Valid { return claims , nil } } return nil , err } \u7f16\u5199Gin\u4e2d\u95f4\u4ef6\uff0c\u5728 middleware \u4e0b\u65b0\u5efa jwt \u76ee\u5f55\uff0c\u5728\u5176\u4e2d\u65b0\u5efa jwt.go \u6587\u4ef6\u5199\u5165 package jwt import ( \"go-gin-example/pkg/e\" \"go-gin-example/pkg/util\" \"net/http\" \"time\" \"github.com/gin-gonic/gin\" ) // JWT json web token func JWT () gin . HandlerFunc { return func ( c * gin . Context ) { var code int var data interface {} code = e . SUCCESS token := c . Query ( \"token\" ) if token == \"\" { code = e . INVALID_PARAMS } else { claims , err := util . ParseToken ( token ) if err != nil { code = e . ERROR_AUTH_CHECK_TOKEN_FAIL } else if time . Now (). Unix () > claims . ExpiresAt { code = e . ERROR_AUTH_CHECK_TOKEN_TIMEOUT } } if code != e . SUCCESS { c . JSON ( http . StatusUnauthorized , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) // \u901a\u8fc7Abort\u786e\u4fdd\u5f53\u524d\u7684handler\u672a\u88ab\u8c03\u7528, \u5373\u5f53\u9a8c\u8bc1\u4e0d\u6b63\u786e\u7684\u65f6\u5019\u4e22\u5f03\u6389\u8be5\u5904\u7406 c . Abort () return } c . Next () } } \u83b7\u5f97token\uff0c\u5728 ./models \u4e0b\u65b0\u5efa auth.go \u6587\u4ef6\u5199\u5165 package models // Auth Token\u8ba4\u8bc1 type Auth struct { ID int `gorm:\"primary_key\" json:\"id\"` Username string `json:\"username\"` Password string `json:\"password\"` } // CheckAuth \u9a8c\u8bc1token func CheckAuth ( username , password string ) bool { var auth Auth db . Select ( \"id\" ). Where ( Auth { Username : username , Password : password }). First ( & auth ) if auth . ID > 0 { return true } return false } \u5728 ./api \u4e0b\u65b0\u5efa auth.go \u6587\u4ef6\u5199\u5165 package api import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" \"go-gin-example/pkg/util\" \"log\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" ) type auth struct { Username string `valid: \"Required; MaxSize(50)\" ` Password string `valid: \"Required; MaxSize(50)\"` } // GetAuth \u83b7\u53d6\u8ba4\u8bc1 func GetAuth ( c * gin . Context ) { username := c . Query ( \"username\" ) password := c . Query ( \"password\" ) valid := validation . Validation {} a := auth { Username : username , Password : password } ok , _ := valid . Valid ( & a ) data := make ( map [ string ] interface {}) code := e . INVALID_PARAMS if ok { isExist := models . CheckAuth ( username , password ) // \u5982\u679c\u5b58\u5728\u8be5\u8d26\u53f7 if isExist { token , err := util . GenerateToken ( username , password ) if err != nil { code = e . ERROR_AUTH_TOKEN } else { data [ \"token\" ] = token code = e . SUCCESS } } else { // \u4e0d\u5b58\u5728\u8d26\u53f7 code = e . ERROR_AUTH } } else { for _ , err := range valid . Errors { log . Println ( err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } \u4fee\u6539 router.go \u6587\u4ef6 package routers import ( \"go-gin-example/middleware/jwt\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/routers/api\" v1 \"go-gin-example/routers/api/v1\" \"github.com/gin-gonic/gin\" ) // InitRouter \u521d\u59cb\u5316\u8def\u7531 func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) // \u8c03\u7528\u8ba4\u8bc1\u63a5\u53e3 r . GET ( \"/auth\" , api . GetAuth ) apiv1 := r . Group ( \"/api/v1\" ) // Group\u5185\u7684\u6240\u6709\u8bf7\u6c42\u90fd\u9700\u8981\u7ecf\u8fc7JWT apiv1 . Use ( jwt . JWT ()) { apiv1 . GET ( \"/tags\" , v1 . GetTags ) apiv1 . POST ( \"/tags\" , v1 . AddTag ) apiv1 . PUT ( \"/tags/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/tags/:id\" , v1 . DeleteTag ) apiv1 . GET ( \"/articles\" , v1 . GetArticles ) apiv1 . GET ( \"/articles/:id\" , v1 . GetArticle ) apiv1 . POST ( \"/articles\" , v1 . AddArticle ) apiv1 . PUT ( \"/articles/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/atricles/:id\" , v1 . DeleteTag ) } return r } \u8c03\u7528 \u8bbf\u95ee http://127.0.0.1:8000/auth?username=test&password=test123456 \u83b7\u5f97token \u5e26\u7740token\u8bbf\u95eeapi http://127.0.0.1:8000/api/v1/articles?token=eyJhbGci...","title":"go-gin-example 05\uff1aJWT"},{"location":"Golang/Project/go-gin-example/05 JWT/#go-gin-example-05jwt","text":"","title":"go-gin-example 05\uff1aJWT"},{"location":"Golang/Project/go-gin-example/05 JWT/#jwt","text":"\u5f53\u524d\u7684API\u63a5\u53e3\u867d\u7136\u7f16\u5199\u597d\u4e86\uff0c\u4f46\u662f\u8fd9\u4e9bAPI\u53ef\u4ee5\u88ab\u968f\u610f\u8c03\u7528\uff0c\u8fd9\u6837\u5b50\u662f\u4e0d\u5b89\u5168\u7684\u3002\u56e0\u6b64\u9700\u8981\u901a\u8fc7 jwt-go \u7684\u65b9\u5f0f\u6765\u89e3\u51b3","title":"\u4e3a\u4ec0\u4e48\u8981JWT"},{"location":"Golang/Project/go-gin-example/05 JWT/#jwt_1","text":"\u4e0b\u8f7d\u4f9d\u8d56\u5305\uff1a go get -u github.com/dgrijalva/jwt-go \u7f16\u5199 ./pkg/util \u4e0b\u7684\u65b0\u5efa jwt.go \u6587\u4ef6 \u5176\u4e2d\u8be5\u5de5\u5177\u5305\u4e3b\u8981\u5305\u542b \u751f\u6210Token \u3001 \u89e3\u6790Token \u529f\u80fd NewWithClaims \u4e2d\u52a0\u5bc6\u65b9\u6cd5\u6709 SigningMethodHS256 \uff0c SigningMethodHS384 \u3001 SigningMethodHS512 \u4e09\u79cd cropto.Hash \u65b9\u6848 package util import ( setting \"go-gin-example/pkg/settings\" \"time\" \"github.com/dgrijalva/jwt-go\" ) var jwtSecret = [] byte ( setting . JwtSecret ) // Claims \u58f0\u660eClaims\u7ed3\u6784\u4f53 type Claims struct { Username string `json: \"username\"` Password string `json: \"password\"` jwt . StandardClaims } // GenerateToken \u751f\u6210\u5bc6\u94a5 func GenerateToken ( username , password string ) ( string , error ) { nowTime := time . Now () expireTime := nowTime . Add ( 3 * time . Hour ) claims := Claims { username , password , jwt . StandardClaims { ExpiresAt : expireTime . Unix (), Issuer : \"gin-blog\" , }, } // \u5bf9claims \u8fdb\u884c\u52a0\u5bc6 tokenClaims := jwt . NewWithClaims ( jwt . SigningMethodHS256 , claims ) // \u83b7\u5f97\u52a0\u5bc6\u540e\u7684token // \u731c\u6d4b\u4e3a\u751f\u6210\u4e00\u4e2a\u52a0\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u7ed9jwtSecret token , err := tokenClaims . SignedString ( jwtSecret ) return token , err } // ParseToken \u89e3\u6790\u5bc6\u94a5 func ParseToken ( token string ) ( * Claims , error ) { tokenClaims , err := jwt . ParseWithClaims ( token , & Claims {}, func ( token * jwt . Token ) ( interface {}, error ) { return jwtSecret , nil }) if tokenClaims != nil { if claims , ok := tokenClaims . Claims .( * Claims ); ok && tokenClaims . Valid { return claims , nil } } return nil , err } \u7f16\u5199Gin\u4e2d\u95f4\u4ef6\uff0c\u5728 middleware \u4e0b\u65b0\u5efa jwt \u76ee\u5f55\uff0c\u5728\u5176\u4e2d\u65b0\u5efa jwt.go \u6587\u4ef6\u5199\u5165 package jwt import ( \"go-gin-example/pkg/e\" \"go-gin-example/pkg/util\" \"net/http\" \"time\" \"github.com/gin-gonic/gin\" ) // JWT json web token func JWT () gin . HandlerFunc { return func ( c * gin . Context ) { var code int var data interface {} code = e . SUCCESS token := c . Query ( \"token\" ) if token == \"\" { code = e . INVALID_PARAMS } else { claims , err := util . ParseToken ( token ) if err != nil { code = e . ERROR_AUTH_CHECK_TOKEN_FAIL } else if time . Now (). Unix () > claims . ExpiresAt { code = e . ERROR_AUTH_CHECK_TOKEN_TIMEOUT } } if code != e . SUCCESS { c . JSON ( http . StatusUnauthorized , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) // \u901a\u8fc7Abort\u786e\u4fdd\u5f53\u524d\u7684handler\u672a\u88ab\u8c03\u7528, \u5373\u5f53\u9a8c\u8bc1\u4e0d\u6b63\u786e\u7684\u65f6\u5019\u4e22\u5f03\u6389\u8be5\u5904\u7406 c . Abort () return } c . Next () } } \u83b7\u5f97token\uff0c\u5728 ./models \u4e0b\u65b0\u5efa auth.go \u6587\u4ef6\u5199\u5165 package models // Auth Token\u8ba4\u8bc1 type Auth struct { ID int `gorm:\"primary_key\" json:\"id\"` Username string `json:\"username\"` Password string `json:\"password\"` } // CheckAuth \u9a8c\u8bc1token func CheckAuth ( username , password string ) bool { var auth Auth db . Select ( \"id\" ). Where ( Auth { Username : username , Password : password }). First ( & auth ) if auth . ID > 0 { return true } return false } \u5728 ./api \u4e0b\u65b0\u5efa auth.go \u6587\u4ef6\u5199\u5165 package api import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" \"go-gin-example/pkg/util\" \"log\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" ) type auth struct { Username string `valid: \"Required; MaxSize(50)\" ` Password string `valid: \"Required; MaxSize(50)\"` } // GetAuth \u83b7\u53d6\u8ba4\u8bc1 func GetAuth ( c * gin . Context ) { username := c . Query ( \"username\" ) password := c . Query ( \"password\" ) valid := validation . Validation {} a := auth { Username : username , Password : password } ok , _ := valid . Valid ( & a ) data := make ( map [ string ] interface {}) code := e . INVALID_PARAMS if ok { isExist := models . CheckAuth ( username , password ) // \u5982\u679c\u5b58\u5728\u8be5\u8d26\u53f7 if isExist { token , err := util . GenerateToken ( username , password ) if err != nil { code = e . ERROR_AUTH_TOKEN } else { data [ \"token\" ] = token code = e . SUCCESS } } else { // \u4e0d\u5b58\u5728\u8d26\u53f7 code = e . ERROR_AUTH } } else { for _ , err := range valid . Errors { log . Println ( err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } \u4fee\u6539 router.go \u6587\u4ef6 package routers import ( \"go-gin-example/middleware/jwt\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/routers/api\" v1 \"go-gin-example/routers/api/v1\" \"github.com/gin-gonic/gin\" ) // InitRouter \u521d\u59cb\u5316\u8def\u7531 func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) // \u8c03\u7528\u8ba4\u8bc1\u63a5\u53e3 r . GET ( \"/auth\" , api . GetAuth ) apiv1 := r . Group ( \"/api/v1\" ) // Group\u5185\u7684\u6240\u6709\u8bf7\u6c42\u90fd\u9700\u8981\u7ecf\u8fc7JWT apiv1 . Use ( jwt . JWT ()) { apiv1 . GET ( \"/tags\" , v1 . GetTags ) apiv1 . POST ( \"/tags\" , v1 . AddTag ) apiv1 . PUT ( \"/tags/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/tags/:id\" , v1 . DeleteTag ) apiv1 . GET ( \"/articles\" , v1 . GetArticles ) apiv1 . GET ( \"/articles/:id\" , v1 . GetArticle ) apiv1 . POST ( \"/articles\" , v1 . AddArticle ) apiv1 . PUT ( \"/articles/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/atricles/:id\" , v1 . DeleteTag ) } return r } \u8c03\u7528 \u8bbf\u95ee http://127.0.0.1:8000/auth?username=test&password=test123456 \u83b7\u5f97token \u5e26\u7740token\u8bbf\u95eeapi http://127.0.0.1:8000/api/v1/articles?token=eyJhbGci...","title":"\u5982\u4f55\u4f7f\u7528JWT"},{"location":"Golang/Project/go-gin-example/08 Swagger/","text":"go-gin-example 08\uff1a Swagger Swagger\u662f\u4ec0\u4e48? \u63a5\u53e3\u751f\u6210\u5668\uff1a\u81ea\u52a8\u751f\u6210\u63a5\u53e3\u6587\u6863 \u5982\u4f55\u5728golang\u4e2d\u4f7f\u7528Swagger \u5b89\u88c5 \u5b89\u88c5swag go get -u github.com/swaggo/swag/cmd/swag \uff0c\u5982\u679c\u6ca1\u6709\u5c06 $GOROOT/bin \u6dfb\u52a0\u5230 $PATH \u4e2d\uff0c\u5219\u9700\u8981\u5c06swag\u7684\u53ef\u6267\u884c\u6587\u4ef6\u79fb\u5230 $GOBIN \u4e2d \u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f $ swag -v swag version v1.6.3 \u5b89\u88c5gin-swagger go get -u github.com/swaggo/gin-swagger go get -u github.com/swaggo/gin-swagger/swaggerFiles \u7f16\u5199swag // Response \u5b9a\u4e49swag\u6587\u6863\u8fd4\u56de\u7684\u7ed3\u6784\u4f53 type Response struct { Code int ` json : \"code\" ` Msg string ` json : \"msg\" ` Data interface {} ` json : \"data\" ` } // GetArticles \u83b7\u53d6\u591a\u4e2a\u6587\u7ae0 // @Summary \u83b7\u53d6\u591a\u4e2a\u6587\u7ae0 // @Produce json // @Param tag_id body int false \"TagID\" // @Param state body int false \"State\" // @Param created_by body int false \"CreatedBy\" // @Success 200 { object } Response // @Failure 500 { object } Response // @Router / api / v1 / articles [ get ] func GetArticles ( c * gin . Context ) { data : = make ( map [ string ] interface {} ) maps : = make ( map [ string ] interface {} ) valid : = validation . Validation {} var state = - 1 if arg : = c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"\u72b6\u6001\u53ea\u5141\u8bb80\u62161\" ) } var tagID = - 1 if arg : = c . Query ( \"tag_id\" ); arg != \"\" { tagID = com . StrTo ( arg ). MustInt () maps [ \"tag_id\" ] = tagID valid . Min ( tagID , 1 , \"tag_id\" ). Message ( \"\u6807\u7b7eID\u5fc5\u987b\u5927\u4e8e0\" ) } code : = e . INVALID_PARAMS if ! valid . HasErrors () { data [ \"list\" ] = models . GetArticles ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) code = e . SUCCESS } else { for _ , err : = range valid . Errors { log . Printf ( \"err.key:%s, err.message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , } ) } \u683c\u5f0f // @Summary API\u63cf\u8ff0 // @Produce json[\u751f\u6210..\u5185\u5bb9] // @Param id path/body/query int[type] false/true \"ID\"[\u7a0b\u5e8f\u4e2d\u5bf9\u5e94\u53d8\u91cf\u540d\u5b57] // @Success 200 string \"ok\" --\u6210\u529f\u8fd4\u56de\u4fe1\u606f // @Failure 500 string \"bad\" --\u5931\u8d25\u8fd4\u56de\u4fe1\u606f // @Routers api/v1/article/{id} [GET] \u8bf7\u6c42id, \u8bf7\u6c42\u65b9\u6cd5 \u6548\u679c \u8bbf\u95ee http://127.0.0.1:8000/swagger/index.html","title":"go-gin-example 08\uff1a Swagger"},{"location":"Golang/Project/go-gin-example/08 Swagger/#go-gin-example-08-swagger","text":"","title":"go-gin-example 08\uff1a Swagger"},{"location":"Golang/Project/go-gin-example/08 Swagger/#swagger","text":"\u63a5\u53e3\u751f\u6210\u5668\uff1a\u81ea\u52a8\u751f\u6210\u63a5\u53e3\u6587\u6863","title":"Swagger\u662f\u4ec0\u4e48?"},{"location":"Golang/Project/go-gin-example/08 Swagger/#golangswagger","text":"","title":"\u5982\u4f55\u5728golang\u4e2d\u4f7f\u7528Swagger"},{"location":"Golang/Project/go-gin-example/08 Swagger/#_1","text":"\u5b89\u88c5swag go get -u github.com/swaggo/swag/cmd/swag \uff0c\u5982\u679c\u6ca1\u6709\u5c06 $GOROOT/bin \u6dfb\u52a0\u5230 $PATH \u4e2d\uff0c\u5219\u9700\u8981\u5c06swag\u7684\u53ef\u6267\u884c\u6587\u4ef6\u79fb\u5230 $GOBIN \u4e2d \u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f $ swag -v swag version v1.6.3 \u5b89\u88c5gin-swagger go get -u github.com/swaggo/gin-swagger go get -u github.com/swaggo/gin-swagger/swaggerFiles","title":"\u5b89\u88c5"},{"location":"Golang/Project/go-gin-example/08 Swagger/#swag","text":"// Response \u5b9a\u4e49swag\u6587\u6863\u8fd4\u56de\u7684\u7ed3\u6784\u4f53 type Response struct { Code int ` json : \"code\" ` Msg string ` json : \"msg\" ` Data interface {} ` json : \"data\" ` } // GetArticles \u83b7\u53d6\u591a\u4e2a\u6587\u7ae0 // @Summary \u83b7\u53d6\u591a\u4e2a\u6587\u7ae0 // @Produce json // @Param tag_id body int false \"TagID\" // @Param state body int false \"State\" // @Param created_by body int false \"CreatedBy\" // @Success 200 { object } Response // @Failure 500 { object } Response // @Router / api / v1 / articles [ get ] func GetArticles ( c * gin . Context ) { data : = make ( map [ string ] interface {} ) maps : = make ( map [ string ] interface {} ) valid : = validation . Validation {} var state = - 1 if arg : = c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"\u72b6\u6001\u53ea\u5141\u8bb80\u62161\" ) } var tagID = - 1 if arg : = c . Query ( \"tag_id\" ); arg != \"\" { tagID = com . StrTo ( arg ). MustInt () maps [ \"tag_id\" ] = tagID valid . Min ( tagID , 1 , \"tag_id\" ). Message ( \"\u6807\u7b7eID\u5fc5\u987b\u5927\u4e8e0\" ) } code : = e . INVALID_PARAMS if ! valid . HasErrors () { data [ \"list\" ] = models . GetArticles ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) code = e . SUCCESS } else { for _ , err : = range valid . Errors { log . Printf ( \"err.key:%s, err.message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , } ) } \u683c\u5f0f // @Summary API\u63cf\u8ff0 // @Produce json[\u751f\u6210..\u5185\u5bb9] // @Param id path/body/query int[type] false/true \"ID\"[\u7a0b\u5e8f\u4e2d\u5bf9\u5e94\u53d8\u91cf\u540d\u5b57] // @Success 200 string \"ok\" --\u6210\u529f\u8fd4\u56de\u4fe1\u606f // @Failure 500 string \"bad\" --\u5931\u8d25\u8fd4\u56de\u4fe1\u606f // @Routers api/v1/article/{id} [GET] \u8bf7\u6c42id, \u8bf7\u6c42\u65b9\u6cd5","title":"\u7f16\u5199swag"},{"location":"Golang/Project/go-gin-example/08 Swagger/#_2","text":"\u8bbf\u95ee http://127.0.0.1:8000/swagger/index.html","title":"\u6548\u679c"},{"location":"Golang/Project/go-gin-example/09 Docker/","text":"go-gin-example 09\uff1aDocker Docker\u662f\u4ec0\u4e48 Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers.[6] Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels.[7] All containers are run by a single operating-system kernel and are thus more lightweight than virtual machines.[8] Docker\u662fPaas\u7684\u4ea7\u54c1, \u901a\u8fc7\u88ab\u6210\u4e3a \u5bb9\u5668 \u7684 \u7cfb\u7edf\u7ea7\u522b \u7684\u865a\u62df\u5316\u4ea4\u4ed8\u8f6f\u4ef6. \u5982\u4f55\u4f7f\u7528Docker \u5b89\u88c5Docker(WIN10 PRO) \u53f3\u952eWINDOWS - \u5e94\u7528\u548c\u529f\u80fd - \u7a0b\u5e8f\u548c\u529f\u80fd - \u542f\u7528\u6216\u5173\u95edWINDOS\u529f\u80fd - \u5f00\u542fHyper-V \u5f00\u542f Hyper-V \u53ef\u80fd\u5bfc\u81f4 ShadowSocksR \u7aef\u53e3\u88ab\u5360\u7528 \u5b98\u7f51 Docker\u57fa\u672c\u6307\u4ee4 \u7f16\u5199Dockerfile FROM golang:latest ENV GOPROXY https://goproxy.cn,direct WORKDIR $GOPATH /src/go-gin-example COPY . $GOPATH /src/go-gin-example RUN go build . EXPOSE 8000 ENTRYPOINT [ \"./go-gin-example\" ] 1. FROM : \u6307\u5b9a\u57fa\u7840\u955c\u50cf, \u8be5\u6307\u4ee4\u5fc5\u987b\u8981\u6709,\u4e14\u5f97\u4e3a\u7b2c\u4e00\u6761 2. WORKDIR : \u6307\u5b9a\u5de5\u4f5c\u76ee\u5f55\u8def\u5f84, \u82e5\u76ee\u5f55\u4e0d\u5b58\u5728, \u5219\u4f1a\u521b\u5efa\u6539\u76ee\u5f55 3. COPY : \u6e90\u8def\u5f84 ... \u76ee\u6807\u8def\u5f84, COPY \u6307\u4ee4\u5c06 Dockerfile \u6587\u4ef6\u6240\u5b58\u5728\u7684\u4e0a\u4e0b\u6587\u76ee\u5f55 \u590d\u5236 \u5230\u76ee\u6807\u8def\u5f84\u4f4d\u7f6e 4. RUN : \u6267\u884c\u547d\u4ee4 5. EXPOSE : \u58f0\u660e \u8fd0\u884c\u65f6\u5bb9\u5668 \u63d0\u4f9b\u670d\u52a1\u7aef\u53e3, \u4ec5\u4ec5\u662f\u4e00\u4e2a \u58f0\u660e , \u4e0d\u4f1a\u56e0\u4e3a\u8fd9\u4e2a\u58f0\u660e\u800c\u5f00\u542f\u8fd9\u4e2a\u7aef\u53e3 6. ENTRYPOINT : \u6307\u5b9a \u5bb9\u5668 \u542f\u52a8\u7a0b\u5e8f\u7684\u53ca\u53c2\u6570(\u6267\u884c ./go-gin-example) \u8fd0\u884c docker build -t gin-blog-docker . docker images docker run -p 8000:8000 gin-blog-docker 1. \u5728 . \u5f53\u524d\u73af\u5883\u8fd0\u884c docker build \u521b\u5efa/\u6784\u5efa\u955c\u50cf, -t \u6307\u5b9a\u540d\u79f0 2. docker images \u67e5\u770b\u955c\u50cf\u662f\u5426\u521b\u5efa\u6210\u529f 3. \u5728\u672c\u57308000\u7aef\u53e3\u8fd0\u884c\u5bb9\u5668 4. \u53d1\u73b0 dial tcp 127.0.0.1:3306: connect: connection refused \u9519\u8bef \u914d\u7f6eMysql Docker docker pull mysql docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql 1. \u62c9\u53d6mysql\u955c\u50cf 2. \u914d\u7f6emysql\u7aef\u53e3 \u4fee\u6539\u914d\u7f6e\u6587\u4ef6 conf.ini [database] TYPE = mysql USER = root PASSWORD = rootroot HOST = mysql:3306 NAME = blog TABLE_PREFIX = blog_ \u5173\u8054Golang\u5bb9\u5668\u548cMysql\u5bb9\u5668 docker run --link mysql:mysql -p 8000:8000 gin-blog-docker \u6548\u679c","title":"go-gin-example 09\uff1aDocker"},{"location":"Golang/Project/go-gin-example/09 Docker/#go-gin-example-09docker","text":"","title":"go-gin-example 09\uff1aDocker"},{"location":"Golang/Project/go-gin-example/09 Docker/#docker","text":"Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers.[6] Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels.[7] All containers are run by a single operating-system kernel and are thus more lightweight than virtual machines.[8] Docker\u662fPaas\u7684\u4ea7\u54c1, \u901a\u8fc7\u88ab\u6210\u4e3a \u5bb9\u5668 \u7684 \u7cfb\u7edf\u7ea7\u522b \u7684\u865a\u62df\u5316\u4ea4\u4ed8\u8f6f\u4ef6.","title":"Docker\u662f\u4ec0\u4e48"},{"location":"Golang/Project/go-gin-example/09 Docker/#docker_1","text":"","title":"\u5982\u4f55\u4f7f\u7528Docker"},{"location":"Golang/Project/go-gin-example/09 Docker/#dockerwin10-pro","text":"\u53f3\u952eWINDOWS - \u5e94\u7528\u548c\u529f\u80fd - \u7a0b\u5e8f\u548c\u529f\u80fd - \u542f\u7528\u6216\u5173\u95edWINDOS\u529f\u80fd - \u5f00\u542fHyper-V \u5f00\u542f Hyper-V \u53ef\u80fd\u5bfc\u81f4 ShadowSocksR \u7aef\u53e3\u88ab\u5360\u7528 \u5b98\u7f51","title":"\u5b89\u88c5Docker(WIN10 PRO)"},{"location":"Golang/Project/go-gin-example/09 Docker/#docker_2","text":"","title":"Docker\u57fa\u672c\u6307\u4ee4"},{"location":"Golang/Project/go-gin-example/09 Docker/#dockerfile","text":"FROM golang:latest ENV GOPROXY https://goproxy.cn,direct WORKDIR $GOPATH /src/go-gin-example COPY . $GOPATH /src/go-gin-example RUN go build . EXPOSE 8000 ENTRYPOINT [ \"./go-gin-example\" ] 1. FROM : \u6307\u5b9a\u57fa\u7840\u955c\u50cf, \u8be5\u6307\u4ee4\u5fc5\u987b\u8981\u6709,\u4e14\u5f97\u4e3a\u7b2c\u4e00\u6761 2. WORKDIR : \u6307\u5b9a\u5de5\u4f5c\u76ee\u5f55\u8def\u5f84, \u82e5\u76ee\u5f55\u4e0d\u5b58\u5728, \u5219\u4f1a\u521b\u5efa\u6539\u76ee\u5f55 3. COPY : \u6e90\u8def\u5f84 ... \u76ee\u6807\u8def\u5f84, COPY \u6307\u4ee4\u5c06 Dockerfile \u6587\u4ef6\u6240\u5b58\u5728\u7684\u4e0a\u4e0b\u6587\u76ee\u5f55 \u590d\u5236 \u5230\u76ee\u6807\u8def\u5f84\u4f4d\u7f6e 4. RUN : \u6267\u884c\u547d\u4ee4 5. EXPOSE : \u58f0\u660e \u8fd0\u884c\u65f6\u5bb9\u5668 \u63d0\u4f9b\u670d\u52a1\u7aef\u53e3, \u4ec5\u4ec5\u662f\u4e00\u4e2a \u58f0\u660e , \u4e0d\u4f1a\u56e0\u4e3a\u8fd9\u4e2a\u58f0\u660e\u800c\u5f00\u542f\u8fd9\u4e2a\u7aef\u53e3 6. ENTRYPOINT : \u6307\u5b9a \u5bb9\u5668 \u542f\u52a8\u7a0b\u5e8f\u7684\u53ca\u53c2\u6570(\u6267\u884c ./go-gin-example)","title":"\u7f16\u5199Dockerfile"},{"location":"Golang/Project/go-gin-example/09 Docker/#_1","text":"docker build -t gin-blog-docker . docker images docker run -p 8000:8000 gin-blog-docker 1. \u5728 . \u5f53\u524d\u73af\u5883\u8fd0\u884c docker build \u521b\u5efa/\u6784\u5efa\u955c\u50cf, -t \u6307\u5b9a\u540d\u79f0 2. docker images \u67e5\u770b\u955c\u50cf\u662f\u5426\u521b\u5efa\u6210\u529f 3. \u5728\u672c\u57308000\u7aef\u53e3\u8fd0\u884c\u5bb9\u5668 4. \u53d1\u73b0 dial tcp 127.0.0.1:3306: connect: connection refused \u9519\u8bef","title":"\u8fd0\u884c"},{"location":"Golang/Project/go-gin-example/09 Docker/#mysql-docker","text":"docker pull mysql docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql 1. \u62c9\u53d6mysql\u955c\u50cf 2. \u914d\u7f6emysql\u7aef\u53e3","title":"\u914d\u7f6eMysql Docker"},{"location":"Golang/Project/go-gin-example/09 Docker/#confini","text":"[database] TYPE = mysql USER = root PASSWORD = rootroot HOST = mysql:3306 NAME = blog TABLE_PREFIX = blog_","title":"\u4fee\u6539\u914d\u7f6e\u6587\u4ef6conf.ini"},{"location":"Golang/Project/go-gin-example/09 Docker/#golangmysql","text":"docker run --link mysql:mysql -p 8000:8000 gin-blog-docker","title":"\u5173\u8054Golang\u5bb9\u5668\u548cMysql\u5bb9\u5668"},{"location":"Golang/Project/go-gin-example/09 Docker/#_2","text":"","title":"\u6548\u679c"},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/","text":"go-gin-example 10\uff1a GORM-Callback \u5b9a\u5236GORM Callbacks GORM Callback \u662f\u4ec0\u4e48 You could define callback methods to pointer of model struct, it will be called when creating, updating, querying, deleting, if any callback returns an error, gorm will stop future operations and rollback all changes. \u53ef\u4ee5\u7ed9\u6a21\u578b\u7ed3\u6784\u4f53\u6307\u9488\u5b9a\u4e49\u56de\u8c03\u51fd\u6570, \u5b83\u5c06\u4f1a\u5728\u88ab\u521b\u5efa/\u66f4\u65b0/\u67e5\u8be2/\u5220\u9664\u7684\u65f6\u5019\u8c03\u7528, \u5982\u679c\u56de\u8c03\u8fd4\u56de\u4e86\u9519\u8bef, gorm\u4f1a\u505c\u6b62\u672a\u6765\u884c\u4e3a\u64cd\u4f5c\u5e76\u4e14\u56de\u9000\u6240\u6709\u6539\u53d8. \u4e4b\u524d\u7a0b\u5e8f\u672a\u5b9e\u73b0 Callback \u65b9\u6cd5, \u9700\u8981\u4e3a\u6240\u6709\u6587\u4ef6\u5355\u72ec\u5199\u4e00\u6b21 BeforeCreate \u3001 BeforeUpdate \u65b9\u6cd5 \u4f7f\u7528 gorm\u652f\u6301\u7684callback\u65b9\u6cd5 \u521b\u5efa\uff1aBeforeSave\u3001BeforeCreate\u3001AfterCreate\u3001AfterSave \u66f4\u65b0\uff1aBeforeSave\u3001BeforeUpdate\u3001AfterUpdate\u3001AfterSave \u5220\u9664\uff1aBeforeDelete\u3001AfterDelete \u67e5\u8be2\uff1aAfterFind \u5b9a\u4e49callback \u5728 model.go \u6587\u4ef6\u4e2d\u5b9a\u4e49 // updateTimeStampForCreateCallback will set `CreatedOn`, `ModifiedOn` when creating func updateTimeStampForCreateCallback ( scope * gorm . Scope ) { if ! scope . HasError () { nowTime := time . Now (). Unix () if createTimeField , ok := scope . FieldByName ( \"CreatedOn\" ); ok { if createTimeField . IsBlank { createTimeField . Set ( nowTime ) } } if modifyTimeField , ok := scope . FieldByName ( \"ModifiedOn\" ); ok { if modifyTimeField . IsBlank { modifyTimeField . Set ( nowTime ) } } } } // updateTimeStampForUpdateCallback will set `ModifyTime` when updating func updateTimeStampForUpdateCallback ( scope * gorm . Scope ) { if _ , ok := scope . Get ( \"gorm:update_column\" ); ! ok { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) } } \u901a\u8fc7 scope.FieldByName(name) \u5224\u65ad\u662f\u5426\u5b58\u5728\u76f8\u5173\u5b57\u6bb5, \u8be5\u65b9\u6cd5\u901a\u8fc7 scope.Fields() \u83b7\u53d6\u6240\u6709\u5b57\u6bb5 \u901a\u8fc7 .IsBlank \u5224\u65ad\u503c\u662f\u5426\u4e3a\u7a7a \u901a\u8fc7 .Set(interface{}) \u8bbe\u7f6e\u76f8\u5173\u503c \u901a\u8fc7 scope.Get() \u83b7\u53d6\u53c2\u6570\u7684\u53c2\u6570\u503c, \u6848\u4f8b\u4e2d\u56de\u53bb\u67e5\u627e gorm:update_column \u8fd9\u4e2a\u5b57\u6bb5\u7684\u5c5e\u6027 \u901a\u8fc7 scope.SetColumn(Field, value) \u8bbe\u5b9a\u5b57\u6bb5\u7684\u503c \u8c03\u7528callback \u5728 model.go \u7684 ini \u51fd\u6570\u4e2d\u6ce8\u518ccallback db . Callback (). Create (). Replace ( \"gorm:update_time_stamp\" , updateTimeStampForCreateCallback ) db . Callback (). Update (). Replace ( \"gorm:update_time_stamp\" , updateTimeStampForUpdateCallback ) \u6548\u679c \u5f53\u7a0b\u5e8f\u5199\u4e86 Callback \u65b9\u6cd5\u7684\u65f6\u5019, \u5f53GORM\u6267\u884c\u5230\u76f8\u5173\u7684\u64cd\u4f5c\u4f1a\u81ea\u52a8\u89e6\u53d1\u76f8\u5e94\u7684 Callback \u65b9\u6cd5 \u62d3\u5c55 \u8f6f\u5220\u9664, \u6dfb\u52a0\u5220\u9664\u65f6\u95f4, \u4e3a model.go \u7684 Model \u7ed3\u6784\u4f53\u6dfb\u52a0 DeletedOn \u5b57\u6bb5 type Model struct { ID int `gorm:\"primary_key\" json:\"id\"` CreatedOn int `json:\"created_on\"` ModifiedOn int `json:\"modified_on\"` DeletedOn int `json:\"deleted_on\"` } func deleteCallback ( scope * gorm . Scope ) { if ! scope . HasError () { var extraOption string if str , ok := scope . Get ( \"gorm:delete_option\" ); ok { extraOption = fmt . Sprint ( str ) } deletedOnField , hasDeletedOnField := scope . FieldByName ( \"DeletedOn\" ) if ! scope . Search . Unscoped && hasDeletedOnField { scope . Raw ( fmt . Sprintf ( \"UPDATE %v SET %v=%v%v%v\" , scope . QuotedTableName (), scope . Quote ( deletedOnField . DBName ), scope . AddToVars ( time . Now (). Unix ()), addExtraSpaceIfExist ( scope . CombinedConditionSql ()), addExtraSpaceIfExist ( extraOption ), )). Exec () } else { scope . Raw ( fmt . Sprintf ( \"DELETE FROM %v%v%v\" , scope . QuotedTableName (), addExtraSpaceIfExist ( scope . CombinedConditionSql ()), addExtraSpaceIfExist ( extraOption ), )). Exec () } } } func addExtraSpaceIfExist ( str string ) string { if str != \"\" { return \" \" + str } return \"\" } \u5728 model.go \u7684 ini\u51fd\u6570 \u4e2d\u6dfb\u52a0 db.Callback().Delete().Replace(\"gorm:delete\", deleteCallback) 1. scope.QuotedTableName() \u8fd4\u56de\u5f15\u7528\u7684\u8868\u540d 2. scope.Raw() \u6784\u5efa\u539f\u751fsql 3. fmt.Sprintf() \u683c\u5f0f\u5316\u5e76\u4e14\u8fd4\u56de\u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\u6570\u636e 4. scope.AddToVars(value) \u4e3a\u5b57\u6bb5\u6dfb\u52a0\u53c2\u6570 5. scope.Quote() \u8f6c\u4e49 6. scope \u5f53\u4f60\u5728\u6570\u636e\u5e93\u4e2d\u6587\u5b8c\u6210\u4efb\u4f55\u64cd\u4f5c, scope\u5305\u542b\u4e86\u5f53\u524d\u64cd\u4f5c\u4fe1\u606f // Scope contain current operation's information when you perform any operation on the database type Scope struct { Search * search Value interface {} SQL string SQLVars [] interface {} db * DB instanceID string primaryKeyField * Field skipLeft bool fields * [] * Field selectAttrs * [] string } REF: official: callback in gorm","title":"go-gin-example 10\uff1a GORM-Callback"},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#go-gin-example-10-gorm-callback","text":"","title":"go-gin-example 10\uff1a GORM-Callback"},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#gorm-callbacks","text":"","title":"\u5b9a\u5236GORM Callbacks"},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#gorm-callback","text":"You could define callback methods to pointer of model struct, it will be called when creating, updating, querying, deleting, if any callback returns an error, gorm will stop future operations and rollback all changes. \u53ef\u4ee5\u7ed9\u6a21\u578b\u7ed3\u6784\u4f53\u6307\u9488\u5b9a\u4e49\u56de\u8c03\u51fd\u6570, \u5b83\u5c06\u4f1a\u5728\u88ab\u521b\u5efa/\u66f4\u65b0/\u67e5\u8be2/\u5220\u9664\u7684\u65f6\u5019\u8c03\u7528, \u5982\u679c\u56de\u8c03\u8fd4\u56de\u4e86\u9519\u8bef, gorm\u4f1a\u505c\u6b62\u672a\u6765\u884c\u4e3a\u64cd\u4f5c\u5e76\u4e14\u56de\u9000\u6240\u6709\u6539\u53d8. \u4e4b\u524d\u7a0b\u5e8f\u672a\u5b9e\u73b0 Callback \u65b9\u6cd5, \u9700\u8981\u4e3a\u6240\u6709\u6587\u4ef6\u5355\u72ec\u5199\u4e00\u6b21 BeforeCreate \u3001 BeforeUpdate \u65b9\u6cd5","title":"GORM Callback \u662f\u4ec0\u4e48"},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#_1","text":"","title":"\u4f7f\u7528"},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#gormcallback","text":"\u521b\u5efa\uff1aBeforeSave\u3001BeforeCreate\u3001AfterCreate\u3001AfterSave \u66f4\u65b0\uff1aBeforeSave\u3001BeforeUpdate\u3001AfterUpdate\u3001AfterSave \u5220\u9664\uff1aBeforeDelete\u3001AfterDelete \u67e5\u8be2\uff1aAfterFind","title":"gorm\u652f\u6301\u7684callback\u65b9\u6cd5"},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#callback","text":"\u5728 model.go \u6587\u4ef6\u4e2d\u5b9a\u4e49 // updateTimeStampForCreateCallback will set `CreatedOn`, `ModifiedOn` when creating func updateTimeStampForCreateCallback ( scope * gorm . Scope ) { if ! scope . HasError () { nowTime := time . Now (). Unix () if createTimeField , ok := scope . FieldByName ( \"CreatedOn\" ); ok { if createTimeField . IsBlank { createTimeField . Set ( nowTime ) } } if modifyTimeField , ok := scope . FieldByName ( \"ModifiedOn\" ); ok { if modifyTimeField . IsBlank { modifyTimeField . Set ( nowTime ) } } } } // updateTimeStampForUpdateCallback will set `ModifyTime` when updating func updateTimeStampForUpdateCallback ( scope * gorm . Scope ) { if _ , ok := scope . Get ( \"gorm:update_column\" ); ! ok { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) } } \u901a\u8fc7 scope.FieldByName(name) \u5224\u65ad\u662f\u5426\u5b58\u5728\u76f8\u5173\u5b57\u6bb5, \u8be5\u65b9\u6cd5\u901a\u8fc7 scope.Fields() \u83b7\u53d6\u6240\u6709\u5b57\u6bb5 \u901a\u8fc7 .IsBlank \u5224\u65ad\u503c\u662f\u5426\u4e3a\u7a7a \u901a\u8fc7 .Set(interface{}) \u8bbe\u7f6e\u76f8\u5173\u503c \u901a\u8fc7 scope.Get() \u83b7\u53d6\u53c2\u6570\u7684\u53c2\u6570\u503c, \u6848\u4f8b\u4e2d\u56de\u53bb\u67e5\u627e gorm:update_column \u8fd9\u4e2a\u5b57\u6bb5\u7684\u5c5e\u6027 \u901a\u8fc7 scope.SetColumn(Field, value) \u8bbe\u5b9a\u5b57\u6bb5\u7684\u503c","title":"\u5b9a\u4e49callback"},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#callback_1","text":"\u5728 model.go \u7684 ini \u51fd\u6570\u4e2d\u6ce8\u518ccallback db . Callback (). Create (). Replace ( \"gorm:update_time_stamp\" , updateTimeStampForCreateCallback ) db . Callback (). Update (). Replace ( \"gorm:update_time_stamp\" , updateTimeStampForUpdateCallback )","title":"\u8c03\u7528callback"},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#_2","text":"\u5f53\u7a0b\u5e8f\u5199\u4e86 Callback \u65b9\u6cd5\u7684\u65f6\u5019, \u5f53GORM\u6267\u884c\u5230\u76f8\u5173\u7684\u64cd\u4f5c\u4f1a\u81ea\u52a8\u89e6\u53d1\u76f8\u5e94\u7684 Callback \u65b9\u6cd5","title":"\u6548\u679c"},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#_3","text":"\u8f6f\u5220\u9664, \u6dfb\u52a0\u5220\u9664\u65f6\u95f4, \u4e3a model.go \u7684 Model \u7ed3\u6784\u4f53\u6dfb\u52a0 DeletedOn \u5b57\u6bb5 type Model struct { ID int `gorm:\"primary_key\" json:\"id\"` CreatedOn int `json:\"created_on\"` ModifiedOn int `json:\"modified_on\"` DeletedOn int `json:\"deleted_on\"` } func deleteCallback ( scope * gorm . Scope ) { if ! scope . HasError () { var extraOption string if str , ok := scope . Get ( \"gorm:delete_option\" ); ok { extraOption = fmt . Sprint ( str ) } deletedOnField , hasDeletedOnField := scope . FieldByName ( \"DeletedOn\" ) if ! scope . Search . Unscoped && hasDeletedOnField { scope . Raw ( fmt . Sprintf ( \"UPDATE %v SET %v=%v%v%v\" , scope . QuotedTableName (), scope . Quote ( deletedOnField . DBName ), scope . AddToVars ( time . Now (). Unix ()), addExtraSpaceIfExist ( scope . CombinedConditionSql ()), addExtraSpaceIfExist ( extraOption ), )). Exec () } else { scope . Raw ( fmt . Sprintf ( \"DELETE FROM %v%v%v\" , scope . QuotedTableName (), addExtraSpaceIfExist ( scope . CombinedConditionSql ()), addExtraSpaceIfExist ( extraOption ), )). Exec () } } } func addExtraSpaceIfExist ( str string ) string { if str != \"\" { return \" \" + str } return \"\" } \u5728 model.go \u7684 ini\u51fd\u6570 \u4e2d\u6dfb\u52a0 db.Callback().Delete().Replace(\"gorm:delete\", deleteCallback) 1. scope.QuotedTableName() \u8fd4\u56de\u5f15\u7528\u7684\u8868\u540d 2. scope.Raw() \u6784\u5efa\u539f\u751fsql 3. fmt.Sprintf() \u683c\u5f0f\u5316\u5e76\u4e14\u8fd4\u56de\u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\u6570\u636e 4. scope.AddToVars(value) \u4e3a\u5b57\u6bb5\u6dfb\u52a0\u53c2\u6570 5. scope.Quote() \u8f6c\u4e49 6. scope \u5f53\u4f60\u5728\u6570\u636e\u5e93\u4e2d\u6587\u5b8c\u6210\u4efb\u4f55\u64cd\u4f5c, scope\u5305\u542b\u4e86\u5f53\u524d\u64cd\u4f5c\u4fe1\u606f // Scope contain current operation's information when you perform any operation on the database type Scope struct { Search * search Value interface {} SQL string SQLVars [] interface {} db * DB instanceID string primaryKeyField * Field skipLeft bool fields * [] * Field selectAttrs * [] string }","title":"\u62d3\u5c55"},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#ref","text":"official: callback in gorm","title":"REF:"},{"location":"Golang/Project/go-gin-example/FlowChart/","text":"\u6d41\u7a0b\u56fe \u8bf7\u6c42\u6d41\u7a0b\u56fe URL \u8bf7\u6c42\u6253\u5230 gin \uff0c\u7531 gin \u5206\u53d1\u5404\u4e2a\u8bf7\u6c42\u5230\u76f8\u5e94\u7684\u63a5\u53e3 \u63a5\u53e3\u5bf9\u5e94 GET \uff0c POST \uff0c PUT \uff0c DELETE \u7b49\u591a\u79cd\u8bf7\u6c42\u65b9\u5f0f \u63a5\u53e3\u63a5\u6536 URL \u4e2d\u7684\u53c2\u6570\uff0c\u6784\u9020\u76f8\u5e94\u7684CRUD\u67e5\u8be2\uff0c\u67e5\u8be2\u6570\u636e\u5e93 \u5c06\u6570\u636e\u5e93\u8fd4\u56de\u7684\u6570\u636e\u8fd4\u56de\u5230\u524d\u7aef\u8c03\u7528\u8005 JWT\u4ea7\u751f\u4ee5\u53ca\u8ba4\u8bc1 \u751f\u6210JWT JWT\u8ba4\u8bc1","title":"\u6d41\u7a0b\u56fe"},{"location":"Golang/Project/go-gin-example/FlowChart/#_1","text":"","title":"\u6d41\u7a0b\u56fe"},{"location":"Golang/Project/go-gin-example/FlowChart/#_2","text":"URL \u8bf7\u6c42\u6253\u5230 gin \uff0c\u7531 gin \u5206\u53d1\u5404\u4e2a\u8bf7\u6c42\u5230\u76f8\u5e94\u7684\u63a5\u53e3 \u63a5\u53e3\u5bf9\u5e94 GET \uff0c POST \uff0c PUT \uff0c DELETE \u7b49\u591a\u79cd\u8bf7\u6c42\u65b9\u5f0f \u63a5\u53e3\u63a5\u6536 URL \u4e2d\u7684\u53c2\u6570\uff0c\u6784\u9020\u76f8\u5e94\u7684CRUD\u67e5\u8be2\uff0c\u67e5\u8be2\u6570\u636e\u5e93 \u5c06\u6570\u636e\u5e93\u8fd4\u56de\u7684\u6570\u636e\u8fd4\u56de\u5230\u524d\u7aef\u8c03\u7528\u8005","title":"\u8bf7\u6c42\u6d41\u7a0b\u56fe"},{"location":"Golang/Project/go-gin-example/FlowChart/#jwt","text":"\u751f\u6210JWT JWT\u8ba4\u8bc1","title":"JWT\u4ea7\u751f\u4ee5\u53ca\u8ba4\u8bc1"},{"location":"Golang/Project/go-gin-example/InterfaceTestInstance/","text":"\u63a5\u53e3\u6d4b\u8bd5\u5b9e\u4f8b","title":"\u63a5\u53e3\u6d4b\u8bd5\u5b9e\u4f8b"},{"location":"Golang/Project/go-gin-example/InterfaceTestInstance/#_1","text":"","title":"\u63a5\u53e3\u6d4b\u8bd5\u5b9e\u4f8b"},{"location":"Linux/01 FormattingUdisk/","text":"Linux01: \u5f7b\u5e95\u683c\u5f0f\u5316U\u76d8 \u5728 cmd \u4e0b\u8f93\u5165 diskpart \u5728\u5f39\u51fa\u7684\u7a97\u53e3\u8f93\u51fa list disk \u9009\u62e9\u76ee\u6807\u78c1\u76d8 select disk 1 \u6e05\u9664 clean","title":"Linux01: \u5f7b\u5e95\u683c\u5f0f\u5316U\u76d8"},{"location":"Linux/01 FormattingUdisk/#linux01-u","text":"\u5728 cmd \u4e0b\u8f93\u5165 diskpart \u5728\u5f39\u51fa\u7684\u7a97\u53e3\u8f93\u51fa list disk \u9009\u62e9\u76ee\u6807\u78c1\u76d8 select disk 1 \u6e05\u9664 clean","title":"Linux01: \u5f7b\u5e95\u683c\u5f0f\u5316U\u76d8"},{"location":"Linux/02 ChangeSources/","text":"Linux02: \u66f4\u6539Ubuntu\u6e90 \u5907\u4efd\u6e90\u6587\u4ef6 \u6dfb\u52a0\u6e90 \u66f4\u65b0 sudo cp /etc/apt/sources.list /etc/apt/sources_init.list sudo gedit /etc/apt/sources.list apt-get update","title":"Linux02: \u66f4\u6539Ubuntu\u6e90"},{"location":"Linux/02 ChangeSources/#linux02-ubuntu","text":"\u5907\u4efd\u6e90\u6587\u4ef6 \u6dfb\u52a0\u6e90 \u66f4\u65b0 sudo cp /etc/apt/sources.list /etc/apt/sources_init.list sudo gedit /etc/apt/sources.list apt-get update","title":"Linux02: \u66f4\u6539Ubuntu\u6e90"},{"location":"Others/01 MySql/","text":"\u4f7f\u7528Mysql \u5b89\u88c5 \u4e0b\u8f7d \u914d\u7f6e \u7f16\u8f91 my.ini \u6587\u4ef6 \u5728Mysql\u5b89\u88c5\u6587\u4ef6\u5939\u4e0b\u65b0\u5efa my.ini \u6587\u4ef6 [client] # \u8bbe\u7f6emysql\u5ba2\u6237\u7aef\u9ed8\u8ba4\u5b57\u7b26\u96c6 default-character-set = utf8 [mysqld] # \u8bbe\u7f6e3306\u7aef\u53e3 port = 3306 # \u8bbe\u7f6emysql\u7684\u5b89\u88c5\u76ee\u5f55 basedir = C:/Software/IDE/mysql-8.0.18 # \u8bbe\u7f6e\u6570\u636e\u5b58\u653e\u4f4d\u7f6e datadir = C:/Software/IDE/mysql-8.0.18/data # \u8bbe\u7f6e\u521d\u59cb\u5bc6\u7801, \u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u7528 default_authentication_plugin = mysql_native_password # \u5141\u8bb8\u6700\u5927\u8fde\u63a5\u6570 max_connections = 20 # \u670d\u52a1\u7aef\u4f7f\u7528\u7684\u5b57\u7b26\u96c6\u9ed8\u8ba4\u4e3a8\u6bd4\u7279\u7f16\u7801\u7684latin1\u5b57\u7b26\u96c6 character-set-server = UTF8MB4 # \u521b\u5efa\u65b0\u8868\u65f6\u5c06\u4f7f\u7528\u7684\u9ed8\u8ba4\u5b58\u50a8\u5f15\u64ce default-storage-engine = INNODB \u5176\u4e2d datadir \u4e0d\u80fd\u6709\u4efb\u4f55\u6587\u4ef6, \u5426\u5219\u542f\u52a8mysql\u670d\u52a1\u4f1a\u62a5\u9519: --initialize specified but the data directory has files in it. Aborting. \u914d\u7f6e\u5b8c\u6210\u540e\u8fdb\u5165\u5b89\u88c5\u8def\u5f84\u7684 .\\bin \u76ee\u5f55, \u7528\u7ba1\u7406\u5458\u8eab\u4efd\u6253\u5f00 CMD \u952e\u5165: mysqld --initialize --console \u8fdb\u884c\u521d\u59cb\u5316\u5f97\u5230\u5bc6\u7801 \u8f93\u5165mysql\u6307\u4ee4\u53d1\u73b0 You must reset your password using ALTER USER statement before executing this statement. , \u9700\u8981\u901a\u8fc7 alter user user() identified by \"mypwd\"; \u4fee\u6539\u5bc6\u7801\u5373\u53ef. mysql\u5e38\u7528\u6307\u4ee4 [WINDOWS] mysqld install : \u5b89\u88c5mysql\u670d\u52a1 [WINDOWS\u7ba1\u7406\u5458] net start mysql : \u542f\u52a8mysql\u670d\u52a1 mysql -u root -p : \u8fdb\u5165mysql alter user user() identified by \"passwrod\"; : \u4fee\u6539mysql\u5bc6\u7801 mysql\u53ef\u89c6\u5316 heidi sql REF: \u5b89\u88c5mysql \u8bbe\u7f6emysql\u5bc6\u7801","title":"\u4f7f\u7528Mysql"},{"location":"Others/01 MySql/#mysql","text":"","title":"\u4f7f\u7528Mysql"},{"location":"Others/01 MySql/#_1","text":"\u4e0b\u8f7d","title":"\u5b89\u88c5"},{"location":"Others/01 MySql/#_2","text":"\u7f16\u8f91 my.ini \u6587\u4ef6 \u5728Mysql\u5b89\u88c5\u6587\u4ef6\u5939\u4e0b\u65b0\u5efa my.ini \u6587\u4ef6 [client] # \u8bbe\u7f6emysql\u5ba2\u6237\u7aef\u9ed8\u8ba4\u5b57\u7b26\u96c6 default-character-set = utf8 [mysqld] # \u8bbe\u7f6e3306\u7aef\u53e3 port = 3306 # \u8bbe\u7f6emysql\u7684\u5b89\u88c5\u76ee\u5f55 basedir = C:/Software/IDE/mysql-8.0.18 # \u8bbe\u7f6e\u6570\u636e\u5b58\u653e\u4f4d\u7f6e datadir = C:/Software/IDE/mysql-8.0.18/data # \u8bbe\u7f6e\u521d\u59cb\u5bc6\u7801, \u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u7528 default_authentication_plugin = mysql_native_password # \u5141\u8bb8\u6700\u5927\u8fde\u63a5\u6570 max_connections = 20 # \u670d\u52a1\u7aef\u4f7f\u7528\u7684\u5b57\u7b26\u96c6\u9ed8\u8ba4\u4e3a8\u6bd4\u7279\u7f16\u7801\u7684latin1\u5b57\u7b26\u96c6 character-set-server = UTF8MB4 # \u521b\u5efa\u65b0\u8868\u65f6\u5c06\u4f7f\u7528\u7684\u9ed8\u8ba4\u5b58\u50a8\u5f15\u64ce default-storage-engine = INNODB \u5176\u4e2d datadir \u4e0d\u80fd\u6709\u4efb\u4f55\u6587\u4ef6, \u5426\u5219\u542f\u52a8mysql\u670d\u52a1\u4f1a\u62a5\u9519: --initialize specified but the data directory has files in it. Aborting. \u914d\u7f6e\u5b8c\u6210\u540e\u8fdb\u5165\u5b89\u88c5\u8def\u5f84\u7684 .\\bin \u76ee\u5f55, \u7528\u7ba1\u7406\u5458\u8eab\u4efd\u6253\u5f00 CMD \u952e\u5165: mysqld --initialize --console \u8fdb\u884c\u521d\u59cb\u5316\u5f97\u5230\u5bc6\u7801 \u8f93\u5165mysql\u6307\u4ee4\u53d1\u73b0 You must reset your password using ALTER USER statement before executing this statement. , \u9700\u8981\u901a\u8fc7 alter user user() identified by \"mypwd\"; \u4fee\u6539\u5bc6\u7801\u5373\u53ef.","title":"\u914d\u7f6e"},{"location":"Others/01 MySql/#mysql_1","text":"[WINDOWS] mysqld install : \u5b89\u88c5mysql\u670d\u52a1 [WINDOWS\u7ba1\u7406\u5458] net start mysql : \u542f\u52a8mysql\u670d\u52a1 mysql -u root -p : \u8fdb\u5165mysql alter user user() identified by \"passwrod\"; : \u4fee\u6539mysql\u5bc6\u7801","title":"mysql\u5e38\u7528\u6307\u4ee4"},{"location":"Others/01 MySql/#mysql_2","text":"heidi sql","title":"mysql\u53ef\u89c6\u5316"},{"location":"Others/01 MySql/#ref","text":"\u5b89\u88c5mysql \u8bbe\u7f6emysql\u5bc6\u7801","title":"REF:"},{"location":"Others/Excel/01 autoCreateTime/","text":"1. \u81ea\u52a8\u521b\u5efa\u6570\u636e\u65f6\u95f4\uff0c\u4e0d\u53d7\u5176\u4ed6\u4fee\u6539\u5f71\u54cd\u7684 NOW() \u5728 \u9009\u9879 \u4e0b\u7684 \u516c\u5f0f \u542f\u7528 \u8fed\u4ee3\u8ba1\u7b97 \u4f7f\u5f97excel\u4e0d\u4f1a\u62a5\u5faa\u73af\u5f15\u7528\u7684\u8b66\u544a\u26a0 \u6b64\u5904\u7684 C\u5217 \u4f1a\u81ea\u52a8\u6839\u636e D\u5217 \u6570\u636e\u521b\u5efa\u65f6\u95f4\uff0c\u8be5\u65f6\u95f4\u4e0d\u4f1a\u6839\u636e\u5176\u4ed6\u7684\u5217\u6539\u53d8 excel =IF(D2=\"\",\"\",IF(C2=\"\",NOW(),C2)) \u53c2\u8003URL\uff1a \u5faa\u73af\u5f15\u7528 \u81ea\u52a8\u521b\u5efa\u65f6\u95f4\u540e\uff0c\u9501\u5b9a\u65f6\u95f4","title":"\t1. \u81ea\u52a8\u521b\u5efa\u6570\u636e\u65f6\u95f4\uff0c\u4e0d\u53d7\u5176\u4ed6\u4fee\u6539\u5f71\u54cd\u7684`NOW()`"},{"location":"Others/Excel/01 autoCreateTime/#1-now","text":"\u5728 \u9009\u9879 \u4e0b\u7684 \u516c\u5f0f \u542f\u7528 \u8fed\u4ee3\u8ba1\u7b97 \u4f7f\u5f97excel\u4e0d\u4f1a\u62a5\u5faa\u73af\u5f15\u7528\u7684\u8b66\u544a\u26a0 \u6b64\u5904\u7684 C\u5217 \u4f1a\u81ea\u52a8\u6839\u636e D\u5217 \u6570\u636e\u521b\u5efa\u65f6\u95f4\uff0c\u8be5\u65f6\u95f4\u4e0d\u4f1a\u6839\u636e\u5176\u4ed6\u7684\u5217\u6539\u53d8 excel =IF(D2=\"\",\"\",IF(C2=\"\",NOW(),C2)) \u53c2\u8003URL\uff1a \u5faa\u73af\u5f15\u7528 \u81ea\u52a8\u521b\u5efa\u65f6\u95f4\u540e\uff0c\u9501\u5b9a\u65f6\u95f4","title":"1. \u81ea\u52a8\u521b\u5efa\u6570\u636e\u65f6\u95f4\uff0c\u4e0d\u53d7\u5176\u4ed6\u4fee\u6539\u5f71\u54cd\u7684NOW()"},{"location":"Others/Excel/02 autoCreateTimeByMacro/","text":"2. \u7528\u5b8f\u81ea\u52a8\u521b\u5efa\u6570\u636e\u65f6\u95f4 Private Sub Worksheet_Change ( ByVal Target As Range ) ' ______\u8bf4\u660e \u2193 ___________________________________ '\u67d0\u5217\u5355\u5143\u683c\u53d1\u751f\u53d8\u5316 '\u82e5\u53d8\u5316\u503c\u4e0d\u4e3a\u7a7a\uff0c\u5bf9\u5e94\u5217\u6dfb\u52a0\u53d8\u5316\u65f6\u95f4\u70b9\u65e5\u671f\u65f6\u95f4 '\u82e5\u53d8\u5316\u503c\u4e3a\u7a7a\uff0c\u5220\u9664\u5bf9\u5e94\u5355\u5143\u683c\u6570\u636e '\u793a\u4f8b\u4e3a A\u5217\u7b2c2\u884c\u53d1\u751f\u53d8\u5316 \uff0c\u5bf9\u5e94\u7684 B\u5217\u6dfb\u52a0\u6216\u5220\u9664\u65e5\u671f ' ______\u8bf4\u660e \u2191 ___________________________________ Application . ScreenUpdating = False '\u5173\u95ed\u5c4f\u5e55\u5237\u65b0 Dim cA , cB , startRG As String Dim offsetc As Long Dim rg As Range ' ______\u8bbe\u7f6e\u53c2\u6570 \u2193 _________________ cA = \"A\" '\u53d8\u5316\u533a\u57df\u6240\u5728\u5217 cB = \"B\" '\u65e5\u671f\u751f\u6210\u5217 startRG = \"A1\" '\u53d8\u5316\u533a\u57df\u9996\u5355\u5143\u683c ( \u9632\u6b62\u6539\u52a8\u8868\u5934\u89e6\u53d1\u4e8b\u4ef6 ) ' ______\u8bbe\u7f6e\u53c2\u6570 \u2191 _________________ offsetc = Columns ( cB ). Column - Columns ( cA ). Column If Not Application . Intersect ( Target , Columns ( cA ), Range ( startRG , ActiveCell . SpecialCells ( xlLastCell ))) Is Nothing Then For Each rg In Intersect ( Target , Columns ( cA ), Range ( startRG , ActiveCell . SpecialCells ( xlLastCell ))) If rg <> \"\" Then With rg . Offset ( 0 , offsetc ) . Value = Now . NumberFormatLocal = \"yyyy/m/d h:mm:ss ; @\" End With Else rg . Offset ( 0 , offsetc ). Clear End If Next rg End If Application . ScreenUpdating = True '\u6062\u590d\u5c4f\u5e55\u5237\u65b0 End Sub","title":"2. \u7528\u5b8f\u81ea\u52a8\u521b\u5efa\u6570\u636e\u65f6\u95f4"},{"location":"Others/Excel/02 autoCreateTimeByMacro/#2","text":"Private Sub Worksheet_Change ( ByVal Target As Range ) ' ______\u8bf4\u660e \u2193 ___________________________________ '\u67d0\u5217\u5355\u5143\u683c\u53d1\u751f\u53d8\u5316 '\u82e5\u53d8\u5316\u503c\u4e0d\u4e3a\u7a7a\uff0c\u5bf9\u5e94\u5217\u6dfb\u52a0\u53d8\u5316\u65f6\u95f4\u70b9\u65e5\u671f\u65f6\u95f4 '\u82e5\u53d8\u5316\u503c\u4e3a\u7a7a\uff0c\u5220\u9664\u5bf9\u5e94\u5355\u5143\u683c\u6570\u636e '\u793a\u4f8b\u4e3a A\u5217\u7b2c2\u884c\u53d1\u751f\u53d8\u5316 \uff0c\u5bf9\u5e94\u7684 B\u5217\u6dfb\u52a0\u6216\u5220\u9664\u65e5\u671f ' ______\u8bf4\u660e \u2191 ___________________________________ Application . ScreenUpdating = False '\u5173\u95ed\u5c4f\u5e55\u5237\u65b0 Dim cA , cB , startRG As String Dim offsetc As Long Dim rg As Range ' ______\u8bbe\u7f6e\u53c2\u6570 \u2193 _________________ cA = \"A\" '\u53d8\u5316\u533a\u57df\u6240\u5728\u5217 cB = \"B\" '\u65e5\u671f\u751f\u6210\u5217 startRG = \"A1\" '\u53d8\u5316\u533a\u57df\u9996\u5355\u5143\u683c ( \u9632\u6b62\u6539\u52a8\u8868\u5934\u89e6\u53d1\u4e8b\u4ef6 ) ' ______\u8bbe\u7f6e\u53c2\u6570 \u2191 _________________ offsetc = Columns ( cB ). Column - Columns ( cA ). Column If Not Application . Intersect ( Target , Columns ( cA ), Range ( startRG , ActiveCell . SpecialCells ( xlLastCell ))) Is Nothing Then For Each rg In Intersect ( Target , Columns ( cA ), Range ( startRG , ActiveCell . SpecialCells ( xlLastCell ))) If rg <> \"\" Then With rg . Offset ( 0 , offsetc ) . Value = Now . NumberFormatLocal = \"yyyy/m/d h:mm:ss ; @\" End With Else rg . Offset ( 0 , offsetc ). Clear End If Next rg End If Application . ScreenUpdating = True '\u6062\u590d\u5c4f\u5e55\u5237\u65b0 End Sub","title":"2. \u7528\u5b8f\u81ea\u52a8\u521b\u5efa\u6570\u636e\u65f6\u95f4"},{"location":"Others/Excel/03 FormatUnit/","text":"3. \u4e3a\u5355\u5143\u683c\u6dfb\u52a0\u683c\u5f0f \u9009\u4e2d\u9700\u8981\u64cd\u4f5c\u5217, \u53f3\u952e\u9009\u62e9 \u8bbe\u7f6e\u5355\u5143\u683c\u5f0f ,\u9009\u62e9 \u81ea\u5b9a\u4e49 , \u8f93\u5165 :G/[\u683c\u5f0f]","title":"3. \u4e3a\u5355\u5143\u683c\u6dfb\u52a0\u683c\u5f0f"},{"location":"Others/Excel/03 FormatUnit/#3","text":"\u9009\u4e2d\u9700\u8981\u64cd\u4f5c\u5217, \u53f3\u952e\u9009\u62e9 \u8bbe\u7f6e\u5355\u5143\u683c\u5f0f ,\u9009\u62e9 \u81ea\u5b9a\u4e49 , \u8f93\u5165 :G/[\u683c\u5f0f]","title":"3. \u4e3a\u5355\u5143\u683c\u6dfb\u52a0\u683c\u5f0f"},{"location":"Others/Excel/04 RepairArrowKey/","text":"4. \u65b9\u5411\u952e\u65e0\u6cd5\u63a7\u5236excel\u8868\u683c\u4e0a\u4e0b\u3001\u5de6\u53f3\u79fb\u52a8 \u89e3\u51b3\uff1a \u53ef\u80fd\u662f SCROLL LOCK \u952e\u88ab\u6253\u5f00\uff0c\u5728\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u53ef\u4ee5\u901a\u8fc7 FN+C \u6216\u8005 FN+NUMB LK \u89e3\u9501","title":"4. \u65b9\u5411\u952e\u65e0\u6cd5\u63a7\u5236excel\u8868\u683c\u4e0a\u4e0b\u3001\u5de6\u53f3\u79fb\u52a8"},{"location":"Others/Excel/04 RepairArrowKey/#4-excel","text":"\u89e3\u51b3\uff1a \u53ef\u80fd\u662f SCROLL LOCK \u952e\u88ab\u6253\u5f00\uff0c\u5728\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u53ef\u4ee5\u901a\u8fc7 FN+C \u6216\u8005 FN+NUMB LK \u89e3\u9501","title":"4. \u65b9\u5411\u952e\u65e0\u6cd5\u63a7\u5236excel\u8868\u683c\u4e0a\u4e0b\u3001\u5de6\u53f3\u79fb\u52a8"},{"location":"Python/01 UsingTesseract/","text":"Tesseract \u4e0b\u8f7d\u5730\u5740 \u5b89\u88c5 \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf \u7cfb\u7edf\u53d8\u91cfPath Tesseract-OCR\u8def\u5f84 \u65b0\u5efa TESSDATA_PREFIX \u7cfb\u7edf\u53d8\u91cf\uff0c\u53d8\u91cf\u503c\u4e3a ...\\Tesseract-OCR\\tessdata \u6d4b\u8bd5 python\u5b89\u88c5pytesseract pip install pytesseract \u4fee\u6539Python37\\site-packages\u5185\u7684 pytesseract\\pytesseract.py \u5185\u7684\u6587\u4ef6\uff0c\u6307\u5b9a\u5b89\u88c5\u8def\u5f84 tesseract_cmd = '.../Tesseract-OCR/tesseract.exe') import pytesseract from PIL import Image // pytesseract . pytesseract . tesseract_cmd = 'C://Program Files (x86)/Tesseract-OCR/tesseract.exe' text = pytesseract . image_to_string ( Image . open ( './demo.jpg' )) print ( text ) REF: \u5b89\u88c5 \u6d4b\u8bd5","title":"Tesseract"},{"location":"Python/01 UsingTesseract/#tesseract","text":"\u4e0b\u8f7d\u5730\u5740 \u5b89\u88c5 \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf \u7cfb\u7edf\u53d8\u91cfPath Tesseract-OCR\u8def\u5f84 \u65b0\u5efa TESSDATA_PREFIX \u7cfb\u7edf\u53d8\u91cf\uff0c\u53d8\u91cf\u503c\u4e3a ...\\Tesseract-OCR\\tessdata \u6d4b\u8bd5 python\u5b89\u88c5pytesseract pip install pytesseract \u4fee\u6539Python37\\site-packages\u5185\u7684 pytesseract\\pytesseract.py \u5185\u7684\u6587\u4ef6\uff0c\u6307\u5b9a\u5b89\u88c5\u8def\u5f84 tesseract_cmd = '.../Tesseract-OCR/tesseract.exe') import pytesseract from PIL import Image // pytesseract . pytesseract . tesseract_cmd = 'C://Program Files (x86)/Tesseract-OCR/tesseract.exe' text = pytesseract . image_to_string ( Image . open ( './demo.jpg' )) print ( text )","title":"Tesseract"},{"location":"Python/01 UsingTesseract/#ref","text":"\u5b89\u88c5 \u6d4b\u8bd5","title":"REF:"},{"location":"Python/02 dzdianpingSpider/","text":"\u5927\u4f17\u70b9\u8bc4\u8bc4\u4ef7\u722c\u53d6\u903b\u8f91 \u5206\u6790 \u5982\u56fe\uff0c\u8bc4\u4ef7\u4e2d\u7684 \u5b69 \u5b57\u5728\u6e90\u7801\u4e2d\u65f6\u88ab <svgmtsi class=\"cfd1i\"></svgmtsi> \u6807\u7b7e\u52a0\u5bc6\u4e86\u3002 \u5728css\u4e2d\u53ef\u4ee5\u770b\u5230\u8be5svg\u56fe\u7247\u5730\u5740\u4e3a background-image: url(//s3plus.meituan.net/v1/mss_0a06a471f9514fc79c981b5466f56b91/svgtextcss/2ec02e25ea201ca1b6b415747003614e.svg); \u8fdb\u5165\u8be5\u5730\u5740\u53d1\u73b0\u662f\u5b57\u4f53\u6587\u4ef6 \u52a0\u5bc6\u5b57\u4f53\u7684css\u4e2d\u6709 background: -0.0px -1808.0px; \uff0c\u901a\u8fc7\u641c\u7d22\u53ef\u77e5 x / font-size\uff08svg\u6587\u4ef6\u4e2d\u2460\uff09 + 1 \u53ef\u4ee5\u5f97\u5230\u8be5\u5b57\u4f53\u5728svg\u4e2d\u7684\u7b2c\u51e0\u4e2a\uff1b\u6bd4\u8f83y\u5750\u6807\u548c\u2461\u7684\u6bd4\u8f83\uff0c\u5176\u4e2d\uff0c\u53d6 y<N \u4e2d\u7684N\u503c \u5b69 \u5b57 background: -0.0px -1808.0px; \u5bf9\u7167\u53ef\u77e5\uff1ax=1\uff0cy<1831\u7684path id=47 REF\uff1a \u5927\u4f17\u70b9\u8bc4\u8bc4\u8bba\u6293\u53d6-\u52a0\u5bc6\u8bc4\u8bba\u4fe1\u606f\u5b8c\u6574\u6293\u53d6","title":"\u5927\u4f17\u70b9\u8bc4\u8bc4\u4ef7\u722c\u53d6\u903b\u8f91"},{"location":"Python/02 dzdianpingSpider/#_1","text":"","title":"\u5927\u4f17\u70b9\u8bc4\u8bc4\u4ef7\u722c\u53d6\u903b\u8f91"},{"location":"Python/02 dzdianpingSpider/#_2","text":"\u5982\u56fe\uff0c\u8bc4\u4ef7\u4e2d\u7684 \u5b69 \u5b57\u5728\u6e90\u7801\u4e2d\u65f6\u88ab <svgmtsi class=\"cfd1i\"></svgmtsi> \u6807\u7b7e\u52a0\u5bc6\u4e86\u3002 \u5728css\u4e2d\u53ef\u4ee5\u770b\u5230\u8be5svg\u56fe\u7247\u5730\u5740\u4e3a background-image: url(//s3plus.meituan.net/v1/mss_0a06a471f9514fc79c981b5466f56b91/svgtextcss/2ec02e25ea201ca1b6b415747003614e.svg); \u8fdb\u5165\u8be5\u5730\u5740\u53d1\u73b0\u662f\u5b57\u4f53\u6587\u4ef6 \u52a0\u5bc6\u5b57\u4f53\u7684css\u4e2d\u6709 background: -0.0px -1808.0px; \uff0c\u901a\u8fc7\u641c\u7d22\u53ef\u77e5 x / font-size\uff08svg\u6587\u4ef6\u4e2d\u2460\uff09 + 1 \u53ef\u4ee5\u5f97\u5230\u8be5\u5b57\u4f53\u5728svg\u4e2d\u7684\u7b2c\u51e0\u4e2a\uff1b\u6bd4\u8f83y\u5750\u6807\u548c\u2461\u7684\u6bd4\u8f83\uff0c\u5176\u4e2d\uff0c\u53d6 y<N \u4e2d\u7684N\u503c \u5b69 \u5b57 background: -0.0px -1808.0px; \u5bf9\u7167\u53ef\u77e5\uff1ax=1\uff0cy<1831\u7684path id=47","title":"\u5206\u6790"},{"location":"Python/02 dzdianpingSpider/#ref","text":"\u5927\u4f17\u70b9\u8bc4\u8bc4\u8bba\u6293\u53d6-\u52a0\u5bc6\u8bc4\u8bba\u4fe1\u606f\u5b8c\u6574\u6293\u53d6","title":"REF\uff1a"}]}