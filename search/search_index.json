{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Mysite","text_tokens":["mysite","to"," ","welcome"],"title":"index","title_tokens":["index"]},{"location":"#welcome-to-mysite","text":"","text_tokens":[],"title":"Welcome to Mysite","title_tokens":["mysite","to"," ","welcome"]},{"location":"Docker/01 ChangeImageSource/","text":"Docker 01：修改镜像源 在 settings -> Daemon -> Advanced 在 registry-mirrors 括号内添加 \"https://registry.docker-cn.com\" docker info 查询 registry-mirrors","text_tokens":["com","修改","mirrors","/",">","\"","registry","-","cn","内","查询","01","daemon","settings","：","advanced","https","镜像"," ","括号","添加",".","在","info","docker",":","源"],"title":"Docker 01：修改镜像源","title_tokens":["修改","docker","01","镜像"," ","：","源"]},{"location":"Docker/01 ChangeImageSource/#docker-01","text":"在 settings -> Daemon -> Advanced 在 registry-mirrors 括号内添加 \"https://registry.docker-cn.com\" docker info 查询 registry-mirrors","text_tokens":["com","mirrors","/",">","\"","registry","-","cn","内","查询","daemon","settings","advanced","https"," ","括号","添加",".","在","info","docker",":"],"title":"Docker 01：修改镜像源","title_tokens":["修改","docker","01","镜像"," ","：","源"]},{"location":"Docker/02 EntryPointAndCMD/","text":"Docker 02：Dockerfile中的ENTRYPOINT、RUN与CMD CMD与ENRTYPOINT RUN CMD 每个 Dockerfile 中只能有一个 CMD , 如果有多个那么只会执行最后一个. CMD 相当于启动 docker 时候后面添加的参数: docker run -itd --name aaa docker_image /bin/bash -c. 镜像名称后面跟了 /bin/bash -c 等价于在dockerfile中的 CMD [\"/bin/bash\", \"-c\"] 若执行的时候添加了参数,默认的 CMD 中的参数则无效 ENTRYPOINT 类似 CMD , 每个 Dockerfile 只能有一个 ENTRYPOINT , 如果存在多个只执行最后一个. 必定执行, 不会动态改变 书写格式 Shell格式： , 例如: apt-get install python3 Exec [\"executable\", \"param1\", \"param2\", ...], 例如: [\"apt-get\", \"install\", \"python3\"] CMD命令 CMD echo \"hello world\" 1. 运行 docker run -it [image] , 输出hello world 2. 运行 docker run -it [image]/bin/bash , CMD 命令会被忽略, 命令 bash 会被执行 ENTRYPOINT ENTRYPOINT [\"/bin/echo\", \"Hello\"] 1. 运行 docker run -it [image] , 输出Hello 2. 运行 docker run -it [image] kk , 输出Hello kk, 原本的Hello仍然会输出 修改 Dockerfile 为 ENTRYPOINT [ \"/bin/echo\" , \"Hello\" ] CMD [ \"world\" ] 1. 运行 docker run -it [name] , 输出Hello world 2. 运行 docker run -it [name] king , 输出Hello king, CMD 参数被动态替换. RUN命令 RUN apt-get update && apt-get install -y \\ bzr \\ cvs \\ git \\ mercurial \\ subversion 1. apt-get update 和 apt-get install 放在同一个 RUN 指令执行可以==保证每次安装的都是最新的包==; 如果将 apt-get install 放在单独的的 RUN 中执行, 则会使用 apt-get update 创建的镜像层, 这层镜像可能是很久以前缓存的. 总结 CMD 设置容器启动后==默认执行的命令以及参数==, 设置的指令可以被 docker run 命令后面的命令函参数==动态替换== ENTRYPOINT 配置容器启动时的执行命令, 不会被忽略, 一定会被执行 , 即使运行了 docker run 时指定了其他命令 使用 RUN 指令安装应用和软件包，构建镜像。 如果 Docker 镜像的用途是运行应用程序或服务, 比如运行一个 MySQL, 应该优先使用 Exec 格式的 ENTRYPOINT 指令. CMD 可为 ENTRYPOINT 提供额外的默认参数, 同时可利用 docker run 命令行替换默认参数. 如果想为容器设置默认的启动命令,可使用 CMD 指令.用户可在 docker run 命令行中替换此默认命令. REF: Dockerfile RUN，CMD，ENTRYPOINT命令区别 Dockerfile中ENTRYPOINT 和 CMD的区别","text_tokens":["=","&&","修改","只会","用户","单独","每个","设置","后","程序","服务","的","02","被","缓存","于","替换","可以","构建","当于","其他","只","这层","exec","此","保证","param1","executable","run","[","默认","echo","world","时候","。","为","应用程序","param2","如果","中","bash",",","例如","一个","image","存在","一定","2","mercurial","包","跟","_","很久以前","仍然","以及","subversion","cmd","shell","添加","]","安装","可能","区别","apt","最新","都",".","无效","同时","命令","install","只能","后面","则","应用","应该","额外","kk","最后","/","使用","同一个","king","-","每次","会","it","执行","itd","...","bzr","ref","利用","python3","命令行","c","创建","输出","以前","用途","运行","将","、","hello","动态","总结","放在","软件","类似","等价","配置","cvs","docker","相当",":","不会","git","aaa","很久","执行命令","指令","，","enrtypoint","和","entrypoint","get","比如","\"","函","同一","想","有","时","与","bin","书写","容器","：","mysql","启动","名称",";","\\","dockerfile","层","原本","可","或","镜像","是"," ","若","格式","改变","指定","update","优先","必定","在","了","参数","即使","name","提供","多个","软件包","忽略","相当于","1","y","那么"],"title":"Docker 02：Dockerfile中的ENTRYPOINT、RUN与CMD","title_tokens":["与","的","dockerfile","中","02","entrypoint","docker","run","、","cmd"," ","："]},{"location":"Docker/02 EntryPointAndCMD/#docker-02dockerfileentrypointruncmd","text":"","text_tokens":[],"title":"Docker 02：Dockerfile中的ENTRYPOINT、RUN与CMD","title_tokens":["与","的","dockerfile","中","02","entrypoint","docker","run","、","cmd"," ","："]},{"location":"Docker/02 EntryPointAndCMD/#cmdenrtypoint","text":"RUN CMD 每个 Dockerfile 中只能有一个 CMD , 如果有多个那么只会执行最后一个. CMD 相当于启动 docker 时候后面添加的参数: docker run -itd --name aaa docker_image /bin/bash -c. 镜像名称后面跟了 /bin/bash -c 等价于在dockerfile中的 CMD [\"/bin/bash\", \"-c\"] 若执行的时候添加了参数,默认的 CMD 中的参数则无效 ENTRYPOINT 类似 CMD , 每个 Dockerfile 只能有一个 ENTRYPOINT , 如果存在多个只执行最后一个. 必定执行, 不会动态改变","text_tokens":["则","只会","如果","中","entrypoint","最后","bash","/",",","一个","\"","image","每个","存在","有","-","bin","的","执行","跟","_","itd","于","c","启动","名称","当于","dockerfile","cmd","镜像"," ","若","添加","]","改变","只","动态","必定",".","无效","在","了","等价","参数","类似","name","不会","相当","run","只能","多个","docker",":","相当于","后面","[","默认","aaa","时候","那么"],"title":"CMD与ENRTYPOINT","title_tokens":["cmd","与","enrtypoint"]},{"location":"Docker/02 EntryPointAndCMD/#_1","text":"Shell格式： , 例如: apt-get install python3 Exec [\"executable\", \"param1\", \"param2\", ...], 例如: [\"apt-get\", \"install\", \"python3\"]","text_tokens":["param2",",","get","例如","\"","-","...","python3","："," ","shell","格式","]","apt","exec","param1","executable",":","install","["],"title":"书写格式","title_tokens":["格式","书写"]},{"location":"Docker/02 EntryPointAndCMD/#cmd","text":"CMD echo \"hello world\" 1. 运行 docker run -it [image] , 输出hello world 2. 运行 docker run -it [image]/bin/bash , CMD 命令会被忽略, 命令 bash 会被执行","text_tokens":["bash","/",",","\"","image","-","2","bin","会","it","执行","被","输出","运行","cmd"," ","echo","hello","]",".","命令","docker","run","[","忽略","1","world"],"title":"CMD命令","title_tokens":["命令","cmd"]},{"location":"Docker/02 EntryPointAndCMD/#entrypoint","text":"ENTRYPOINT [\"/bin/echo\", \"Hello\"] 1. 运行 docker run -it [image] , 输出Hello 2. 运行 docker run -it [image] kk , 输出Hello kk, 原本的Hello仍然会输出 修改 Dockerfile 为 ENTRYPOINT [ \"/bin/echo\" , \"Hello\" ] CMD [ \"world\" ] 1. 运行 docker run -it [name] , 输出Hello world 2. 运行 docker run -it [name] king , 输出Hello king, CMD 参数被动态替换.","text_tokens":["为","kk","修改","entrypoint","/",",","\"","image","king","-","2","bin","的","会","it","被","仍然","替换","输出","dockerfile","运行","原本","cmd"," ","hello","]","动态",".","world","参数","name","docker","run","[","1","echo"],"title":"ENTRYPOINT","title_tokens":["entrypoint"]},{"location":"Docker/02 EntryPointAndCMD/#run","text":"RUN apt-get update && apt-get install -y \\ bzr \\ cvs \\ git \\ mercurial \\ subversion 1. apt-get update 和 apt-get install 放在同一个 RUN 指令执行可以==保证每次安装的都是最新的包==; 如果将 apt-get install 放在单独的的 RUN 中执行, 则会使用 apt-get update 创建的镜像层, 这层镜像可能是很久以前缓存的.","text_tokens":["则","指令","&&","和","如果","中","使用","单独","get",",","一个","同一","同一个","-","每次","mercurial","的","会","执行","包","很久以前","bzr","缓存","创建",";","\\","可以","以前","subversion","层","将","是","镜像"," ","安装","可能","apt","update","这层","放在","最新","都",".","保证","cvs","run","install","1","=","很久","git","y"],"title":"RUN命令","title_tokens":["run","命令"]},{"location":"Docker/02 EntryPointAndCMD/#_2","text":"CMD 设置容器启动后==默认执行的命令以及参数==, 设置的指令可以被 docker run 命令后面的命令函参数==动态替换== ENTRYPOINT 配置容器启动时的执行命令, 不会被忽略, 一定会被执行 , 即使运行了 docker run 时指定了其他命令 使用 RUN 指令安装应用和软件包，构建镜像。 如果 Docker 镜像的用途是运行应用程序或服务, 比如运行一个 MySQL, 应该优先使用 Exec 格式的 ENTRYPOINT 指令. CMD 可为 ENTRYPOINT 提供额外的默认参数, 同时可利用 docker run 命令行替换默认参数. 如果想为容器设置默认的启动命令,可使用 CMD 指令.用户可在 docker run 命令行中替换此默认命令.","text_tokens":["应用","指令","应用程序","应该","为","，","额外","和","如果","用户","entrypoint","中","使用",",","比如","一个","函","后","设置","一定","程序","想","时","服务","的","会","执行","容器","被","利用","替换","mysql","命令行","以及","启动","可以","构建","其他","用途","运行","可","或","cmd","镜像"," ","是","格式","安装","指定","动态","优先","exec","同时",".","软件","在","了","命令","参数","配置","即使","此","不会","docker","默认","run","提供","软件包","忽略","=","后面","执行命令","。"],"title":"总结","title_tokens":["总结"]},{"location":"Docker/02 EntryPointAndCMD/#ref","text":"Dockerfile RUN，CMD，ENTRYPOINT命令区别 Dockerfile中ENTRYPOINT 和 CMD的区别","text_tokens":["，","命令","dockerfile","和","中","entrypoint","的","run","cmd"," ","区别"],"title":"REF:","title_tokens":["ref",":"]},{"location":"Docker/03 Docker-Compose/","text":"Docker-Compose快速入门 什么是Docker Compose? 用于定义和运行多容器Docker应用程序的工具，通过Compose使用YAML文件配置应用程序需要的所有服务。实现使用一个命令就能够从YAML文件配置中创建并启动所有服务。 使用步骤 使用Dockerfile定义应用程序环境 在 docker-compose.yml 中搭建应用程序所需的服务 执行 docker-compose up 运行整个应用程序 示例 # composetest/app.py import time import redis from flask import Flask app = Flask ( __name__ ) # 通过redis缓存 cache = redis . Redis ( host = 'redis' , port = 6379 ) def get_hit_count (): retries = 5 while True : try : return cache . incr ( 'hits' ) except redis . exceptions . ConnectionError as exc : if retries == 0 : raise exc retries -= 1 time . sleep ( 0.5 ) @app.route ( '/' ) def hello (): count = get_hit_count () return 'Hello World! I have been seen {} times. \\n ' . format ( count ) 创建 composetest/requirements.txt 文件指定库 flask redis 创建 composetest/Dockerfile 文件定义 app.py 的环境 # 从python3.7 alpine镜像开始构建 FROM python:3.7-alpine # 设置工作目录 WORKDIR /code # 设置flask命令使用的环境变量 ENV FLASK_APP app.py ENV FLASK_RUN_HOST 0 .0.0.0 # 安装gcc RUN apk add --no-cache gcc musl-dev linux-headers # 复制requirements.txt并且安装依赖 COPY requirements.txt requirements.txt # 执行pip RUN pip install -r requirements.txt # 将当前项目复制到镜像中的工作目录 COPY . . # 设置容器默认的执行命令 CMD [ \"flask\" , \"run\" ] 创建 composetest/docker-compose.yml 文件指定应用程序所需的服务 # yaml 配置 # 指本yml已从的compose版本 version : '3' services : web : # 构建镜像的上下文路径: ./Dockerfile build : . # 对外映射的端口 ports : - \"5000:5000\" redis : image : \"redis:alpine\" # 定义了两个service,分别是web和redis # web 服务使用从Dockerfile 当前目录中构建的镜像 使用Compose命令运行 docker-compose up -d yml配置 version : \"3.7\" services : webapp : build : context : ./dir dockerfile : Dockerfile-alternate args : buildno : 1 labels : - \"com.example.description=Accounting webapp\" - \"com.example.department=Finance\" - \"com.example.label-with-empty-value\" target : prod container_name : my-web-container command : [ \"bundle\" , \"exec\" , \"thin\" , \"-p\" , \"3000\" ] context：指定Dockerfile的上下文路径 dockerfile：指定构建镜像的Dockerfile文件名 labels：设置构建镜像的标签 container_name：设置容器名称 command：覆盖容器启动的默认指令 依赖关系 version : \"3.7\" services : web : build : . depends_on : - db - redis redis : image : redis db : image : postgres docker-compose up：根据依赖关系启动服务，先启动db，redis再启动web docker-compose stop：根据依赖关系廷式服务，先关闭web，再关闭db和redis docker-compose up SERVICE：自动包含SERVICE的依赖项，通过 docker-compose up 还将创建并启动db，redis 挂载 version : '3' services : app : image : golang:latest volumes : # 将项目代码根目录映射到容器中的相关目录 - $PWD : /go/src/example/demo ports : - \"8000:8000\" # 执行go run command : go run /go/src/example/demo/main.go 环境变量 布尔值需要用引号，确保YML解析器不会将其转换为True/False environment : RACK_ENV : development SHOW : 'true' Ref: docker-compose快速入门","text_tokens":["com","version","workdir","用","as","sleep","$","再启动","flask","count","5000","labels","确保","return","关系","设置","程序","实现","!","python","no","服务","python3.7","command","的","true","{","yaml","再","route","depends","缓存","retries","环境","当前","项","pwd","web","show","代码","buildno","构建","并","except","compose","工具","i","args","用于","cache","解析","exec","if","build","端口","n","run","默认","[","上下文","映射","example","world","?","code","对外","根据","自动","。","host","requirements","应用程序","复制","并且","布尔值","多","thin","为","中",",","什么","一个","add","image","相关","到","py","分别","golang","rack","p","_","main","6379","try","been","库","gcc",")","apk","hits","copy","cmd","根目录","安装","需","变量","]","工作","department","路径","布尔",".","就","命令","up","seen","目录","stop","3.7","install","先","转换","示例","开始","应用","prod","value","with","快速","headers","使用","/","文件名","connectionerror","format","从","false","-","#","exc","3","整个","while","执行","}","所有","db","app","环境变量","musl","ref","创建","0.5","0","services","service","context","包含","运行","复制到","3000","将","hello","关闭","需要","alpine","empty","description","postgres","import","入门","r","'","on","解析器","redis","能够","配置","__","docker",":","volumes","0.0","exceptions","incr","不会","已","执行命令","定义","指令","还","，","所","time","linux","项目","src","和","times","development","get","搭建","environment","标签","\"","环境变","target","版本","label","pip","demo","latest","指本","廷式","port","container","raise","通过","其","下文","容器","env","依赖","上下","：","d","启动","alternate","accounting","名称","\\","dev","步骤","dockerfile","from","webapp","def","yml","两个","是","镜像"," ","have","(","bundle","8000","ports","指定","引号","在","了","finance","go","name","5","txt","当前目录","@","dir","覆盖","composetest","hit","1","=","挂载","文件","my"],"title":"Docker-Compose快速入门","title_tokens":["-","入门","compose","快速","docker"]},{"location":"Docker/03 Docker-Compose/#docker-compose","text":"","text_tokens":[],"title":"Docker-Compose快速入门","title_tokens":["-","入门","compose","快速","docker"]},{"location":"Docker/03 Docker-Compose/#docker-compose_1","text":"用于定义和运行多容器Docker应用程序的工具，通过Compose使用YAML文件配置应用程序需要的所有服务。实现使用一个命令就能够从YAML文件配置中创建并启动所有服务。","text_tokens":["应用","应用程序","，","多","和","中","使用","一个","从","程序","实现","服务","的","yaml","所有","通过","容器","创建","启动","并","compose","工具","运行","用于","需要","就","命令","能够","配置","docker","定义","文件","。"],"title":"什么是Docker Compose?","title_tokens":["compose","docker","是"," ","什么","?"]},{"location":"Docker/03 Docker-Compose/#_1","text":"使用Dockerfile定义应用程序环境 在 docker-compose.yml 中搭建应用程序所需的服务 执行 docker-compose up 运行整个应用程序","text_tokens":["应用","应用程序","所","中","使用","搭建","程序","-","服务","整个","的","执行","环境","compose","dockerfile","运行","yml"," ","需",".","在","up","docker","定义"],"title":"使用步骤","title_tokens":["使用","步骤"]},{"location":"Docker/03 Docker-Compose/#_2","text":"# composetest/app.py import time import redis from flask import Flask app = Flask ( __name__ ) # 通过redis缓存 cache = redis . Redis ( host = 'redis' , port = 6379 ) def get_hit_count (): retries = 5 while True : try : return cache . incr ( 'hits' ) except redis . exceptions . ConnectionError as exc : if retries == 0 : raise exc retries -= 1 time . sleep ( 0.5 ) @app.route ( '/' ) def hello (): count = get_hit_count () return 'Hello World! I have been seen {} times. \\n ' . format ( count ) 创建 composetest/requirements.txt 文件指定库 flask redis 创建 composetest/Dockerfile 文件定义 app.py 的环境 # 从python3.7 alpine镜像开始构建 FROM python:3.7-alpine # 设置工作目录 WORKDIR /code # 设置flask命令使用的环境变量 ENV FLASK_APP app.py ENV FLASK_RUN_HOST 0 .0.0.0 # 安装gcc RUN apk add --no-cache gcc musl-dev linux-headers # 复制requirements.txt并且安装依赖 COPY requirements.txt requirements.txt # 执行pip RUN pip install -r requirements.txt # 将当前项目复制到镜像中的工作目录 COPY . . # 设置容器默认的执行命令 CMD [ \"flask\" , \"run\" ] 创建 composetest/docker-compose.yml 文件指定应用程序所需的服务 # yaml 配置 # 指本yml已从的compose版本 version : '3' services : web : # 构建镜像的上下文路径: ./Dockerfile build : . # 对外映射的端口 ports : - \"5000:5000\" redis : image : \"redis:alpine\" # 定义了两个service,分别是web和redis # web 服务使用从Dockerfile 当前目录中构建的镜像 使用Compose命令运行 docker-compose up -d","text_tokens":["=","version","workdir","as","sleep","flask","count","5000","return","设置","程序","!","python","no","python3.7","服务","的","true","{","yaml","缓存","retries","环境","当前","web","构建","except","compose","i","cache","if","build","端口","n","run","默认","[","上下文","映射","world","code","对外","requirements","host","复制","并且","应用程序","中",",","add","image","py","分别","_","6379","try","been","库","gcc",")","apk","hits","copy","cmd","安装","]","变量","需","工作","路径",".","命令","up","seen","目录","3.7","install","开始","应用","headers","/","使用","connectionerror","format","从","-","#","exc","3","while","}","执行","app","环境变量","musl","创建","0.5","0","services","service","运行","复制到","将","hello","alpine","import","r","'","redis","配置","__","docker",":","0.0","exceptions","incr","已","执行命令","定义","time","项目","linux","所","和","times","get","\"","环境变","版本","pip","指本","port","raise","通过","下文","env","依赖","容器","上下","d","\\","dev","dockerfile","from","def","yml","两个","镜像","是"," ","have","(","ports","指定","了","txt","name","5","当前目录","@","composetest","hit","1","route","文件"],"title":"示例","title_tokens":["示例"]},{"location":"Docker/03 Docker-Compose/#yml","text":"version : \"3.7\" services : webapp : build : context : ./dir dockerfile : Dockerfile-alternate args : buildno : 1 labels : - \"com.example.description=Accounting webapp\" - \"com.example.department=Finance\" - \"com.example.label-with-empty-value\" target : prod container_name : my-web-container command : [ \"bundle\" , \"exec\" , \"thin\" , \"-p\" , \"3000\" ] context：指定Dockerfile的上下文路径 dockerfile：指定构建镜像的Dockerfile文件名 labels：设置构建镜像的标签 container_name：设置容器名称 command：覆盖容器启动的默认指令 依赖关系 version : \"3.7\" services : web : build : . depends_on : - db - redis redis : image : redis db : image : postgres docker-compose up：根据依赖关系启动服务，先启动db，redis再启动web docker-compose stop：根据依赖关系廷式服务，先关闭web，再关闭db和redis docker-compose up SERVICE：自动包含SERVICE的依赖项，通过 docker-compose up 还将创建并启动db，redis 挂载 version : '3' services : app : image : golang:latest volumes : # 将项目代码根目录映射到容器中的相关目录 - $PWD : /go/src/example/demo ports : - \"8000:8000\" # 执行go run command : go run /go/src/example/demo/main.go 环境变量 布尔值需要用引号，确保YML解析器不会将其转换为True/False environment : RACK_ENV : development SHOW : 'true' Ref: docker-compose快速入门","text_tokens":["com","version","用","$","再启动","labels","确保","关系","设置","服务","command","的","true","再","depends","项","pwd","环境","show","web","代码","buildno","构建","并","compose","args","解析","exec","build","默认","上下文","[","映射","根据","example","run","自动","布尔值","为","thin","中",",","image","相关","到","golang","rack","p","_","main","根目录","]","变量","department","路径","布尔",".","up","目录","stop","3.7","先","转换","prod","value","with","快速","/","文件名","false","-","3","#","执行","db","app","环境变量","ref","创建","services","context","service","包含","3000","将","关闭","需要","empty","description","postgres","解析器","入门","on","'","redis","docker",":","volumes","不会","指令","还","，","项目","src","和","development","environment","标签","\"","target","环境变","label","demo","latest","廷式","container","通过","其","下文","容器","依赖","env","：","上下","alternate","启动","名称","accounting","dockerfile","webapp","bundle","yml","镜像"," ","8000","ports","指定","引号","go","finance","name","覆盖","dir","1","=","挂载","文件","my"],"title":"yml配置","title_tokens":["yml","配置"]},{"location":"Docker/04 使用Docker搭建Go开发环境/","text":"使用Docker搭建Go开发环境 基本使用 拉取Golang镜像 docker pull golang 运行容器 docker run --rm -it -name go-demo golang bash 进入到bash中 设置goproxy go env -w GOPROXY=https://goproxy.io,direct 设置gomodule export GO111MODULE=on 在容器中运行go项目 docker run --rm -it --name go-demo \\ -v $PWD : /go/src/example/go-demo \\ -p 8000 :8000 golang 通过 -v 将本地目录/数据挂载到容器中， -p 指定主机和容器的端口映射。 切换到bash会话中运行 go run go/src/example/go-demo 使用docker-compose 在项目代码跟目录创建 docker-compose.yml version : '3' services : app : image : golang:latest volumes : # 将项目代码根目录映射到容器中的相关目录 - $PWD : /go/src/example/demo ports : - \"8000:8000\" # 执行go run command : go run /go/src/example/demo/main.go 启动docker-compose并且： docker-compose up -d 修改代码，重新编译项目： docker-compose restart 进入容器中执行命令： docker-compose exec <container name> bash ，例如 docker-compose exec app go test","text_tokens":["version","修改","$","会话","设置","goproxy","command","的","环境","pwd","代码","compose","拉取","端口映射","v","exec","端口","run","restart","映射","example","。","并且","中","bash",",","例如","image","相关","到","test","golang","p","rm","跟","main","根目录",".","命令","up","目录","开发","进入","go111module","使用","/","direct","-","3","gomodule","#","it","pull","执行","本地","app","export","创建","io","services","运行","将","on","'","切换","docker",":","volumes","基本","执行命令","src","项目","，","<","和","搭建",">","数据","\"","demo","latest","container","通过","容器","env","：","d","启动","\\","https","yml","镜像"," ","主机","8000","ports","指定","编译","在","go","name","w","重新","=","挂载"],"title":"使用Docker搭建Go开发环境","title_tokens":["go","docker","使用","搭建","开发","环境"]},{"location":"Docker/04 使用Docker搭建Go开发环境/#dockergo","text":"","text_tokens":[],"title":"使用Docker搭建Go开发环境","title_tokens":["go","docker","使用","搭建","开发","环境"]},{"location":"Docker/04 使用Docker搭建Go开发环境/#_1","text":"拉取Golang镜像 docker pull golang 运行容器 docker run --rm -it -name go-demo golang bash 进入到bash中 设置goproxy go env -w GOPROXY=https://goproxy.io,direct 设置gomodule export GO111MODULE=on 在容器中运行go项目 docker run --rm -it --name go-demo \\ -v $PWD : /go/src/example/go-demo \\ -p 8000 :8000 golang 通过 -v 将本地目录/数据挂载到容器中， -p 指定主机和容器的端口映射。 切换到bash会话中运行 go run go/src/example/go-demo","text_tokens":["src","项目","，","和","中","bash","/","direct",",","$","会话","数据","设置","到","demo","-","goproxy","gomodule","golang","的","it","pull","p","rm","通过","本地","容器","env","export","pwd","io","\\","拉取","运行","https","将","镜像","端口映射"," ","主机","v","8000","指定","on",".","在","go","端口","切换","name","目录","docker","run","w",":","映射","进入","example","=","挂载","go111module","。"],"title":"基本使用","title_tokens":["使用","基本"]},{"location":"Docker/04 使用Docker搭建Go开发环境/#docker-compose","text":"在项目代码跟目录创建 docker-compose.yml version : '3' services : app : image : golang:latest volumes : # 将项目代码根目录映射到容器中的相关目录 - $PWD : /go/src/example/demo ports : - \"8000:8000\" # 执行go run command : go run /go/src/example/demo/main.go 启动docker-compose并且： docker-compose up -d 修改代码，重新编译项目： docker-compose restart 进入容器中执行命令： docker-compose exec <container name> bash ，例如 docker-compose exec app go test","text_tokens":["并且","version","src","项目","修改","，","<","中","bash","/","$",">","例如","\"","image","相关","到","demo","latest","-","test","3","#","golang","command","的","container","执行","跟","main","app","容器","pwd","：","d","创建","代码","启动","services","compose","yml","将"," ","根目录","8000","ports","编译","'","exec",".","在","go","命令","up","name","目录","docker",":","volumes","run","映射","重新","example","restart","进入","执行命令"],"title":"使用docker-compose","title_tokens":["docker","使用","-","compose"]},{"location":"Golang/Basic/01 Channel/","text":"channel what is channel channel是goroutine和goroutine之间无锁交流的【媒介】，换句话说，channel是一种允许一个goroutine发送数据给另外一个goroutine的技术，默认的channel是双向的，意味着goroutines可以通过同一个channel发、收数据。 how syntax var Channel_name chan Type channel_name := make(chan Type) 在golang中, 我们用关键字 Channel_name chan Type 创建某种类型的channel，其中channel仅仅可以传递同种类型的数据，不同类型的数据不可以通过一个类型的channel传递。 Send and Receive Data From a Channel 在golang中，channel主要有两个操作，一个是 sending ，一个是 receiving ，这两种操作被称为通讯。 <- 箭头的方向表明是发送数据还是接受数据。在默认情况下，channel中的发送、接受操作块【直到另一端未就绪】 ，允许goroutine之间在没有显式锁或者条件变量的时候互相同步 发送操作：在channel的帮助下用来将goroutine的数据发送给另外一个goroutine，通过channel发送 float64 ， int ， bool 是安全切容易的，因为这些值会被 拷贝 一份，不会有意外并发的风险，同样的， strings 类型也是安全的，因为它是 immutable（不可更改） 。在发送 pointers 或者 slice ， map 等引用的时候，channel是不安全的，因为指针或者引用会被发送者或者接收者在同一时间修改，结果是不可预知的，因此需要==确保只有一个goroutine能够访问== Mychannel <- element 表明了数据（element）发送给了Mychannel 接受操作： element := <- Mychannel package main import \"fmt\" func main () { fmt . Println ( \"starting Main method\" ) ch := make ( chan int ) go myfunc ( ch ) ch <- 23 fmt . Println ( \"End Main method\" ) } func myfunc ( ch chan int ) { fmt . Println ( 234 + <- ch ) } Closing a Channel close() 这是一个内置函数，设了一个表示表明不会再有值发送给该channel。 ele, ok = <- Mychannel 通过循环，接受者会检查该channel是打开的还是关闭的，如果ok是真，则意味着该channel是打开的。 package main import \"fmt\" func main () { c := make ( chan string ) // 调用goroutine go myFunc ( c ) for { res , ok := <- c if ok == false { fmt . Println ( \"Channel Close\" , ok ) break } fmt . Println ( \"Channel Open\" , res , ok ) } } func myFunc ( mychnl chan string ) { for v := 0 ; v < 4 ; v ++ { mychnl <- \"GeeksforGeeks\" } close ( mychnl ) } Blocking Send and Receive 在channel中，当数据发送给一个channel，直到另外的goroutine读取这个channel前，发送的声明是被阻塞的（发送完后必须等待该信息被读取才能够继续发送）。同样的，当一个channel接受数据的时候在接收到数据前都是被阻塞的。 channel中的零值是 nil 。 for 循环可以迭代channel中所有连续的值，直到该channel。 package main import \"fmt\" func main () { mychnl := make ( chan string ) go func () { mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" mychnl <- \"asdjjak\" close ( mychnl ) }() for res := range mychnl { fmt . Println ( res ) } } Length of the Channel len() 表明在channel缓冲区中==值的数量== package main import \"fmt\" func main () { mychnl := make ( chan string , 4 ) mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" mychnl <- \"asdjjak\" fmt . Println ( \"Length of the channel is:\" , len ( mychnl )) } Capacity of the Channel cap() 表明channel缓冲区的大小 package main import \"fmt\" func main () { mychnl := make ( chan string , 8 ) mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" fmt . Println ( \"Capacity of the channel is:\" , cap ( mychnl )) }","text_tokens":["只有","允许","修改","指针","连续","用","length","不同","ok","接受","直到","用来","确保","零值","表明","引用","收","gfg","同样","的","更改","{","the","帮助","channel","被","一时","for","closing","receiving","风险","发送给","+","可以","这个","没有","设","发送","调用","某种","func","双向","v","open","前","data","if","type","受者","默认","sending","时候","表示","strings","。","内置","float64","因此","方向","信息","如果","中",",","goroutines","切","一个","给","意味着","（","这些","到","情况","操作","一份","不可","golang","a","package","同步","mychnl","break","_","main","未","element","chan","receive","阻塞","abc","how","条件","主要","块","【","完后","关键","类型","结果","cap",")","真","and","值","range","变量","才","锁",".","都","goroutine","它","换句话说","通讯","pointers","immutable","23","另一端","method","4","大小","预知","则","string","slice","blocking","技术","意外","声明","一端","同一时间","bool","安全","/","关键字","意味","就绪","false","发","同一个","时间","-","值会","等待","数量","end","其中","会","8","}","所有","int","234","make","传递","仅仅","c","创建","mychannel","循环","0","缓冲区","syntax","再有","将","、","）","这是","读取","geeksforgeeks","send","关闭","需要","媒介","无锁","继续","import","发送数据","能够","asdjh","ch",":","println","换句话","starting","++","不会","称为","函数","，","之间","显式","检查","<","和","接收者","res","】","并发","因为","当","交流","也","同一时","数据","close","len","\"","ele","同一","该","有","换句","两种","fmt","必须","送给","或者","不","这","通过","等","发送者","：","访问","capacity","我们","还是","缓冲","拷贝","下",";","一时间","from","互相","接受者","两个","是"," ","箭头","一种","(","接收","is","容易","what","在","了","go","nil","var","name","另外","asdjjak","map","myfunc","of","=","迭代","打开","同种"],"title":"channel","title_tokens":["channel"]},{"location":"Golang/Basic/01 Channel/#channel","text":"","text_tokens":[],"title":"channel","title_tokens":["channel"]},{"location":"Golang/Basic/01 Channel/#what-is-channel","text":"channel是goroutine和goroutine之间无锁交流的【媒介】，换句话说，channel是一种允许一个goroutine发送数据给另外一个goroutine的技术，默认的channel是双向的，意味着goroutines可以通过同一个channel发、收数据。","text_tokens":["，","允许","之间","技术","和","】","交流","goroutines","数据","一个","给","意味","意味着","同一","同一个","发","换句","收","的","通过","channel","可以","【","发送","双向","是","、","一种","媒介","无锁","发送数据","goroutine","换句话说","另外","默认","换句话","。"],"title":"what is channel","title_tokens":["is"," ","channel","what"]},{"location":"Golang/Basic/01 Channel/#how","text":"syntax var Channel_name chan Type channel_name := make(chan Type) 在golang中, 我们用关键字 Channel_name chan Type 创建某种类型的channel，其中channel仅仅可以传递同种类型的数据，不同类型的数据不可以通过一个类型的channel传递。","text_tokens":["，","用","中","不同",",","关键字","数据","一个","golang","的","其中","不","_","通过","channel","make","传递","仅仅","我们","创建","chan","可以","syntax","关键","类型",")","某种"," ","(","在","type","var","name",":","=","同种","。"],"title":"how","title_tokens":["how"]},{"location":"Golang/Basic/01 Channel/#send-and-receive-data-from-a-channel","text":"在golang中，channel主要有两个操作，一个是 sending ，一个是 receiving ，这两种操作被称为通讯。 <- 箭头的方向表明是发送数据还是接受数据。在默认情况下，channel中的发送、接受操作块【直到另一端未就绪】 ，允许goroutine之间在没有显式锁或者条件变量的时候互相同步 发送操作：在channel的帮助下用来将goroutine的数据发送给另外一个goroutine，通过channel发送 float64 ， int ， bool 是安全切容易的，因为这些值会被 拷贝 一份，不会有意外并发的风险，同样的， strings 类型也是安全的，因为它是 immutable（不可更改） 。在发送 pointers 或者 slice ， map 等引用的时候，channel是不安全的，因为指针或者引用会被发送者或者接收者在同一时间修改，结果是不可预知的，因此需要==确保只有一个goroutine能够访问== Mychannel <- element 表明了数据（element）发送给了Mychannel 接受操作： element := <- Mychannel package main import \"fmt\" func main () { fmt . Println ( \"starting Main method\" ) ch := make ( chan int ) go myfunc ( ch ) ch <- 23 fmt . Println ( \"End Main method\" ) } func myfunc ( ch chan int ) { fmt . Println ( 234 + <- ch ) }","text_tokens":["只有","允许","修改","指针","接受","直到","用来","确保","表明","引用","同样","的","更改","{","帮助","channel","被","一时","receiving","风险","发送给","+","没有","发送","func","默认","sending","时候","strings","。","float64","因此","方向","中","切","一个","（","这些","情况","操作","一份","不可","golang","package","同步","main","未","element","chan","条件","主要","块","【","类型","结果",")","变量","锁",".","goroutine","它","通讯","pointers","immutable","23","另一端","method","预知","slice","意外","一端","同一时间","bool","安全","就绪","时间","-","值会","end","会","}","int","234","make","mychannel","将","、","）","需要","import","发送数据","能够","ch",":","println","starting","不会","称为","，","之间","显式","<","接收者","】","并发","因为","也","同一时","数据","\"","同一","有","两种","fmt","送给","或者","等","这","通过","不","发送者","：","访问","还是","拷贝","下","一时间","互相","两个","是"," ","箭头","(","接收","容易","在","了","go","另外","map","myfunc","="],"title":"Send and Receive Data From a Channel","title_tokens":["receive","a","from","and"," ","channel","send","data"]},{"location":"Golang/Basic/01 Channel/#closing-a-channel","text":"close() 这是一个内置函数，设了一个表示表明不会再有值发送给该channel。 ele, ok = <- Mychannel 通过循环，接受者会检查该channel是打开的还是关闭的，如果ok是真，则意味着该channel是打开的。 package main import \"fmt\" func main () { c := make ( chan string ) // 调用goroutine go myFunc ( c ) for { res , ok := <- c if ok == false { fmt . Println ( \"Channel Close\" , ok ) break } fmt . Println ( \"Channel Open\" , res , ok ) } } func myFunc ( mychnl chan string ) { for v := 0 ; v < 4 ; v ++ { mychnl <- \"GeeksforGeeks\" } close ( mychnl ) }","text_tokens":["ok","接受","表明","的","{","channel","for","发送给","设","发送","调用","func","v","open","if","受者","表示","。","内置","如果",",","一个","意味着","package","mychnl","break","main","chan",")","真","值",".","goroutine","4","则","string","/","意味","false","-","会","}","make","c","mychannel","循环","0","再有","这是","geeksforgeeks","关闭","import",":","println","++","不会","函数","，","检查","res","<","close","ele","\"","该","fmt","送给","通过","还是",";","接受者","是"," ","(","了","go","myfunc","=","打开"],"title":"Closing a Channel","title_tokens":["a"," ","closing","channel"]},{"location":"Golang/Basic/01 Channel/#blocking-send-and-receive","text":"在channel中，当数据发送给一个channel，直到另外的goroutine读取这个channel前，发送的声明是被阻塞的（发送完后必须等待该信息被读取才能够继续发送）。同样的，当一个channel接受数据的时候在接收到数据前都是被阻塞的。 channel中的零值是 nil 。 for 循环可以迭代channel中所有连续的值，直到该channel。 package main import \"fmt\" func main () { mychnl := make ( chan string ) go func () { mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" mychnl <- \"asdjjak\" close ( mychnl ) }() for res := range mychnl { fmt . Println ( res ) } }","text_tokens":["string","，","连续","res","信息","<","中","声明","当","直到","接受","数据","close","一个","零值","（","\"","该","到","-","package","等待","mychnl","gfg","同样","的","fmt","必须","{","送给","所有","}","main","channel","被","for","make","循环","chan","发送给","阻塞","可以","abc","这个","发送","完后","func",")","读取","是","）"," ","值","前","(","range","继续","接收","import","才","都",".","在","go","goroutine","能够","nil","asdjh","另外","asdjjak",":","println","=","迭代","时候","。"],"title":"Blocking Send and Receive","title_tokens":["receive","blocking","and"," ","send"]},{"location":"Golang/Basic/01 Channel/#length-of-the-channel","text":"len() 表明在channel缓冲区中==值的数量== package main import \"fmt\" func main () { mychnl := make ( chan string , 4 ) mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" mychnl <- \"asdjjak\" fmt . Println ( \"Length of the channel is:\" , len ( mychnl )) }","text_tokens":["string","<","length","中",",","len","\"","表明","-","package","数量","mychnl","gfg","的","fmt","{","the","}","main","channel","make","缓冲","chan","abc","缓冲区",")","func"," ","值","(","import","is",".","在","asdjh","asdjjak",":","println","4","of","="],"title":"Length of the Channel","title_tokens":["length","the","of"," ","channel"]},{"location":"Golang/Basic/01 Channel/#capacity-of-the-channel","text":"cap() 表明channel缓冲区的大小 package main import \"fmt\" func main () { mychnl := make ( chan string , 8 ) mychnl <- \"GFG\" mychnl <- \"ABC\" mychnl <- \"ASDJH\" fmt . Println ( \"Capacity of the channel is:\" , cap ( mychnl )) }","text_tokens":["string","<",",","\"","表明","-","package","mychnl","gfg","的","fmt","8","{","the","}","main","channel","make","capacity","缓冲","chan","abc","缓冲区","cap",")","func"," ","(","import","is",".","asdjh",":","println","of","=","大小"],"title":"Capacity of the Channel","title_tokens":["the","of"," ","channel","capacity"]},{"location":"Golang/Basic/02 UseDelveDebug/","text":"使用delve调试Golang 安装 vscode中, 通过 ctrl+shift+p 运行 Go: Install/Update Tools ,选择 dlv 安装 go get -u github.com/go-delve/delve/cmd/dlv 使用 vscode 在vscode中按F5, 弹出 launch.json 文件, 配置 { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Launch\" , \"type\" : \"go\" , \"request\" : \"launch\" , \"mode\" : \"debug\" , // auto \"program\" : \"${fileDirname}\" , \"env\" : { \"GOPATH\" : \"d:/workspace/go space/go\" }, \"args\" : [] } ] } 命令行debug package main import ( \"net/http\" \"github.com/gin-gonic/gin\" ) func HelloHandler ( c * gin . Context ) { firstname := c . DefaultQuery ( \"firstname\" , \"Guest\" ) lastname := c . Query ( \"lastname\" ) c . String ( http . StatusOK , \"Hello %s %s\" , firstname , lastname ) } func main () { router := gin . Default () router . GET ( \"/welcome\" , HelloHandler ) router . Run ( \":8000\" ) } 1. 进入要debug的文件目录 cd ../main.go dlv debug main.go // debug b HelloHandler // break point c // continue n // next s // step in p value // print value stepout // step out function st => start : Start : > http : // www . google . com [ blank ] e => end : > http : // www . google . com op1 => operation : My Operation sub1 => subroutine : My Subroutine cond => condition : Yes or No ?: > http : // www . google . com io => inputoutput : catch something ... st -> op1 -> cond cond ( yes ) -> io -> e cond ( no ) -> sub1 ( right ) -> op1 Title : Here is a title A -> B : Normal line B --> C : Dashed line C ->> D : Open arrow D -->> A : Dashed open arrow","text_tokens":["right","com","=","version","information","filedirname","$","google","here","debug","出","*","step","continue","no","subroutine","的","{","configurations","选择","point","launch","for","gonic","possible","+","statusok","op1","args","%","func","descriptions","open","microsoft","type","hover","defaultquery","n","run","[","?","catch","b","use","中",",","operation","title","something","attributes","package","golang","a","hellohandler","function","p","or","break","main","in","condition","blank","next","start","about","query","sub1",")","cmd","request","guest","安装","]","ctrl","welcome","arrow",".","命令","要","按","目录","install","shift","进入","http","learn","string","delve","router","fwlink","文件目录","value","调试","auto","使用","/","s","view","f5","github","-","end","..","}","space","...","program","命令行","c","io","context","cond","运行","more","hello","print","normal","import","json","配置",":","net","stepout","out","cd","firstname","inputoutput","tools","default","0.2","st","dashed","to","get",">","\"","u","visit","www","lastname","通过","env","e","d","gopath","830387","workspace","mode","vscode","https"," ","(","8000","update","dlv","is","在","go","弹","intellisense","existing","name","gin","yes","line","of","1","0","linkid","文件","my"],"title":"使用delve调试Golang","title_tokens":["使用","delve","调试","golang"]},{"location":"Golang/Basic/02 UseDelveDebug/#delvegolang","text":"","text_tokens":[],"title":"使用delve调试Golang","title_tokens":["使用","delve","调试","golang"]},{"location":"Golang/Basic/02 UseDelveDebug/#_1","text":"vscode中, 通过 ctrl+shift+p 运行 Go: Install/Update Tools ,选择 dlv 安装 go get -u github.com/go-delve/delve/cmd/dlv","text_tokens":["com","delve","tools","中","/",",","get","github","u","-","p","选择","通过","+","vscode","运行","cmd"," ","安装","ctrl","update","dlv",".","go",":","shift","install"],"title":"安装","title_tokens":["安装"]},{"location":"Golang/Basic/02 UseDelveDebug/#_2","text":"","text_tokens":[],"title":"使用","title_tokens":["使用"]},{"location":"Golang/Basic/02 UseDelveDebug/#vscode","text":"在vscode中按F5, 弹出 launch.json 文件, 配置 { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Launch\" , \"type\" : \"go\" , \"request\" : \"launch\" , \"mode\" : \"debug\" , // auto \"program\" : \"${fileDirname}\" , \"env\" : { \"GOPATH\" : \"d:/workspace/go space/go\" }, \"args\" : [] } ] }","text_tokens":["com","fwlink","information","version","filedirname","0.2","中","auto","/","to",",","view","$","f5","出","\"","debug","attributes","visit","{","}","configurations","space","launch","for","env","program","d","about","possible","830387","0","gopath","workspace","mode","vscode","https","args","more","descriptions"," ","request","]","microsoft",".","在","弹","json","intellisense","配置","hover","existing","按","go",":","name","[","type","of","=","?","learn","linkid","文件","use"],"title":"vscode","title_tokens":["vscode"]},{"location":"Golang/Basic/02 UseDelveDebug/#debug","text":"package main import ( \"net/http\" \"github.com/gin-gonic/gin\" ) func HelloHandler ( c * gin . Context ) { firstname := c . DefaultQuery ( \"firstname\" , \"Guest\" ) lastname := c . Query ( \"lastname\" ) c . String ( http . StatusOK , \"Hello %s %s\" , firstname , lastname ) } func main () { router := gin . Default () router . GET ( \"/welcome\" , HelloHandler ) router . Run ( \":8000\" ) } 1. 进入要debug的文件目录 cd ../main.go dlv debug main.go // debug b HelloHandler // break point c // continue n // next s // step in p value // print value stepout // step out function st => start : Start : > http : // www . google . com [ blank ] e => end : > http : // www . google . com op1 => operation : My Operation sub1 => subroutine : My Subroutine cond => condition : Yes or No ?: > http : // www . google . com io => inputoutput : catch something ... st -> op1 -> cond cond ( yes ) -> io -> e cond ( no ) -> sub1 ( right ) -> op1 Title : Here is a title A -> B : Normal line B --> C : Dashed line C ->> D : Open arrow D -->> A : Dashed open arrow","text_tokens":["right","com","google","here","debug","*","step","continue","no","subroutine","的","{","point","gonic","statusok","op1","%","func","open","defaultquery","n","run","[","?","catch","b",",","operation","title","something","package","a","hellohandler","function","p","or","break","main","in","condition","blank","next","start","query","sub1",")","guest","]","welcome","arrow",".","要","目录","进入","http","string","router","文件目录","value","/","s","github","-","end","..","}","...","c","io","context","cond","hello","print","normal","import",":","net","stepout","out","cd","firstname","inputoutput","default","st","dashed","get",">","\"","www","lastname","e","d"," ","(","8000","dlv","is","go","yes","line","gin","1","=","文件","my"],"title":"命令行debug","title_tokens":["debug","命令","命令行"]},{"location":"Golang/ErrorCollect/20191127：Cannot fint main module[gomod]/","text":"20191127：Cannot fint the main module[gomod] 环境 在尝试vscode的debug中输出了 go: cannot find main module; see 'go help modules' 原因 & 解决 根目录下没有 go.mod 文件, 需要 go mod init 初始化建立相关 .mod 文件;或者将环境变量中的 GO111MODULE=AUTO/OFF","text_tokens":["fint","初始","中","解决","auto","/","&",",","off","debug","环境变","相关","cannot","的","the","或者","main","gomod","环境变量","环境","：",";","下","尝试","输出","help","see","原因","没有","vscode","20191127","建立","将"," ","根目录","init","]","需要","变量","'","module",".","在","了","go","modules","初始化","目录",":","[","=","go111module","find","文件","mod"],"title":"20191127：Cannot fint the main module[gomod]","title_tokens":["cannot","module","fint","the","20191127","[","main"," ","gomod","：","]"]},{"location":"Golang/ErrorCollect/20191127：Cannot fint main module[gomod]/#20191127cannot-fint-the-main-modulegomod","text":"","text_tokens":[],"title":"20191127：Cannot fint the main module[gomod]","title_tokens":["cannot","module","fint","the","20191127","[","main"," ","gomod","：","]"]},{"location":"Golang/ErrorCollect/20191127：Cannot fint main module[gomod]/#_1","text":"在尝试vscode的debug中输出了 go: cannot find main module; see 'go help modules'","text_tokens":["中","debug","cannot","的","main",";","尝试","输出","help","see","vscode"," ","'","module","在","了","go","modules",":","find"],"title":"环境","title_tokens":["环境"]},{"location":"Golang/ErrorCollect/20191127：Cannot fint main module[gomod]/#_2","text":"根目录下没有 go.mod 文件, 需要 go mod init 初始化建立相关 .mod 文件;或者将环境变量中的 GO111MODULE=AUTO/OFF","text_tokens":["初始","中","auto","/",",","off","环境变","相关","的","或者","环境变量","环境",";","下","没有","建立","将"," ","根目录","init","需要","变量",".","初始化","go","目录","=","go111module","文件","mod"],"title":"原因 &amp; 解决","title_tokens":["amp",";","原因","解决","&"," "]},{"location":"Golang/Go-Web/01 HTTPServe/","text":"01：建立HTTP服务器的多种方法 建立服务器 package mian import ( \"log\" \"net/http\" ) func main () { http . HadnleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello world\" ) } log . Println ( \"starting HTTP server..\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } http.HandleFunc(pattern string, handler func(ResponseWriter, *Request) 根据一个==路由规则==绑定一个执行函数, 当用户访问到指定路由时执行. http.HandleFunc 的第二个参数必须符合函数签名 func(http.ResponseWriter, *http.Request) , 第一个参数是请求所对应的响应对象 http.ResponseWriter ,包含响应码、响应头和响应体, 在这里通过调用 响应对象 的 Write 方法像响应体写入字符串. 第二个参数是请求所对应的请求对象 *http.Request ,包含请求头、请求体等. http.ListenAndServe 启动HTTP服务器,监听 指定地址 和 端口号 的HTTP请求 http.HandleFunc 将传入的 绑定函数 转换为类型 http.HandleFunc (一个HTTP请求处理器对象),该对象类型实现 http.Handler 接口,接口方法调用自己 // net / http / server . go // The HandlerFunc type is an adapter to allow the use of // ordinary functions as HTTP handlers . If f is a function // with the appropriate signature , HandlerFunc ( f ) is a // Handler that calls f . type HandlerFunc func ( ResponseWriter , * Request ) // ServeHTTP calls f ( w , r ) . func ( f HandlerFunc ) ServeHTTP ( w ResponseWriter , r * Request ) { f ( w , r ) } 自定义Handler package main import ( \"log\" \"net/http\" ) type customHandler {} // 将ServeHTTP方法绑定到customHandler上 func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ){ w . Write ([] byte ( \"hello custom Handler\" ) } func main () { http . Handle ( \"/\" , & cutsomerHandler {}) log . Println ( \"starting HTTP server...\" ) log . Fatl ( http . ListenAndServe ( \":8000\" , nil )) } 自定义类型 type customHandler{} 类型绑定 ServerHTTP(w http.ResponseWriter, r *http.Request) 方法 http.Handle 调用, 通过 &customHandler{} 传入该自定义类型的地址 少了将绑定函数转换为 type HandleFunc 的步骤 服务复用器(ServeMux) // ListenAndServe listens on the TCP network address addr and then calls // Serve with handler to handle requests on incoming connections. // Accepted connections are configured to enable TCP keep-alives. // // The handler is typically nil, in which case the DefaultServeMux is used. // // ListenAndServe always returns a non-nil error. func ListenAndServe ( addr string , handler Handler ) error { server := & Server { Addr : addr , Handler : handler } return server . ListenAndServe () } //*****************************// type Handler interface { ServeHTTP ( ResponseWriter , * Request ) } 1. 实例中 http.ListenAndServe 的nil替代了实现了 http.Handler 接口的对象 2. http.Handler 实现 ServeHTTP 接口 3. 缺陷 该方法不能像之前调用的 http.HandleFunc 和 http.Handle 为不同路由规则绑定不同的函数处理 package main import ( \"log\" \"net/http\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux's ServeHTTP\" )) } func main () { log . Println ( \"starting HTTP server... \" ) log . Fatal ( http . ListenAndServe ( \":8000\" , & customHandler {})) } 自定义Serve Mux // HandleFunc registers the handler function for the given pattern // in the DefaultServeMux. // The documentation for ServeMux explains how patterns are matched. func HandleFunc ( pattern string , handler func ( ResponseWriter , * Request )) { DefaultServeMux . HandleFunc ( pattern , handler ) } //*****************************// // DefaultServeMux is the default ServeMux used by Serve. var DefaultServeMux = & defaultServeMux var defaultServeMux ServeMux //*****************************// type ServeMux struct { mu sync . RWMutex m map [ string ] muxEntry es [] muxEntry // slice of entries sorted from longest to shortest. hosts bool // whether any patterns contain hostnames } handle.Handle 调用 DefaultServeMux ,该 DefaultMux 是 http.ServeMux 的封装 http.ServeMux 带有基本路由功能的服务复用器(Serve Multiplexer) 通过 http.NewServeMux 操作 http.ServeMux 对象, 调用 http.NewServeMux 的 .Handle 方法 package main import ( \"log\" \"net/http\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello new custom server mux\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , mux )) } 服务器对象(Server) func ListenAndServe ( addr string , handler Handler ) error { server := & Server { Addr : addr , Handler : handler } return server . ListenAndServe () } //***************************// type Server struct { Addr string Handler Handler ... } 自定义server1 调用 http.ListenAndServe 的时候创建了另一个 http.Serve 对象 package main import ( \"log\" \"net/http\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) serve := & http . Server { Addr : \":8000\" , Handler : mux , } log . Println ( \"starting HTTP serve...\" ) log . Fatal ( serve . ListenAndServe ()) } 自定义server2 // custome server 2 package main import ( \"log\" \"net/http\" \"time\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux2\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) mux . HandleFunc ( \"/timeout\" , func ( w http . ResponseWriter , r * http . Request ) { // 超时 time . Sleep ( 2 * time . Second ) w . Write ([] byte ( \"Timeout\" )) }) server := & http . Server { Addr : \":8000\" , Handler : mux , WriteTimeout : 2 * time . Second , } log . Println ( \"starting HTTP server...\" ) log . Fatal ( server . ListenAndServe ()) } 1. 无法访问到 localhost:8000/timeout 2. 执行函数休眠2秒, 被 http.Serve 对象认为已经超时,提前关闭与客户端之间的连接, 后面无法像响应体写入任何信息 优雅地停止服务 通过捕捉系统信号(Signal)、goroutine和通道(Channel)实现 捕捉 os.Interrupt 信号(ctrl+c)然后调用 server.Shutdown 方法g告知服务器停止接受新请求 http.ErrServerClosed 根据该错误类型判断服务器是否正常关闭 package main import ( \"context\" \"log\" \"net/http\" \"os\" \"os/signal\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux2\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) server := & http . Server { Addr : \":8000\" , Handler : mux , } // 创建系统信号接收器 quit := make ( chan os . Signal ) signal . Notify ( quit , os . Interrupt ) go func () { <- quit if err := server . Shutdown ( context . Background ()); err != nil { log . Fatal ( \"Shutdown server:\" , err ) } }() log . Println ( \"start HTTP server...\" ) err := server . ListenAndServe () if err != nil { if err == http . ErrServerClosed { log . Print ( \"Server Closed under request\" ) } else { log . Fatal ( \"Server closed unexpected\" ) } } }","text_tokens":["上","timeout","已经","理器","&","然后","return","实现","服务","channel","被","documentation","秒","sorted","调用","另","customhandler","quit","use","listens","信息","缺陷","configured","2","a","提前","hostnames","_","custome","in","given","通道","字符串","start","任何","chan","cutsomerhandler","用器","request","不能","string","/","s","bool","functions","}","创建","包含","write","signature","自定义","自定","closed","响应","struct","enable","log","starting","对应","认为","所","和","告知","体","当","always","少","that","defaultservemux","which","unexpected","客户","：","启动","mu","请求","步骤","from","(","8000","interrupt","处理器","is","nil","var","地址","g","as","传入","serve","by","!","务器","的","the","case","fatl","+","无法","方法","explains","requests","responsewriter","servehttp","world","hadnlefunc","else",",","writetimeout","patterns","handlers","main","第二","multiplexer",")","]","ctrl","goroutine","second","转换","slice","监听","端口号","custom","longest","-","3","...","addr","c","功能","server","fatal","hello","关闭","停止","'","休眠","mux2","println",":","handler","捕捉","第一","函数","是否","time","之间","new","os","notify","matched","calls","background","无法访问","这里","network","go","w","of","adapter","entries","用户","不同","二个","字符","handle","muxentry","替代","func","服务器","签名","address","type","端口","[","根据","时候","any","为","中","接收器","typically","accepted","package","shutdown","写入","第一个","ordinary","listenandserve","规则","are","正常","whether","es","how","err","之前","localhost","and","http","后面","连接","f","复用器","with","判断","客户端","系统","shortest","接口","contain","..","信号","alives","tcp","自己","新","server2","建立","、","used","import","on","servemux","allow","returns","default","hosts","<","connections","错误","\"","该","01","封装","通过","under",";","是"," ","码","指定","路由","在","map","=","incoming","rwmutex","mux","serverhttp","m","sleep","接受","*","实例","{","带有","for","复用","if","mian","errserverclosed","口号","第二个","一个","到","操作","超时","function","类型","优雅",".","interface","registers","signal","地","符合","执行","an","make","handlefunc","context","handlerfunc","sync","将","print","r","non","error","体等","net","基本","定义","newservemux","keep","pattern","to","时","与","像","对象","必须","绑定","多种","处理","访问","then","server1","byte","接收","头","了","参数","defaultmux","1","appropriate"],"title":"01：建立HTTP服务器的多种方法","title_tokens":["服务","务器","的","01","建立","服务器","多种","http","方法","："]},{"location":"Golang/Go-Web/01 HTTPServe/#01http","text":"","text_tokens":[],"title":"01：建立HTTP服务器的多种方法","title_tokens":["服务","务器","的","01","建立","服务器","多种","http","方法","："]},{"location":"Golang/Go-Web/01 HTTPServe/#_1","text":"package mian import ( \"log\" \"net/http\" ) func main () { http . HadnleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello world\" ) } log . Println ( \"starting HTTP server..\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } http.HandleFunc(pattern string, handler func(ResponseWriter, *Request) 根据一个==路由规则==绑定一个执行函数, 当用户访问到指定路由时执行. http.HandleFunc 的第二个参数必须符合函数签名 func(http.ResponseWriter, *http.Request) , 第一个参数是请求所对应的响应对象 http.ResponseWriter ,包含响应码、响应头和响应体, 在这里通过调用 响应对象 的 Write 方法像响应体写入字符串. 第二个参数是请求所对应的请求对象 *http.Request ,包含请求头、请求体等. http.ListenAndServe 启动HTTP服务器,监听 指定地址 和 端口号 的HTTP请求 http.HandleFunc 将传入的 绑定函数 转换为类型 http.HandleFunc (一个HTTP请求处理器对象),该对象类型实现 http.Handler 接口,接口方法调用自己 // net / http / server . go // The HandlerFunc type is an adapter to allow the use of // ordinary functions as HTTP handlers . If f is a function // with the appropriate signature , HandlerFunc ( f ) is a // Handler that calls f . type HandlerFunc func ( ResponseWriter , * Request ) // ServeHTTP calls f ( w , r ) . func ( f HandlerFunc ) ServeHTTP ( w ResponseWriter , r * Request ) { f ( w , r ) }","text_tokens":["as","用户","传入","二个","字符","理器","*","实现","服务","务器","的","{","the","调用","func","服务器","方法","签名","if","type","端口","responsewriter","servehttp","[","mian","根据","world","hadnlefunc","use","为","口号","第二个",",","一个","到","package","写入","第一个","a","ordinary","listenandserve","规则","function","handlers","main","第二","字符串","类型",")","request","]",".","http","转换","f","string","with","监听","端口号","/","符合","functions","接口","..","}","执行","an","handlefunc","自己","包含","server","fatal","write","handlerfunc","将","、","signature","hello","import","r","响应","对应","log","println","net","starting",":","handler","体等","第一","allow","函数","所","和","pattern","体","当","to","\"","该","that","时","像","对象","绑定","必须","通过","处理","calls","访问","启动","请求","byte","是"," ","(","8000","码","指定","路由","这里","处理器","is","头","在","go","nil","参数","地址","w","of","=","adapter","appropriate"],"title":"建立服务器","title_tokens":["服务器","务器","建立","服务"]},{"location":"Golang/Go-Web/01 HTTPServe/#handler","text":"package main import ( \"log\" \"net/http\" ) type customHandler {} // 将ServeHTTP方法绑定到customHandler上 func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ){ w . Write ([] byte ( \"hello custom Handler\" ) } func main () { http . Handle ( \"/\" , & cutsomerHandler {}) log . Println ( \"starting HTTP server...\" ) log . Fatl ( http . ListenAndServe ( \":8000\" , nil )) } 自定义类型 type customHandler{} 类型绑定 ServerHTTP(w http.ResponseWriter, r *http.Request) 方法 http.Handle 调用, 通过 &customHandler{} 传入该自定义类型的地址 少了将绑定函数转换为 type HandleFunc 的步骤","text_tokens":["为","serverhttp","步骤","上","传入","/","&",",","少","\"","*","custom","handle","到","该","package","的","绑定","listenandserve","{","}","转换","_","main","通过","...","handlefunc","fatl","server","类型","write","byte",")","func","cutsomerhandler","customhandler","将","调用"," ","request","(","hello","8000","方法","]","函数","自定义","自定","import","r",".","type","了","nil","responsewriter","地址","servehttp","log","w","[","net","handler","println","http","starting",":","定义"],"title":"自定义Handler","title_tokens":["自定义","handler","定义","自定"]},{"location":"Golang/Go-Web/01 HTTPServe/#servemux","text":"// ListenAndServe listens on the TCP network address addr and then calls // Serve with handler to handle requests on incoming connections. // Accepted connections are configured to enable TCP keep-alives. // // The handler is typically nil, in which case the DefaultServeMux is used. // // ListenAndServe always returns a non-nil error. func ListenAndServe ( addr string , handler Handler ) error { server := & Server { Addr : addr , Handler : handler } return server . ListenAndServe () } //*****************************// type Handler interface { ServeHTTP ( ResponseWriter , * Request ) } 1. 实例中 http.ListenAndServe 的nil替代了实现了 http.Handler 接口的对象 2. http.Handler 实现 ServeHTTP 接口 3. 缺陷 该方法不能像之前调用的 http.HandleFunc 和 http.Handle 为不同路由规则绑定不同的函数处理 package main import ( \"log\" \"net/http\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux's ServeHTTP\" )) } func main () { log . Println ( \"starting HTTP server... \" ) log . Fatal ( http . ListenAndServe ( \":8000\" , & customHandler {})) }","text_tokens":["mux","不同","&","serve","*","handle","return","实现","实例","的","{","the","case","替代","调用","func","customhandler","方法","requests","address","type","responsewriter","servehttp","[","为","listens","中","typically",",","accepted","缺陷","configured","package","2","a","listenandserve","规则","are","_","main","in","之前",")","and","request","不能","]",".","interface","http","string","with","/","s","custom","-","3","接口","}","addr","tcp","alives","handlefunc","...","server","fatal","write","used","hello","import","r","on","non","'","error","enable",":","log","handler","net","struct","println","starting","函数","returns","keep","和","connections","to","always","\"","该","defaultservemux","像","对象","绑定","which","calls","处理","then","byte"," ","(","8000","路由","is","network","了","nil","w","1","=","incoming"],"title":"服务复用器(ServeMux)","title_tokens":["复用器","服务","复用",")","servemux","用器","("]},{"location":"Golang/Go-Web/01 HTTPServe/#serve-mux","text":"// HandleFunc registers the handler function for the given pattern // in the DefaultServeMux. // The documentation for ServeMux explains how patterns are matched. func HandleFunc ( pattern string , handler func ( ResponseWriter , * Request )) { DefaultServeMux . HandleFunc ( pattern , handler ) } //*****************************// // DefaultServeMux is the default ServeMux used by Serve. var DefaultServeMux = & defaultServeMux var defaultServeMux ServeMux //*****************************// type ServeMux struct { mu sync . RWMutex m map [ string ] muxEntry es [] muxEntry // slice of entries sorted from longest to shortest. hosts bool // whether any patterns contain hostnames } handle.Handle 调用 DefaultServeMux ,该 DefaultMux 是 http.ServeMux 的封装 http.ServeMux 带有基本路由功能的服务复用器(Serve Multiplexer) 通过 http.NewServeMux 操作 http.ServeMux 对象, 调用 http.NewServeMux 的 .Handle 方法 package main import ( \"log\" \"net/http\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello new custom server mux\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , mux )) }","text_tokens":["rwmutex","mux","m","&","serve","*","handle","by","服务","muxentry","的","{","the","带有","for","documentation","sorted","调用","func","customhandler","复用","方法","explains","type","responsewriter","servehttp","[","any",",","patterns","操作","package","hostnames","listenandserve","function","are","_","main","in","whether","es","given","multiplexer","how",")","用器","request","]",".","http","registers","string","slice","复用器","/","bool","shortest","custom","longest","contain","}","...","handlefunc","功能","server","fatal","write","sync","used","hello","import","r","struct","log","servemux","handler","net",":","基本","println","starting","newservemux","default","hosts","pattern","to","new","\"","该","matched","defaultservemux","对象","封装","通过","mu","from","byte","是"," ","(","8000","路由","is","var","map","w","defaultmux","of","=","entries"],"title":"自定义Serve Mux","title_tokens":["mux","定义"," ","serve","自定义","自定"]},{"location":"Golang/Go-Web/01 HTTPServe/#server","text":"func ListenAndServe ( addr string , handler Handler ) error { server := & Server { Addr : addr , Handler : handler } return server . ListenAndServe () } //***************************// type Server struct { Addr string Handler Handler ... }","text_tokens":["string","/","&",",","*","return","listenandserve","{","}","addr","...","server","func",")"," ","(",".","type","error","struct",":","handler","="],"title":"服务器对象(Server)","title_tokens":["服务","务器","对象","server",")","服务器","("]},{"location":"Golang/Go-Web/01 HTTPServe/#server1","text":"调用 http.ListenAndServe 的时候创建了另一个 http.Serve 对象 package main import ( \"log\" \"net/http\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) serve := & http . Server { Addr : \":8000\" , Handler : mux , } log . Println ( \"starting HTTP serve...\" ) log . Fatal ( serve . ListenAndServe ()) }","text_tokens":["newservemux","mux","=","/","&",",","serve","一个","\"","*","custom","handle","package","的","对象","listenandserve","{","}","_","main","addr","...","创建","server","fatal","调用","write","另",")","func","customhandler","byte"," ","request","(","hello","8000","]","import","r",".","了","type","responsewriter","struct","log","servehttp","w","net","[",":","http","handler","println","starting","时候"],"title":"自定义server1","title_tokens":["自定义","server1","定义","自定"]},{"location":"Golang/Go-Web/01 HTTPServe/#server2","text":"// custome server 2 package main import ( \"log\" \"net/http\" \"time\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux2\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) mux . HandleFunc ( \"/timeout\" , func ( w http . ResponseWriter , r * http . Request ) { // 超时 time . Sleep ( 2 * time . Second ) w . Write ([] byte ( \"Timeout\" )) }) server := & http . Server { Addr : \":8000\" , Handler : mux , WriteTimeout : 2 * time . Second , } log . Println ( \"starting HTTP server...\" ) log . Fatal ( server . ListenAndServe ()) } 1. 无法访问到 localhost:8000/timeout 2. 执行函数休眠2秒, 被 http.Serve 对象认为已经超时,提前关闭与客户端之间的连接, 后面无法像响应体写入任何信息","text_tokens":["mux","sleep","timeout","已经","&","serve","*","handle","的","{","被","秒","无法","func","customhandler","type","responsewriter","servehttp","[","信息",",","writetimeout","到","package","2","写入","提前","超时","listenandserve","_","custome","main","任何",")","localhost","request","]",".","second","http","后面","连接","客户端","/","custom","}","执行","addr","...","handlefunc","server","fatal","write","hello","关闭","import","r","响应","休眠","mux2","struct","starting","log",":","net","handler","println","认为","函数","newservemux","time","之间","体","\"","与","像","对象","客户","访问","byte"," ","(","8000","无法访问","w","1","="],"title":"自定义server2","title_tokens":["自定义","server2","定义","自定"]},{"location":"Golang/Go-Web/01 HTTPServe/#_2","text":"通过捕捉系统信号(Signal)、goroutine和通道(Channel)实现 捕捉 os.Interrupt 信号(ctrl+c)然后调用 server.Shutdown 方法g告知服务器停止接受新请求 http.ErrServerClosed 根据该错误类型判断服务器是否正常关闭 package main import ( \"context\" \"log\" \"net/http\" \"os\" \"os/signal\" ) type customHandler struct {} func ( _ * customHandler ) ServeHTTP ( w http . ResponseWriter , r * http . Request ) { w . Write ([] byte ( \"hello custom server mux2\" )) } func main () { mux := http . NewServeMux () mux . Handle ( \"/\" , & customHandler {}) server := & http . Server { Addr : \":8000\" , Handler : mux , } // 创建系统信号接收器 quit := make ( chan os . Signal ) signal . Notify ( quit , os . Interrupt ) go func () { <- quit if err := server . Shutdown ( context . Background ()); err != nil { log . Fatal ( \"Shutdown server:\" , err ) } }() log . Println ( \"start HTTP server...\" ) err := server . ListenAndServe () if err != nil { if err == http . ErrServerClosed { log . Print ( \"Server Closed under request\" ) } else { log . Fatal ( \"Server closed unexpected\" ) } } }","text_tokens":["mux","g","接受","&","然后","*","handle","实现","!","服务","务器","{","channel","+","调用","func","服务器","customhandler","方法","if","type","responsewriter","quit","servehttp","[","根据","errserverclosed","else","接收器",",","package","shutdown","listenandserve","正常","_","main","通道","start","chan","err","类型",")","request","]","ctrl",".","goroutine","http","判断","signal","/","系统","custom","-","信号","}","addr","...","make","c","创建","context","新","server","fatal","write","、","停止","关闭","hello","print","import","closed","r","mux2","struct","log",":","handler","net","println","捕捉","是否","newservemux","<","和","告知","错误","os","\"","notify","该","unexpected","under","通过","background","请求",";","byte"," ","(","8000","接收","interrupt","go","nil","w","="],"title":"优雅地停止服务","title_tokens":["停止","优雅","服务","地"]},{"location":"Golang/Go-Web/02 BasicTemplateUsage/","text":"02：基础模板 为什么要用模板 HTTP服务器响应固定的字符串不符合实际环境, 通过 text/template 包向客户端 响应动态内容 . 特性 将模板应用于给定的数据结构来执行模板，模板的编码与 Go 语言源代码文件相同，需为 UTF-8 编码 模板中的注解（Annotation）会根据数据结构中的元素来执行并派生具体的显示结构，这些元素一般指结构体中的字段或 map 中的键名 模板的执行逻辑会依据点（Dot，\".\"）操作符来设定当前的执行位置，并按序完成所有逻辑的执行。 模板中的行为（Action）包括数据评估（Data Evaluation）和控制逻辑，且需要使用双层大括号（{{ 和 }}）包裹。除行为以外的任何内容都会原样输出不做修改。 模板解析完成后，从设计上可以并发地进行渲染，但要注意被渲染对象的并发安全性。例如，一个模板可以同时为多个客户端的响应进行渲染，因为输出对象（Writer）是相互独立的，但是被渲染的对象可能有各自的状态和时效性。 如何使用模板 实例 package main import ( \"fmt\" \"text/template\" \"log\" \"net/http\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // 创建模板对象并解析模板内容 tmpl , err := template . New ( \"test\" ). Parse ( \"Hello world!\" ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } // 调用模板对象的渲染方法 err = tmpl . Execute ( w , nil ) if err != nil { fmt . Fprintf ( w , \"Excute: %v\" , err ) return } }) log . Println ( \"starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } 1. 引入 text/template 包. 2. 调用 template.New 方法根据给定的名称新建模板, 返回一个 *template.Template 对象. 3. *template.Template 对象的 Parse 方法接受字符串参数(文本模板内容), 解析并返回解析中遇到的错误. 4. 调用 template.Execute 渲染模板, 参数分别为 输出对象 和 指定数据对象 , 实现了 io.Writer 接口的实例都可以作为输出对象. 渲染变量 package main import ( \"net/http\" \"log\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Reqeust ){ w . Write ([] byte ( r . URL . QUERY (). GET ( \"val\" ))) }) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } HTTP协议通过 GET 请求获取URL参数(URL中?后的值). 调用 *http.Request 对象的 URL.QUERY().GET() 方法. package main import ( \"fmt\" \"text/template\" \"log\" \"net/http\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // 创建模板并解析内容 tmpl , err := template . New ( \"test\" ). Parse ( \"The value is: {{.}}\" ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } // 获取URL参数的值 val := r . URL . Query (). Get ( \"val\" ) // 调用模板对象渲染方法 err = tmpl . Execute ( w , val ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } 模板内容修改成 The value is : {{.}} , 用了 分隔符 将 . 操作符包裹起来, . 操作符默认指向 根对象 , 即 template.Execute 中的第二个参数. 在 template.Execute 方法中传入 val , . 操作符渲染该变量 val 实现动态输出. 渲染复杂对象 package main import ( \"fmt\" \"text/template\" \"log\" \"net/http\" \"strconv\" ) // Inventory 库存 type Inventory struct { SKU string Name string UnitPrice float64 Quantity int64 , } func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( `Inventory SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse:%v\" , err ) return } // 根据URL查询参数的值创建Inventory实例 inventory := & Inventory { SKU : r . URL . Query (). Get ( \"sku\" ), Name : r . URL . Query (). Get ( \"name\" ), } // 数据处理 inventory . UnitPrice , _ = strconv . ParseFloat ( r . URL . Query (). Get ( \"unitPrice\" ), 64 ) inventory . Quantity , _ = strconv . ParseInt ( r . URL . Query (). Get ( \"quantity\" ), 10 , 64 ) // 渲染 err = tmpl . Execute ( w , inventory ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"start HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } template.Execute 的第二个参数类型为 interface{} , 可以传入任何类型的参数. func ( t * Template ) Execute ( wr io . Writer , data interface {}) error { if err := t . escape (); err != nil { return err } return t . text . Execute ( wr , data ) } http/template 会根据传入的 根对象 进行底层类型分析, 自动识别变量, 此时的 . 操作符代表 inventory 结构体, 因此可以调用 inventory 的各个属性. 在 Parse 的时候用反引号``将结构体包起来. 渲染中调用结构体的方法 func ( i * Inventory ) Subtotal () float64 { return i . UnitPrice * float64 ( i . Quantity ) } //******************************// http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( `Inventory SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} Subtotal: {{.Subtotal}} ` ) map类型作为模板跟对象 package main import ( \"fmt\" \"log\" \"net/http\" \"strconv\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // 创建模板对象并解析模板内容 tmpl , err := template . New ( \"test\" ). Parse ( `Inventory SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } // 直接将URL 查询参数的值赋值给变量 sku := r . URL . Query (). Get ( \"sku\" ) name := r . URL . Query (). Get ( \"name\" ) unitPrice , _ := strconv . ParseFloat ( r . URL . Query (). Get ( \"unitPrice\" ), 64 ) quantity , _ := strconv . ParseInt ( r . URL . Query (). Get ( \"quantity\" ), 10 , 64 ) err = tmpl . Execute ( w , map [ string ] interface {}{ \"SKU\" : sku , \"Name\" : name , \"UnitPrice\" : unitPrice , \"Quantity\" : quantity , }) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"Starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \"localhost:8000\" , nil )) } 1. 传递给 Execute 一个 map[string]interface{} 作为模板对象,可以传入任意类型的值, 将结构体的所有值都传入. 2. 不再需要单独创建实例, 只需要通过 r.URL.Query().Get(valName) 获取URL查询参数的值. 3. 其中数值需要用到 strconv.ParseInt/ParseFloat 进行转化 注释 tmpl , err := template . New ( \"test\" ). Parse ( `Inventory{{/* 打印参数的值 */}} SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} ` ) 1. 通过 {{}} 双层大括号和 /**/ 括起来的值是注释 模板流程 template.New 新建模板, 返回 *template.Template 对象 调用 *template.Template 对象的 Parse 方法解析模板 传入模板实例 数据处理 strconv 调用 *template.Template 对象的 Execute 方法渲染模板","text_tokens":["注解","上","相同","&","return","t","execute","实现","服务","被","可以","调用","结构","注释","默认","符合实际","?","float64","固定","状态","因此","64","模板","`","段","识别","原样","2","操作符","分别","查询","包","_","字符串","start","任何","valname","给定","request","变量","同时","4","指","特性","string","value","/","不再","除","}","转化","创建","io","write","行为","获取","响应","直接","派生","struct","log","starting","，","和","体","并发","属性","进行","url","协议","设定","fmt","复杂","客户","显示","：","请求","或","此时","括号","(","8000","is","引入","引号","action","nil","name","源代码","多个","流程","writer","传入","fprintf","serve","!","务器","的","the","环境","当前","inventory","方法","只","10","responsewriter","world","。","parseint",",","元素","什么","例如","（","具体","test","且","需为","main","第二","escape",")","值","以外","]","应用","指向","数值","-","3","所有","...","传递","server","fatal","）","hello","语言","动态",":","println","完成","库存","new","数据","有","tmpl","不","excute","分隔","为什么","go","template","w","注意","点","文件","int64","数据处理","相互","自动识别","用","字符","二个","单独","后","02","于","但","func","服务器","解析","type","[","根据","位置","做","按序","自动","时候","为","中","底层","给","这些","大括号","package","基础","listenandserve","跟","query","err","反","localhost","编码","实际","返回","http","新建","客户端","从","会","键名","接口","quantity","设计","数据结构","各个","需要","import","unitprice","赋值","文本","因为","依据","错误","\"","该","wr","评估","通过","reqeust",";","是","体包"," ","指定","在","map","=","渲染","修改","包裹","接受","parsefloat","*","实例","控制","{","一般","起来","代码","代表","并","text","i","%","parse","v","data","if","如何","双层","evaluation","第二个","时效性","打印","一个","遇到","任意","操作","独立","类型","各自","逻辑","可能","用到","都",".","val","要","interface","subtotal","分析","地","内容","符合","使用","安全","dot","包括","括","其中","utf","8","执行","时效","作为","handlefunc","输出","将","根","r","来","error","net","包向","get","安全性","annotation","与","成","对象","处理","名称","分隔符","体中","字","byte","sku","但是","即","了","参数","strconv","1"],"title":"02：基础模板","title_tokens":["：","模板","基础","02"]},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#02","text":"","text_tokens":[],"title":"02：基础模板","title_tokens":["：","模板","基础","02"]},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_1","text":"HTTP服务器响应固定的字符串不符合实际环境, 通过 text/template 包向客户端 响应动态内容 .","text_tokens":["固定","包向","客户端","内容","字符","/","符合",",","服务","务器","的","不","通过","客户","环境","字符串","text","服务器"," ","动态","响应",".","template","实际","http","符合实际"],"title":"为什么要用模板","title_tokens":["用","要","模板","什么","为什么"]},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_2","text":"将模板应用于给定的数据结构来执行模板，模板的编码与 Go 语言源代码文件相同，需为 UTF-8 编码 模板中的注解（Annotation）会根据数据结构中的元素来执行并派生具体的显示结构，这些元素一般指结构体中的字段或 map 中的键名 模板的执行逻辑会依据点（Dot，\".\"）操作符来设定当前的执行位置，并按序完成所有逻辑的执行。 模板中的行为（Action）包括数据评估（Data Evaluation）和控制逻辑，且需要使用双层大括号（{{ 和 }}）包裹。除行为以外的任何内容都会原样输出不做修改。 模板解析完成后，从设计上可以并发地进行渲染，但要注意被渲染对象的并发安全性。例如，一个模板可以同时为多个客户端的响应进行渲染，因为输出对象（Writer）是相互独立的，但是被渲染的对象可能有各自的状态和时效性。","text_tokens":["注解","writer","修改","相互","包裹","相同","上","后","控制","的","{","被","于","当前","一般","代码","可以","并","但","结构","data","解析","根据","位置","做","按序","。","双层","为","evaluation","状态","中","时效性","模板","元素","例如","段","一个","（","具体","这些","大括号","且","操作","原样","操作符","需为","独立","任何","给定","编码","各自","逻辑","以外","可能","都",".","同时","要","指","应用","客户端","地","内容","使用","安全","从","除","dot","-","包括","会","utf","8","键名","执行","}","所有","时效","输出","设计","将","数据结构","）","需要","行为","语言","响应","来","派生","完成","，","和","并发","因为","数据","依据","进行","\"","安全性","有","annotation","与","设定","对象","不","评估","客户","显示","体中","字","或","是"," ","括号","但是","action","go","源代码","map","注意","多个","点","渲染","文件"],"title":"特性","title_tokens":["特性"]},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_3","text":"","text_tokens":[],"title":"如何使用模板","title_tokens":["使用","如何","模板"]},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_4","text":"package main import ( \"fmt\" \"text/template\" \"log\" \"net/http\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // 创建模板对象并解析模板内容 tmpl , err := template . New ( \"test\" ). Parse ( \"Hello world!\" ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } // 调用模板对象的渲染方法 err = tmpl . Execute ( w , nil ) if err != nil { fmt . Fprintf ( w , \"Excute: %v\" , err ) return } }) log . Println ( \"starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } 1. 引入 text/template 包. 2. 调用 template.New 方法根据给定的名称新建模板, 返回一个 *template.Template 对象. 3. *template.Template 对象的 Parse 方法接受字符串参数(文本模板内容), 解析并返回解析中遇到的错误. 4. 调用 template.Execute 渲染模板, 参数分别为 输出对象 和 指定数据对象 , 实现了 io.Writer 接口的实例都可以作为输出对象.","text_tokens":["writer","字符","接受","fprintf","*","return","execute","!","实现","实例","的","{","可以","并","text","调用","%","func","parse","v","方法","解析","if","responsewriter","根据","world","为","中",",","模板","一个","test","遇到","package","2","分别","listenandserve","包","main","字符串","err",")","给定","request","都",".","4","返回","http","新建","内容","/","3","接口","}","作为","...","handlefunc","创建","io","输出","server","fatal","hello","import","r","log",":","println","net","starting","和","文本","new","错误","数据","\"","fmt","对象","tmpl","excute","名称"," ","(","8000","指定","引入","了","nil","参数","template","w","1","=","渲染"],"title":"实例","title_tokens":["实例"]},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_5","text":"package main import ( \"net/http\" \"log\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Reqeust ){ w . Write ([] byte ( r . URL . QUERY (). GET ( \"val\" ))) }) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } HTTP协议通过 GET 请求获取URL参数(URL中?后的值). 调用 *http.Request 对象的 URL.QUERY().GET() 方法. package main import ( \"fmt\" \"text/template\" \"log\" \"net/http\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // 创建模板并解析内容 tmpl , err := template . New ( \"test\" ). Parse ( \"The value is: {{.}}\" ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } // 获取URL参数的值 val := r . URL . Query (). Get ( \"val\" ) // 调用模板对象渲染方法 err = tmpl . Execute ( w , val ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } 模板内容修改成 The value is : {{.}} , 用了 分隔符 将 . 操作符包裹起来, . 操作符默认指向 根对象 , 即 template.Execute 中的第二个参数. 在 template.Execute 方法中传入 val , . 操作符渲染该变量 val 实现动态输出.","text_tokens":["修改","用","包裹","传入","二个","fprintf","serve","*","return","后","execute","!","实现","的","{","the","起来","并","text","调用","%","func","parse","v","方法","解析","if","responsewriter","默认","[","?","第二个","中",",","模板","test","package","操作","操作符","listenandserve","main","第二","query","err",")","值","request","]","变量",".","val","http","指向","value","内容","/","}","...","handlefunc","创建","输出","server","fatal","write","将","根","获取","import","动态","r","log","println","starting","net",":","get","new","\"","该","成","url","协议","对象","fmt","tmpl","通过","分隔","请求","reqeust","分隔符","byte"," ","(","8000","即","is","在","了","nil","参数","template","w","=","渲染"],"title":"渲染变量","title_tokens":["渲染","变量"]},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_6","text":"package main import ( \"fmt\" \"text/template\" \"log\" \"net/http\" \"strconv\" ) // Inventory 库存 type Inventory struct { SKU string Name string UnitPrice float64 Quantity int64 , } func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( `Inventory SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse:%v\" , err ) return } // 根据URL查询参数的值创建Inventory实例 inventory := & Inventory { SKU : r . URL . Query (). Get ( \"sku\" ), Name : r . URL . Query (). Get ( \"name\" ), } // 数据处理 inventory . UnitPrice , _ = strconv . ParseFloat ( r . URL . Query (). Get ( \"unitPrice\" ), 64 ) inventory . Quantity , _ = strconv . ParseInt ( r . URL . Query (). Get ( \"quantity\" ), 10 , 64 ) // 渲染 err = tmpl . Execute ( w , inventory ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"start HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } template.Execute 的第二个参数类型为 interface{} , 可以传入任何类型的参数. func ( t * Template ) Execute ( wr io . Writer , data interface {}) error { if err := t . escape (); err != nil { return err } return t . text . Execute ( wr , data ) } http/template 会根据传入的 根对象 进行底层类型分析, 自动识别变量, 此时的 . 操作符代表 inventory 结构体, 因此可以调用 inventory 的各个属性. 在 Parse 的时候用反引号``将结构体包起来.","text_tokens":["int64","数据处理","writer","自动识别","用","传入","二个","fprintf","&","parsefloat","serve","*","return","t","execute","!","实例","的","{","起来","可以","代表","inventory","text","调用","%","func","parse","结构","v","data","10","if","type","responsewriter","根据","自动","时候","parseint","float64","为","第二个","因此","64",",","`","底层","识别","test","package","操作","操作符","查询","listenandserve","_","main","第二","start","任何","escape","query","err","反","类型",")","request","值","变量",".","interface","http","string","分析","/","会","}","...","handlefunc","创建","io","quantity","fatal","将","各个","根","import","unitprice","r","error","struct","log",":","println","net","库存","体","new","get","属性","数据","进行","\"","url","fmt","对象","tmpl","wr","处理",";","此时","体包"," ","(","8000","sku","引号","在","nil","参数","name","template","w","strconv","=","渲染"],"title":"渲染复杂对象","title_tokens":["渲染","复杂","对象"]},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_7","text":"func ( i * Inventory ) Subtotal () float64 { return i . UnitPrice * float64 ( i . Quantity ) } //******************************// http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( `Inventory SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} Subtotal: {{.Subtotal}} ` )","text_tokens":["subtotal","float64","=","/",",","new","`","\"","*","return","test","tmpl","{","}","handlefunc","err","inventory","quantity","i","func",")","parse"," ","request","(","sku","unitprice","r",".","responsewriter","name","template","w",":","http"],"title":"渲染中调用结构体的方法","title_tokens":["的","调用","中","体","结构","渲染","方法"]},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#map","text":"package main import ( \"fmt\" \"log\" \"net/http\" \"strconv\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // 创建模板对象并解析模板内容 tmpl , err := template . New ( \"test\" ). Parse ( `Inventory SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } // 直接将URL 查询参数的值赋值给变量 sku := r . URL . Query (). Get ( \"sku\" ) name := r . URL . Query (). Get ( \"name\" ) unitPrice , _ := strconv . ParseFloat ( r . URL . Query (). Get ( \"unitPrice\" ), 64 ) quantity , _ := strconv . ParseInt ( r . URL . Query (). Get ( \"quantity\" ), 10 , 64 ) err = tmpl . Execute ( w , map [ string ] interface {}{ \"SKU\" : sku , \"Name\" : name , \"UnitPrice\" : unitPrice , \"Quantity\" : quantity , }) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"Starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \"localhost:8000\" , nil )) } 1. 传递给 Execute 一个 map[string]interface{} 作为模板对象,可以传入任意类型的值, 将结构体的所有值都传入. 2. 不再需要单独创建实例, 只需要通过 r.URL.Query().Get(valName) 获取URL查询参数的值. 3. 其中数值需要用到 strconv.ParseInt/ParseFloat 进行转化","text_tokens":["传入","fprintf","parsefloat","单独","*","return","execute","!","实例","的","{","可以","并","inventory","text","%","func","parse","结构","v","只","解析","10","if","responsewriter","[","parseint","64",",","模板","`","给","一个","test","package","任意","2","查询","listenandserve","_","main","query","err","类型","valname",")","localhost","request","值","]","变量","用到","都",".","interface","http","string","内容","/","不再","数值","3","其中","}","所有","作为","...","handlefunc","传递","转化","创建","quantity","server","fatal","将","需要","获取","import","unitprice","r","赋值","直接","log",":","println","net","starting","体","new","get","进行","\"","url","fmt","对象","tmpl","通过"," ","(","8000","sku","nil","参数","name","template","w","strconv","map","1","="],"title":"map类型作为模板跟对象","title_tokens":["对象","类型","map","跟","模板","作为"]},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_8","text":"tmpl , err := template . New ( \"test\" ). Parse ( `Inventory{{/* 打印参数的值 */}} SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} ` ) 1. 通过 {{}} 双层大括号和 /**/ 括起来的值是注释","text_tokens":["双层","和","/",",","new","`","打印","*","\"","test","大括号","括","的","tmpl","{","}","通过","起来","err","inventory","quantity",")","是","parse"," ","值","(","括号","sku","unitprice",".","参数","name","template","注释",":","1","="],"title":"注释","title_tokens":["注释"]},{"location":"Golang/Go-Web/02 BasicTemplateUsage/#_9","text":"template.New 新建模板, 返回 *template.Template 对象 调用 *template.Template 对象的 Parse 方法解析模板 传入模板实例 数据处理 strconv 调用 *template.Template 对象的 Execute 方法渲染模板","text_tokens":["数据处理","新建","传入","new","模板",",","数据","*","execute","实例","的","对象","处理","调用","parse"," ","方法","解析",".","template","strconv","返回","渲染"],"title":"模板流程","title_tokens":["流程","模板"]},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/","text":"03：进阶模板用法 在模板中定义变量 package main import ( \"fmt\" \"log\" \"net/http\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{$name := \"Alice\"}} {{$age := 18}} {{$round2 := true}} Name: {{$name}} Age: {{$age}} Round2: {{$round2}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } err = tmpl . Execute ( w , nil ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } 用美元符号 $ 作为前缀表示变 $name , $age 变量的定义/赋值必须使用 := 语法 直接通过 {{$VarName}} 调用 所有变量的操作都属于模板语法的一部分,需要用 {{}} 括起来 修改变量的值 ... tmpl , err := template . New ( \"test\" ). Parse ( ` {{$name := \"Alice\"}} {{$age := 18}} {{$round2 := true}} Name: {{$name}} Age: {{$age}} Round2: {{$round2}} {{$name = \"K\"}} Name: {{$name}} ` ) ... 类似赋值, 用 = 号直接修改变量值 在模板中使用条件判断(if) package main import ( \"fmt\" \"log\" \"net/http\" \"strconv\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{if .yIsZero}} 除数不能为0 {{else}} {{.result}} {{end}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } x , _ := strconv . ParseInt ( r . URL . Query (). Get ( \"x\" ), 10 , 64 ) y , _ := strconv . ParseInt ( r . URL . Query (). Get ( \"y\" ), 10 , 64 ) yIsZero := y == 0 result := 0.0 if ! yIsZero { result = float64 ( x ) / float64 ( y ) } err = tmpl . Execute ( w , map [ string ] interface {}{ \"yIsZero\" : yIsZero , \"result\" : result , }) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) } }) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } 用 {{}} 将 if 逻辑语句括起来, if 后面必须返回一个 bool 值 if 语句包括 {{if}} , {{else}} , {{end}} 等式和不等式 eq ：当等式 arg1 == arg2 成立时，返回 true，否则返回 false ne ：当不等式 arg1 != arg2 成立时，返回 true，否则返回 false lt ：当不等式 arg1 < arg2 成立时，返回 true，否则返回 false le ：当不等式 arg1 <= arg2 成立时，返回 true，否则返回 false gt ：当不等式 arg1 > arg2 成立时，返回 true，否则返回 false ge ：当不等式 arg1 >= arg2 成立时，返回 true，否则返回 false package main import ( \"fmt\" \"log\" \"net/http\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{$name1 := \"alice\"}} {{$name2 := \"bob\"}} {{$age1 := 18}} {{$age2 := 23}} {{if eq $age1 $age2}} 年龄相同 {{else}} 年龄不同 {{end}} {{if ne $name1 $name2}} 名字不相同 {{end}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } err = tmpl . Execute ( w , nil ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"Starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \"localhost:8000\" , nil )) } 迭代操作(range) Go 语言中一般来说有三种类型可以进行迭代操作，数组（Array）、切片（Slice）和 map 类型 package main import ( \"fmt\" \"log\" \"net/http\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{range $name := .Names}} {{$name}} {{end}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } err = tmpl . Execute ( w , map [ string ] interface {}{ \"Names\" : [] string { \"Alice\" , \"Bob\" , \"Carol\" , \"David\" , }, }) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"Starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \"localhost:8000\" , nil )) } 获得迭代元素的索引 ... func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // 创建模板对象并解析模板内容 tmpl , err := template . New ( \"test\" ). Parse ( ` {{range $i, $name := .Names}} {{$i}}. {{$name}} {{end}} ` ) ... map类型 ... func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // 创建模板对象并解析模板内容 tmpl , err := template . New ( \"test\" ). Parse ( ` {{range $name, $val := .}} {{$name}}: {{$val}} {{end}} ` ) ... // 调用模板对象的渲染方法 err = tmpl . Execute ( w , map [ string ] interface {}{ \"Names\" : [] string { \"Alice\" , \"Bob\" , \"Carol\" , \"David\" , }, \"Numbers\" : [] int { 1 , 3 , 5 , 7 }, }) ... } with tmpl , err := template . New ( \"test\" ). Parse ( `Inventory {{with .Inventory}} SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} {{end}} ` ) //****************************// err = tmpl . Execute ( w , map [ string ] interface {}{ \"Inventory\" : Inventory { // 类型 SKU : \"11000\" , Name : \"Phone\" , UnitPrice : 699.99 , Quantity : 666 , }, }) 1. 用 {{with}} 来替代相关实例\" Inventory \". 空白符号处理 {{- 表示剔除模板内容 左侧 的所有空白符号, -}} 表示剔除模板内容 右侧 的所有空白符号. ... func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // 创建模板对象并解析模板内容 tmpl , err := template . New ( \"test\" ). Parse ( `Inventory {{- with .Inventory}} SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} {{- end}} ` ) ...","text_tokens":["修改","用","相同","不同","$","fprintf","serve","*","return","execute","!","bob","phone","实例","的","变量值","true","{","成立","le","一般","起来","用法","x","可以","并","替代","inventory","text","调用","%","func","i","parse","v","方法","否则","666","解析","10","carol","获得","if","responsewriter","array","[","表示","else","parseint","float64","为","符号","gt","age1","lt","中","64","模板",",","`","除数","元素","一个","03","（","相关","数组","test","package","操作","进阶","listenandserve","_","main","varname","eq","美元","条件","query","err","类型",")","localhost","request","值","不能","变量","]","前缀","逻辑","range","都",".","val","age","interface","返回","23","http","后面","name1","部分","arg1","string","slice","索引","with","判断","内容","david","/","round2","使用","result","bool","false","切片","变","不等式","右侧","-","包括","括","一部分","yiszero","3","end","}","所有","作为","来说","一般来说","...","int","handlefunc","左侧","创建","号","0","ge","name2","quantity","server","fatal","剔除","将","、","）","需要","语言","import","unitprice","r","赋值","类似","直接","来","18","log",":","println","net","starting","0.0","年龄","定义","，","<","和","当","语句","new","get",">","7","进行","\"","11000","有","一部","arg2","k","时","ne","url","fmt","必须","tmpl","量值","语法","对象","不","通过","属于","处理","age2","：","alice","三种","不等","名字"," ","(","8000","sku","在","go","nil","699.99","name","template","等式","5","w","strconv","map","names","numbers","1","=","渲染","迭代","空白","y"],"title":"03：进阶模板用法","title_tokens":["进阶","模板","03","：","用法"]},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#03","text":"","text_tokens":[],"title":"03：进阶模板用法","title_tokens":["进阶","模板","03","：","用法"]},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#_1","text":"package main import ( \"fmt\" \"log\" \"net/http\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{$name := \"Alice\"}} {{$age := 18}} {{$round2 := true}} Name: {{$name}} Age: {{$age}} Round2: {{$round2}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } err = tmpl . Execute ( w , nil ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } 用美元符号 $ 作为前缀表示变 $name , $age 变量的定义/赋值必须使用 := 语法 直接通过 {{$VarName}} 调用 所有变量的操作都属于模板语法的一部分,需要用 {{}} 括起来","text_tokens":["用","$","fprintf","serve","*","return","execute","!","的","true","{","起来","text","调用","%","func","parse","v","if","responsewriter","表示","符号",",","`","模板","test","package","操作","listenandserve","main","varname","美元","err",")","request","变量","前缀","都",".","age","http","部分","/","round2","使用","变","括","一部分","}","所有","作为","...","handlefunc","fatal","需要","import","r","赋值","直接","18","log",":","println","net","starting","定义","new","\"","一部","fmt","必须","tmpl","语法","通过","属于","alice"," ","(","8000","nil","name","template","w","="],"title":"在模板中定义变量","title_tokens":["在","中","模板","变量","定义"]},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#_2","text":"... tmpl , err := template . New ( \"test\" ). Parse ( ` {{$name := \"Alice\"}} {{$age := 18}} {{$round2 := true}} Name: {{$name}} Age: {{$age}} Round2: {{$round2}} {{$name = \"K\"}} Name: {{$name}} ` ) ... 类似赋值, 用 = 号直接修改变量值","text_tokens":["修改","用","$",",","new","`","round2","\"","test","k","变量值","tmpl","{","}","true","量值","...","alice","号","err",")","parse"," ","(","变量",".","赋值","类似","直接","18","name","template","age",":","="],"title":"修改变量的值","title_tokens":["的","变量","值","修改"]},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#if","text":"package main import ( \"fmt\" \"log\" \"net/http\" \"strconv\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{if .yIsZero}} 除数不能为0 {{else}} {{.result}} {{end}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } x , _ := strconv . ParseInt ( r . URL . Query (). Get ( \"x\" ), 10 , 64 ) y , _ := strconv . ParseInt ( r . URL . Query (). Get ( \"y\" ), 10 , 64 ) yIsZero := y == 0 result := 0.0 if ! yIsZero { result = float64 ( x ) / float64 ( y ) } err = tmpl . Execute ( w , map [ string ] interface {}{ \"yIsZero\" : yIsZero , \"result\" : result , }) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) } }) log . Println ( \"starting HTTP serve...\" ) log . Fatal ( http . ListenAndServe ( \":8000\" , nil )) } 用 {{}} 将 if 逻辑语句括起来, if 后面必须返回一个 bool 值 if 语句包括 {{if}} , {{else}} , {{end}}","text_tokens":["用","fprintf","serve","*","return","execute","!","{","起来","x","text","%","func","parse","v","10","if","responsewriter","[","else","parseint","float64","为","64",",","`","除数","一个","test","package","listenandserve","_","main","query","err",")","request","值","不能","]","逻辑",".","interface","返回","http","后面","string","/","result","bool","包括","括","yiszero","end","}","...","handlefunc","0","fatal","将","import","r","starting","log",":","net","0.0","println","语句","new","get","\"","url","fmt","必须","tmpl"," ","(","8000","nil","template","w","strconv","map","=","y"],"title":"在模板中使用条件判断(if)","title_tokens":["条件","在","判断","if","中",")","使用","模板","("]},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#_3","text":"eq ：当等式 arg1 == arg2 成立时，返回 true，否则返回 false ne ：当不等式 arg1 != arg2 成立时，返回 true，否则返回 false lt ：当不等式 arg1 < arg2 成立时，返回 true，否则返回 false le ：当不等式 arg1 <= arg2 成立时，返回 true，否则返回 false gt ：当不等式 arg1 > arg2 成立时，返回 true，否则返回 false ge ：当不等式 arg1 >= arg2 成立时，返回 true，否则返回 false package main import ( \"fmt\" \"log\" \"net/http\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{$name1 := \"alice\"}} {{$name2 := \"bob\"}} {{$age1 := 18}} {{$age2 := 23}} {{if eq $age1 $age2}} 年龄相同 {{else}} 年龄不同 {{end}} {{if ne $name1 $name2}} 名字不相同 {{end}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } err = tmpl . Execute ( w , nil ) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"Starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \"localhost:8000\" , nil )) }","text_tokens":["相同","不同","$","fprintf","*","return","execute","!","bob","true","{","成立","le","text","%","func","parse","v","否则","if","responsewriter","else","age1","gt","lt",",","`","test","package","listenandserve","eq","main","err",")","localhost","request",".","返回","23","http","name1","arg1","/","false","不等式","end","}","...","handlefunc","ge","name2","server","fatal","import","r","18","log",":","println","net","starting","年龄","，","<","当","new",">","\"","arg2","时","ne","fmt","tmpl","不","age2","：","alice","不等","名字"," ","(","8000","nil","等式","template","w","="],"title":"等式和不等式","title_tokens":["不等式","和","等式","不等"]},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#range","text":"Go 语言中一般来说有三种类型可以进行迭代操作，数组（Array）、切片（Slice）和 map 类型 package main import ( \"fmt\" \"log\" \"net/http\" \"text/template\" ) func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { tmpl , err := template . New ( \"test\" ). Parse ( ` {{range $name := .Names}} {{$name}} {{end}} ` ) if err != nil { fmt . Fprintf ( w , \"Parse: %v\" , err ) return } err = tmpl . Execute ( w , map [ string ] interface {}{ \"Names\" : [] string { \"Alice\" , \"Bob\" , \"Carol\" , \"David\" , }, }) if err != nil { fmt . Fprintf ( w , \"Execute: %v\" , err ) return } }) log . Println ( \"Starting HTTP server...\" ) log . Fatal ( http . ListenAndServe ( \"localhost:8000\" , nil )) }","text_tokens":["$","fprintf","*","return","execute","!","bob","{","一般","可以","text","%","func","parse","v","carol","if","responsewriter","array","[","中",",","`","（","数组","test","package","操作","listenandserve","main","err","类型",")","localhost","request","range","]",".","interface","http","string","slice","david","/","切片","end","}","来说","一般来说","...","handlefunc","server","fatal","、","）","语言","import","r","log",":","println","net","starting","，","和","new","进行","\"","有","fmt","tmpl","alice","三种"," ","(","8000","go","nil","name","template","map","w","names","=","迭代"],"title":"迭代操作(range)","title_tokens":["操作",")","(","迭代","range"]},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#_4","text":"... func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // 创建模板对象并解析模板内容 tmpl , err := template . New ( \"test\" ). Parse ( ` {{range $i, $name := .Names}} {{$i}}. {{$name}} {{end}} ` ) ...","text_tokens":["=","内容","/","$",",","模板","new","`","\"","*","test","end","对象","tmpl","{","}","main","...","handlefunc","创建","并","err","i","func",")","parse"," ","request","(","range","解析","r",".","responsewriter","name","template","w",":","names","http"],"title":"获得迭代元素的索引","title_tokens":["索引","获得","的","元素","迭代"]},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#map","text":"... func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // 创建模板对象并解析模板内容 tmpl , err := template . New ( \"test\" ). Parse ( ` {{range $name, $val := .}} {{$name}}: {{$val}} {{end}} ` ) ... // 调用模板对象的渲染方法 err = tmpl . Execute ( w , map [ string ] interface {}{ \"Names\" : [] string { \"Alice\" , \"Bob\" , \"Carol\" , \"David\" , }, \"Numbers\" : [] int { 1 , 3 , 5 , 7 }, }) ... }","text_tokens":["string","=","内容","david","/","$",",","模板","new","`","7","\"","*","test","execute","bob","3","end","的","对象","tmpl","{","}","main","int","...","handlefunc","alice","创建","并","err","调用","func",")","parse"," ","request","(","方法","range","]","解析","carol","r",".","val","responsewriter","name","template","5","interface","w",":","map","[","names","numbers","http","渲染","1"],"title":"map类型","title_tokens":["map","类型"]},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#with","text":"tmpl , err := template . New ( \"test\" ). Parse ( `Inventory {{with .Inventory}} SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} {{end}} ` ) //****************************// err = tmpl . Execute ( w , map [ string ] interface {}{ \"Inventory\" : Inventory { // 类型 SKU : \"11000\" , Name : \"Phone\" , UnitPrice : 699.99 , Quantity : 666 , }, }) 1. 用 {{with}} 来替代相关实例\" Inventory \".","text_tokens":["string","with","用","/",",","new","`","\"","*","相关","11000","test","execute","phone","实例","end","tmpl","{","}","替代","err","inventory","quantity","类型",")","parse"," ","(","]","sku","666","unitprice",".","来","699.99","name","template","interface",":","w","map","[","1","="],"title":"with","title_tokens":["with"]},{"location":"Golang/Go-Web/03 AdvanceTemplateUsage/#_5","text":"{{- 表示剔除模板内容 左侧 的所有空白符号, -}} 表示剔除模板内容 右侧 的所有空白符号. ... func main () { http . HandleFunc ( \"/\" , func ( w http . ResponseWriter , r * http . Request ) { // 创建模板对象并解析模板内容 tmpl , err := template . New ( \"test\" ). Parse ( `Inventory {{- with .Inventory}} SKU: {{.SKU}} Name: {{.Name}} UnitPrice: {{.UnitPrice}} Quantity: {{.Quantity}} {{- end}} ` ) ...","text_tokens":["符号","=","with","内容","/","模板",",","new","`","\"","*","test","右侧","-","end","的","对象","tmpl","{","}","所有","main","...","handlefunc","左侧","创建","并","err","inventory","quantity","剔除","func",")","parse"," ","request","(","sku","解析","unitprice","r",".","responsewriter","name","template","w",":","空白","http","表示"],"title":"空白符号处理","title_tokens":["符号","处理","空白"]},{"location":"Golang/Project/gee/05 HTMLTemplate/","text":"实现静态资源服务（Static Resource） 支持HTML模板渲染 后端专注数据生成，RESTful接口返回结构化数值；前端专注界面设计实现，只需要考虑拿到数据后如何渲染的问题，前后端解耦。 todo: 通过 filepath 的相对地址映射到 /usr/web 目录下的真实地址，将真实地址交给 net/http 的 http.FileServer 处理","text_tokens":["问题","考虑","真实","，","端","静态","/","模板","相对","数据","restful","数值","（","后","到","实现","usr","服务","resource","界面设计","fileserver","接口","的","filepath","通过","交给","处理","端解","http","web","下","生成","结构化","设计","将","）"," ","专注","结构","耦","需要","资源","支持","只","static",".","前端","界面","如何","地址","todo","拿到","前后",":","目录","返回","html","映射","地址映射","渲染","net","；","。"],"title":"05 HTMLTemplate","title_tokens":["htmltemplate"," ","05"]},{"location":"Golang/Project/go-gin-example/01 Config/","text":"go-gin-example 01：配置 Golang 环境安装配置 下载 配置环境变量 文件配置 $ mkdir go-gin-example && cd go-gin-example $ go env -w GO111MODULE = on $ go env -w GOPROXY = https://goproxy.cn,direct $ go mod init [ MODULE_PATH ] $ ls > go.mod mkdir go-gin-example && cd go-gin-example ：创建并切换到项目目录。 go env -w GO111MUDOLE=on ：打开Go module 开关。 go env -w GOPROXY=... ：设置GOPROXY代理，第一个为七牛Go代理， direct 为Go在拉取模块遇到错误会回源到原模块版本的源地址去抓取。 go mod init [Module_Path] ：初始化Go module，产生go.mod文件 module go-gin-example go 1 .12 GOMODULE基础使用 go get ：拉取新的依赖 拉取最新的版本： go get golang/org/x/text@lastest 拉取 master 分支的最新commit： go get golang.org/x/text@master go tidy ：整理依","text_tokens":["&&","初始","整理","$","设置","goproxy","源地","的","环境","原","x","并","拉取","text","ls","开关","去","[","example","。","为","mkdir",",","一个","到","遇到","回源","golang","第一个","path","基础","_","tidy","下载","master","分支","安装","]","变量","源地址","抓取","最新",".","module","目录","org","go111module","12","/","direct","使用","-","gomodule","会","环境变量","...","创建","新","init","on","切换","配置",":","第一","为七牛","cd","lastest","，","项目","get",">","错误","产生","环境变","版本","依","go111mudole","cn","01","env","依赖","：","代理","https","模块","commit"," ","在","go","初始化","gin","地址","w","@","1","=","打开","文件","mod"],"title":"go-gin-example 01：配置","title_tokens":["-","go","配置","gin","01"," ","example","："]},{"location":"Golang/Project/go-gin-example/01 Config/#go-gin-example-01","text":"","text_tokens":[],"title":"go-gin-example 01：配置","title_tokens":["-","go","配置","gin","01"," ","example","："]},{"location":"Golang/Project/go-gin-example/01 Config/#golang","text":"","text_tokens":[],"title":"Golang 环境安装配置","title_tokens":["golang","配置","环境"," ","安装"]},{"location":"Golang/Project/go-gin-example/01 Config/#_1","text":"","text_tokens":[],"title":"下载","title_tokens":["下载"]},{"location":"Golang/Project/go-gin-example/01 Config/#_2","text":"","text_tokens":[],"title":"配置环境变量","title_tokens":["配置","环境变量","环境","环境变","变量"]},{"location":"Golang/Project/go-gin-example/01 Config/#_3","text":"$ mkdir go-gin-example && cd go-gin-example $ go env -w GO111MODULE = on $ go env -w GOPROXY = https://goproxy.cn,direct $ go mod init [ MODULE_PATH ] $ ls > go.mod mkdir go-gin-example && cd go-gin-example ：创建并切换到项目目录。 go env -w GO111MUDOLE=on ：打开Go module 开关。 go env -w GOPROXY=... ：设置GOPROXY代理，第一个为七牛Go代理， direct 为Go在拉取模块遇到错误会回源到原模块版本的源地址去抓取。 go mod init [Module_Path] ：初始化Go module，产生go.mod文件 module go-gin-example go 1 .12","text_tokens":["为","&&","，","项目","12","mkdir","初始","。","/","$",",","direct",">","错误","一个","产生","版本","设置","到","遇到","go111mudole","-","goproxy","回源","源地","cn","第一个","会","path","的","_","env","...","：","代理","创建","原","并","拉取","https","ls","模块","开关"," ","文件","init","]","源地址","抓取","on",".","module","为七牛","go","切换","在","去","初始化","gin","目录","地址","w",":","[","example","=","1","第一","打开","go111module","cd","mod"],"title":"文件配置","title_tokens":["配置","文件"]},{"location":"Golang/Project/go-gin-example/01 Config/#gomodule","text":"go get ：拉取新的依赖 拉取最新的版本： go get golang/org/x/text@lastest 拉取 master 分支的最新commit： go get golang.org/x/text@master go tidy ：整理依","text_tokens":["整理","/","get","版本","依","golang","的","依赖","tidy","：","x","新","master","拉取","text","分支","commit"," ","最新",".","go","@","org","lastest"],"title":"GOMODULE基础使用","title_tokens":["使用","基础","gomodule"]},{"location":"Golang/Project/go-gin-example/02 API-1/","text":"go-gin-example 02：API-1 初始设置 项目目录 go-gin-example/ ├─conf ├─middleware ├─models ├─pkg ├─routers └─runtime conf：用于存储配置文件 middleware：应用中间件 models：应用数据库模型 pkg：第三方包 routers：路由逻辑处理 runtime：应用运行时数据 添加Go Modules Replace配置本地模块路径 （好像不必要） module go - gin - example go 1.12 require ( ··· ) replace ( . / go - gin - example / conf => . / go - gin - example / pkg / conf . / go - gin - example / middleware => . / go - gin - example / middleware . / go - gin - example / models => . / go - gin - example / models . / go - gin - example / pkg / e => . / go - gin - example / pkg / e . / go - gin - example / pkg / setting => . / go - gin - example / pkg / setting . / go - gin - example / pkg / util => . / go - gin - example / pkg / util . / go - gin - example / routers => . / go - gin - example / routers ) # 用 replace 将其指定读取本地的模块路径 ， 这样子就可以解决本地模块读取的问题 使用ini配置文件库/编写项目配置包 应用配置文件 将公共配置部分提取出来，写成专门的配置文件，统一写数据库环境、服务器环境等。 在 ./conf 目录下新建 app.ini 文件 定义RUN_MODE 定义数据库端口、账号、表格等 定义公共参数：分页 定义服务器端口、TIMEOUT时间等 # debug or release RUN_MODE = debug [app] PAGE_SIZE = 10 JWT_SECRET = 23347$040412 [server] HTTP_PORT = 8000 READ_TIMEOUT = 60 WRITE_TIMEOUT = 60 [database] TYPE = mysql USER = root # 数据库账号 PASSWORD = root # 数据库密码 HOST = 127.0.0.1:3306 # 数据库IP:数据库端口号 NAME = blog TABLE_PREFIX = blog_ 调用配置的setting模块 负责调用app.ini go get -u github.com/go-ini/ini 在 ./pkg/setting 目录下新建 setting.go 文件 package setting import ( \"log\" \"time\" \"github.com/go-ini/ini\" ) var ( Cfg * ini . File // Cfg为ini文件类型 // 声明app.ini文件写好的各种配置的类型 RunMode string HTTPPort int ReadTimeout time . Duration WriteTimeout time . Duration PageSize int JwtSecret string ) func init () { var err error // 加载初始化文件 Cfg , err = ini . Load ( \"conf/app.ini\" ) if err != nil { log . Fatalf ( \"Fail to parse 'conf/app.ini`: %v\" , err ) } LoadBase () LoadServer () LoadApp () } // 加载基础设置 func LoadBase () { // 设置RUN_MODE为'debug' RunMode = Cfg . Section ( \"\" ). Key ( \"RUN_MODE\" ). MustString ( \"debug\" ) } // LoadServer 加载服务器配置 func LoadServer () { // 获取'server'的section信息 // 这里的section包含'server'的各种信息, 由./config/app,ini配置文件提供 sec , err := Cfg . GetSection ( \"server\" ) if err != nil { log . Fatalf ( \"Fail to get section 'server':%v\" , err ) } RunMode = Cfg . Section ( \"\" ). Key ( \"RUN_MODE\" ). MustString ( \"debug\" ) // 自动类型转换 HTTPPort = sec . Key ( \"HTTP_PORT\" ). MustInt ( 8000 ) ReadTimeout = time . Duration ( sec . Key ( \"READ_TIMEOUT\" ). MustInt ( 60 )) * time . Second WriteTimeout = time . Duration ( sec . Key ( \"WRITE_TIMEOUT\" ). MustInt ( 60 )) * time . Second } // LoadApp 加载APP配置 func LoadApp () { // 获取./config/app.ini配置文件的APP配置 sec , err := Cfg . GetSection ( \"app\" ) if err != nil { log . Fatalf ( \"Fail to get section 'app':%v\" , err ) } JwtSecret = sec . Key ( \"JWT_SECRET\" ). MustString ( \"!@)*#)!@U#@*!@!)\" ) PageSize = sec . Key ( \"PAGE_SIZE\" ). MustInt ( 10 ) } API错误码包 建立错误码e模块 在 ./pkg/e 目录下新建 code.go 和 msg.go 文件 code.go package e // API错误代码 const ( SUCCESS = 200 ERROR = 500 INVALID_PARAMS = 400 ERROR_EXIST_TAG = 10001 ERROR_NOT_EXIST_TAG = 10002 ERROR_NOT_EXIST_ARTICLE = 10003 ERROR_AUTH_CHECK_TOKEN_FAIL = 20001 ERROR_AUTH_CHECK_TOKEN_TIMEOUT = 20002 ERROR_AUTH_TOKEN = 20003 ERROR_AUTH = 20004 ) msg.go package e //msg.go // MsgFlags 错误信息 var MsgFlags = map [ int ] string { SUCCESS : \"ok\" , ERROR : \"fail\" , INVALID_PARAMS : \"请求参数错误\" , ERROR_EXIST_TAG : \"已存在该标签名称\" , ERROR_NOT_EXIST_TAG : \"该标签不存在\" , ERROR_NOT_EXIST_ARTICLE : \"该文章不存在\" , ERROR_AUTH_CHECK_TOKEN_FAIL : \"Token鉴权失败\" , ERROR_AUTH_CHECK_TOKEN_TIMEOUT : \"Token鉴权超时\" , ERROR_AUTH_TOKEN : \"Token生成失败\" , ERROR_AUTH : \"Token错误\" , } // GetMsg 获取错误信息 func GetMsg ( code int ) string { msg , ok := MsgFlags [ code ] if ok { return msg } return MsgFlags [ ERROR ] } 工具包 公共方法：例如获取分页页码等 go get -u github.com/unknwon/com 在 ./pkg/util 目录下新建 pagination.go 文件 package util import ( setting \"go-gin-example/pkg/settings\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetPage 获取page数量 func GetPage ( c * gin . Context ) int { result := 0 // page转换为int page , _ := com . StrTo ( c . Query ( \"page\" )). Int () if page > 0 { result = ( page - 1 ) * setting . PageSize } return result } 数据库模型映射 通过gorm将golang结构体映射到数据库中自动生成模型 go get -u github.com/jinzhu/gorm go get -u github.com/go-sql-driver/mysql 在 ./models 目录下新建 models.go 文件。 package models import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"log\" \"github.com/jinzhu/gorm\" ) var db * gorm . DB // Model 数据库模型 type Model struct { ID int `gorm:\"primary_key\" json:id` CreatedOn int `json:\"created_on\"` ModifiedOn int `json:\"modified_on\"` } func init () { var ( err error dbType , dbName , user , password , host , tablePrefix string ) // 获取配置文件的数据库配置 sec , err := setting . Cfg . GetSection ( \"database\" ) if err != nil { log . Fatal ( 2 , \"Fail to get get scetion `database`:%v\" , err ) } dbType = sec . Key ( \"TYPE\" ). String () dbName = sec . Key ( \"NAME\" ). String () user = sec . Key ( \"USER\" ). String () password = sec . Key ( \"PASSWORD\" ). String () host = sec . Key ( \"HOST\" ). String () tablePrefix = sec . Key ( \"TABLE_PREFIX\" ). String () db , err = gorm . Open ( dbtype , fmt . Sprintf ( \"%s:%s@tcp(%s)/%s?charset=utf8&parseTime=True&loc=Local\" , user , password , dbName )) if err != nil { log . Println ( err ) } gorm . DefaultTableNameHandler = func ( db * gorm . DB , defaultTableName string ) string { return tablePrefix + defaultTableName } db . SingularTable ( true ) db . LogMode ( true ) db . DB (). SetMaxIdleConns ( 10 ) db . DB (). SetMaxOpenConns ( 100 ) } // CloseDB 关闭数据库连接 func CloseDB () { defer db . Close () } Demo 实例程序 在 ./ 目录下新建 main.go 文件 package main import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"net/http\" \"github.com/gin-gonic/gin\" ) func main () { router := gin . Default () router . GET ( \"/test\" , func ( c * gin . Context ) { c . JSON ( 200 , gin . H { \"message\" : \"test\" , }) }) s := & http . Server { Addr : fmt . Sprintf ( \":%d\" , setting . HTTPPort ), Handler : router , ReadTimeout : setting . ReadTimeout , WriteTimeout : setting . WriteTimeout , MaxHeaderBytes : 1 << 20 , } // 调用在&http.Server中设置的参数,因此上面要用&,要改变参数的值 s . ListenAndServe () } 浏览器输入 localhost：8000/test 返回 {\"message\":\"test\"} 则成功 从main.go中分离路由 在 ./routers 目录下新建 router.go 文件 package routers import ( setting \"go-gin-example/pkg/settings\" \"github.com/gin-gonic/gin\" ) func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) r . GET ( \"/test\" , func ( c * gin . Context ) { c . JSON ( 200 , gin . H { \"message\" : \"test\" , }) }) return r } 修改 main.go 文件 package main import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/routers\" \"net/http\" ) func main () { router := routers . InitRouter () s := & http . Server { Addr : fmt . Sprintf ( \":%d\" , setting . HTTPPort ), Handler : router , ReadTimeout : setting . ReadTimeout , WriteTimeout : setting . WriteTimeout , MaxHeaderBytes : 1 << 20 , } s . ListenAndServer () } 当前目录结构 go-gin-example/ ├── conf │ └── app.ini ├── main.go ├── middleware ├── models │ └── models.go ├── pkg │ ├── e │ │ ├── code.go │ │ └── msg.go │ ├── setting │ │ └── setting.go │ └── util │ └── pagination.go ├── routers │ └── router.go ├── runtime","text_tokens":["com","初始","timeout","$","&","040412","strto","return","100","服务","分离","id","·","loadbase","可以","调用","结构","输入","listenandserver","模型","用于","三方","example","code","?","singulartable","use","utf8","因此","信息","logmode","`","存在","2","加载","包","_","root","key","200","message","modules","据库","tableprefix","loc","middleware","中间","string","router","文件类型","/","s","#","}","int","│","scetion","modified","包含","运行","write","getsection","页码","maxheaderbytes","必要","获取","400","配置","runtime","log","loadapp","写","struct","util","，","和","体","误码","fmt","要用","local","：","e","mysql","请求","生成","httpport","由","模块","loadserver","(","defaulttablename","8000","不必要","params","dbname","nil","name","var","提取","各种","10001","table","primary","driver","设置","程序","!","gorm","务器","的","文章","上面","readtimeout","环境","当前","+","工具","方法","prefix","10","auth","sprintf","。","muststring","pagination",",","jinzhu","例如","writetimeout","（","test","golang","config","or","浏览器","main","require","pagesize","setmode","不必",")","值","]","article","就","tag","目录","second","转换","10002","应用","则","jwt","服务器端","blog","解决","端口号","声明","-","数量","ini","db","本地","addr","c","server","fatal","section","存储","）","关闭","init","'","token",":","println","handler","工具包","统一","logger","time","误信","new","数据","close","第三方","demo","20002","check","20001","不","parsetime","unknwon","d","mode","createdon","改变","这里","─","go","当前目录","gin","secret","提供","文件","数据库","错误码","用","好像","not","密码","model","true","02","配置文件","setting","ip","pkg","500","func","服务器","写成","modifiedon","type","端口","10003","[","映射","自动","中间件","file","host","为","中","sql","replace","msg","package","基础","listenandserve","jwtsecret","fail","query","err","成功","localhost","专门","添加","公共","路径","返回","http","cfg","部分","连接","recovery","新建","size","github","从","时间","app","tcp","routers","getpage","h","建立","读取","、","conf","engine","口","release","import","on","dbtype","json","已","项目","default","<","20",">","错误","标签","\"","该","账号","这","通过","其","models","23347","const","mustint"," ","指定","路由","getmsg","在","map","0","=","修改","ok","debug","分页","*","msgflags","success","实例","charset","created","{","1.12","├","fatalf","gonic","代码","defaulttablenamehandler","负责","浏览","%","parse","20003","v","open","出来","read","if","runmode","run","initrouter","口号","失败","到","closedb","超时","库","存储配置","database","类型","exist","duration","逻辑","setmaxopenconns","module",".","60","鉴权","要","编写","sec","问题","password","类型转换","使用","result","page","样子","3306","api","context","将","20004","r","error","net","定义","invalid","0.1","user","to","get","127.0","u","setmaxidleconns","时","错误代码","port","等","处理","load","settings","名称","下","表格","错误信息","好","初始化","参数","第三","@","1","defer","└"],"title":"go-gin-example 02：API-1","title_tokens":["-","go","gin","02"," ","example","1","：","api"]},{"location":"Golang/Project/go-gin-example/02 API-1/#go-gin-example-02api-1","text":"初始设置","text_tokens":["初始","设置"],"title":"go-gin-example 02：API-1","title_tokens":["-","go","gin","02"," ","example","1","：","api"]},{"location":"Golang/Project/go-gin-example/02 API-1/#_1","text":"go-gin-example/ ├─conf ├─middleware ├─models ├─pkg ├─routers └─runtime conf：用于存储配置文件 middleware：应用中间件 models：应用数据库模型 pkg：第三方包 routers：路由逻辑处理 runtime：应用运行时数据","text_tokens":["应用","中间","数据库","/","数据","第三方","-","时","包","处理","├","models","：","pkg","routers","存储配置","运行","存储"," ","文件","模型","用于","中间件","conf","逻辑","路由","─","go","配置","据库","gin","第三","runtime","三方","example","└","middleware"],"title":"项目目录","title_tokens":["项目","目录"]},{"location":"Golang/Project/go-gin-example/02 API-1/#go-modules-replace","text":"module go - gin - example go 1.12 require ( ··· ) replace ( . / go - gin - example / conf => . / go - gin - example / pkg / conf . / go - gin - example / middleware => . / go - gin - example / middleware . / go - gin - example / models => . / go - gin - example / models . / go - gin - example / pkg / e => . / go - gin - example / pkg / e . / go - gin - example / pkg / setting => . / go - gin - example / pkg / setting . / go - gin - example / pkg / util => . / go - gin - example / pkg / util . / go - gin - example / routers => . / go - gin - example / routers ) # 用 replace 将其指定读取本地的模块路径 ， 这样子就可以解决本地模块读取的问题","text_tokens":["问题","util","，","用","解决","replace","/",">","-","#","样子","的","这","·","setting","1.12","其","本地","models","e","require","pkg","routers","可以",")","模块","将","读取"," ","(","conf","指定","路径","module",".","就","go","gin","example","=","middleware"],"title":"添加Go Modules Replace配置本地模块路径 （好像不必要）","title_tokens":["必要","路径","go","好像","modules","配置","不必","模块","replace","本地","）"," ","（","添加","不必要"]},{"location":"Golang/Project/go-gin-example/02 API-1/#ini","text":"","text_tokens":[],"title":"使用ini配置文件库/编写项目配置包","title_tokens":["库","项目","配置","ini","包","使用","配置文件","/","编写","文件"]},{"location":"Golang/Project/go-gin-example/02 API-1/#_2","text":"将公共配置部分提取出来，写成专门的配置文件，统一写数据库环境、服务器环境等。 在 ./conf 目录下新建 app.ini 文件 定义RUN_MODE 定义数据库端口、账号、表格等 定义公共参数：分页 定义服务器端口、TIMEOUT时间等 # debug or release RUN_MODE = debug [app] PAGE_SIZE = 10 JWT_SECRET = 23347$040412 [server] HTTP_PORT = 8000 READ_TIMEOUT = 60 WRITE_TIMEOUT = 60 [database] TYPE = mysql USER = root # 数据库账号 PASSWORD = root # 数据库密码 HOST = 127.0.0.1:3306 # 数据库IP:数据库端口号 NAME = blog TABLE_PREFIX = blog_","text_tokens":["数据库","timeout","table","$","040412","debug","分页","服务","密码","务器","的","配置文件","环境","ip","服务器","写成","prefix","出来","10","read","type","端口","run","[","。","host","口号","or","_","root","database","专门","]","公共",".","60","据库","目录","http","部分","password","jwt","新建","服务器端","blog","端口号","/","size","page","时间","#","ini","3306","app","server","write","将","、","conf","口","release","配置",":","写","统一","定义","0.1","，","user","数据","127.0","port","账号","等","：","mysql","23347","下","表格","mode"," ","8000","在","参数","name","secret","提取","=","文件"],"title":"应用配置文件","title_tokens":["应用","配置文件","配置","文件"]},{"location":"Golang/Project/go-gin-example/02 API-1/#setting","text":"负责调用app.ini go get -u github.com/go-ini/ini 在 ./pkg/setting 目录下新建 setting.go 文件 package setting import ( \"log\" \"time\" \"github.com/go-ini/ini\" ) var ( Cfg * ini . File // Cfg为ini文件类型 // 声明app.ini文件写好的各种配置的类型 RunMode string HTTPPort int ReadTimeout time . Duration WriteTimeout time . Duration PageSize int JwtSecret string ) func init () { var err error // 加载初始化文件 Cfg , err = ini . Load ( \"conf/app.ini\" ) if err != nil { log . Fatalf ( \"Fail to parse 'conf/app.ini`: %v\" , err ) } LoadBase () LoadServer () LoadApp () } // 加载基础设置 func LoadBase () { // 设置RUN_MODE为'debug' RunMode = Cfg . Section ( \"\" ). Key ( \"RUN_MODE\" ). MustString ( \"debug\" ) } // LoadServer 加载服务器配置 func LoadServer () { // 获取'server'的section信息 // 这里的section包含'server'的各种信息, 由./config/app,ini配置文件提供 sec , err := Cfg . GetSection ( \"server\" ) if err != nil { log . Fatalf ( \"Fail to get section 'server':%v\" , err ) } RunMode = Cfg . Section ( \"\" ). Key ( \"RUN_MODE\" ). MustString ( \"debug\" ) // 自动类型转换 HTTPPort = sec . Key ( \"HTTP_PORT\" ). MustInt ( 8000 ) ReadTimeout = time . Duration ( sec . Key ( \"READ_TIMEOUT\" ). MustInt ( 60 )) * time . Second WriteTimeout = time . Duration ( sec . Key ( \"WRITE_TIMEOUT\" ). MustInt ( 60 )) * time . Second } // LoadApp 加载APP配置 func LoadApp () { // 获取./config/app.ini配置文件的APP配置 sec , err := Cfg . GetSection ( \"app\" ) if err != nil { log . Fatalf ( \"Fail to get section 'app':%v\" , err ) } JwtSecret = sec . Key ( \"JWT_SECRET\" ). MustString ( \"!@)*#)!@U#@*!@!)\" ) PageSize = sec . Key ( \"PAGE_SIZE\" ). MustInt ( 10 ) }","text_tokens":["com","初始","timeout","debug","*","设置","!","服务","务器","的","{","配置文件","setting","readtimeout","fatalf","loadbase","负责","pkg","调用","%","func","服务器","parse","v","10","read","if","runmode","run","自动","file","为","muststring","信息",",","`","writetimeout","package","加载","基础","config","jwtsecret","_","pagesize","fail","err","类型","key",")","duration",".","60","目录","second","http","转换","cfg","sec","string","jwt","新建","文件类型","声明","类型转换","/","size","page","github","-","#","ini","}","app","int","包含","server","write","getsection","section","init","conf","获取","import","'","error","配置","log",":","写","loadapp","time","to","get","\"","u","port","load","下","mustint","mode","httpport","由","loadserver"," ","(","好","8000","这里","在","go","初始化","nil","var","secret","提供","@","各种","=","文件"],"title":"调用配置的setting模块","title_tokens":["的","配置","调用","模块","setting"]},{"location":"Golang/Project/go-gin-example/02 API-1/#api","text":"建立错误码e模块 在 ./pkg/e 目录下新建 code.go 和 msg.go 文件 code.go package e // API错误代码 const ( SUCCESS = 200 ERROR = 500 INVALID_PARAMS = 400 ERROR_EXIST_TAG = 10001 ERROR_NOT_EXIST_TAG = 10002 ERROR_NOT_EXIST_ARTICLE = 10003 ERROR_AUTH_CHECK_TOKEN_FAIL = 20001 ERROR_AUTH_CHECK_TOKEN_TIMEOUT = 20002 ERROR_AUTH_TOKEN = 20003 ERROR_AUTH = 20004 ) msg.go package e //msg.go // MsgFlags 错误信息 var MsgFlags = map [ int ] string { SUCCESS : \"ok\" , ERROR : \"fail\" , INVALID_PARAMS : \"请求参数错误\" , ERROR_EXIST_TAG : \"已存在该标签名称\" , ERROR_NOT_EXIST_TAG : \"该标签不存在\" , ERROR_NOT_EXIST_ARTICLE : \"该文章不存在\" , ERROR_AUTH_CHECK_TOKEN_FAIL : \"Token鉴权失败\" , ERROR_AUTH_CHECK_TOKEN_TIMEOUT : \"Token鉴权超时\" , ERROR_AUTH_TOKEN : \"Token生成失败\" , ERROR_AUTH : \"Token错误\" , } // GetMsg 获取错误信息 func GetMsg ( code int ) string { msg , ok := MsgFlags [ code ] if ok { return msg } return MsgFlags [ ERROR ] }","text_tokens":["10001","错误码","timeout","ok","return","msgflags","success","not","文章","{","代码","pkg","500","func","20003","if","10003","auth","[","code","信息","失败",",","msg","存在","package","超时","_","fail",")","exist","200","]","article",".","tag","鉴权","目录","10002","string","新建","/","}","int","api","建立","20004","获取","400","error","token",":","已","invalid","误信","和","错误","标签","\"","误码","该","错误代码","20002","check","20001","不","e","名称","const","请求","下","错误信息","生成","模块"," ","(","params","getmsg","在","go","参数","var","map","=","文件"],"title":"API错误码包","title_tokens":["错误码","包","错误","api","误码"]},{"location":"Golang/Project/go-gin-example/02 API-1/#_3","text":"公共方法：例如获取分页页码等 go get -u github.com/unknwon/com 在 ./pkg/util 目录下新建 pagination.go 文件 package util import ( setting \"go-gin-example/pkg/settings\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetPage 获取page数量 func GetPage ( c * gin . Context ) int { result := 0 // page转换为int page , _ := com . StrTo ( c . Query ( \"page\" )). Int () if page > 0 { result = ( page - 1 ) * setting . PageSize } return result }","text_tokens":["com","util","为","新建","pagination","/","result","get",",",">","例如","page","strto","github","分页","\"","u","*","return","-","package","数量","{","}","等","setting","_","unknwon","int","settings","gonic","：","c","pagesize","pkg","下","0","context","query","页码",")","getpage","func"," ","(","方法","公共","获取","import",".","在","go","if","gin","目录",":","example","=","转换","1","文件"],"title":"工具包","title_tokens":["工具","工具包"]},{"location":"Golang/Project/go-gin-example/02 API-1/#_4","text":"通过gorm将golang结构体映射到数据库中自动生成模型 go get -u github.com/jinzhu/gorm go get -u github.com/go-sql-driver/mysql 在 ./models 目录下新建 models.go 文件。 package models import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"log\" \"github.com/jinzhu/gorm\" ) var db * gorm . DB // Model 数据库模型 type Model struct { ID int `gorm:\"primary_key\" json:id` CreatedOn int `json:\"created_on\"` ModifiedOn int `json:\"modified_on\"` } func init () { var ( err error dbType , dbName , user , password , host , tablePrefix string ) // 获取配置文件的数据库配置 sec , err := setting . Cfg . GetSection ( \"database\" ) if err != nil { log . Fatal ( 2 , \"Fail to get get scetion `database`:%v\" , err ) } dbType = sec . Key ( \"TYPE\" ). String () dbName = sec . Key ( \"NAME\" ). String () user = sec . Key ( \"USER\" ). String () password = sec . Key ( \"PASSWORD\" ). String () host = sec . Key ( \"HOST\" ). String () tablePrefix = sec . Key ( \"TABLE_PREFIX\" ). String () db , err = gorm . Open ( dbtype , fmt . Sprintf ( \"%s:%s@tcp(%s)/%s?charset=utf8&parseTime=True&loc=Local\" , user , password , dbName )) if err != nil { log . Println ( err ) } gorm . DefaultTableNameHandler = func ( db * gorm . DB , defaultTableName string ) string { return tablePrefix + defaultTableName } db . SingularTable ( true ) db . LogMode ( true ) db . DB (). SetMaxIdleConns ( 10 ) db . DB (). SetMaxOpenConns ( 100 ) } // CloseDB 关闭数据库连接 func CloseDB () { defer db . Close () }","text_tokens":["数据库","com","table","primary","&","*","driver","return","!","100","gorm","charset","的","model","created","{","true","配置文件","id","setting","defaulttablenamehandler","pkg","+","%","func","结构","v","模型","open","prefix","modifiedon","10","if","type","sprintf","映射","example","?","自动","singulartable","。","host","utf8","logmode","中","sql",",","`","jinzhu","到","package","2","golang","closedb","_","fail","err","database","key",")","setmaxopenconns",".","据库","目录","tableprefix","loc","cfg","sec","连接","string","password","新建","/","s","github","-","}","db","int","tcp","scetion","modified","fatal","getsection","将","关闭","init","获取","import","on","dbtype","json","error","配置","struct","log",":","println","体","user","to","get","数据","close","\"","u","setmaxidleconns","fmt","通过","parsetime","local","settings","models","mysql","下","生成","createdon"," ","(","defaulttablename","dbname","在","go","nil","var","gin","name","@","=","defer","文件"],"title":"数据库模型映射","title_tokens":["数据库","据库","映射","数据","模型"]},{"location":"Golang/Project/go-gin-example/02 API-1/#demo","text":"实例程序 在 ./ 目录下新建 main.go 文件 package main import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"net/http\" \"github.com/gin-gonic/gin\" ) func main () { router := gin . Default () router . GET ( \"/test\" , func ( c * gin . Context ) { c . JSON ( 200 , gin . H { \"message\" : \"test\" , }) }) s := & http . Server { Addr : fmt . Sprintf ( \":%d\" , setting . HTTPPort ), Handler : router , ReadTimeout : setting . ReadTimeout , WriteTimeout : setting . WriteTimeout , MaxHeaderBytes : 1 << 20 , } // 调用在&http.Server中设置的参数,因此上面要用&,要改变参数的值 s . ListenAndServe () } 浏览器输入 localhost：8000/test 返回 {\"message\":\"test\"} 则成功","text_tokens":["com","&","*","设置","程序","实例","上面","的","{","setting","readtimeout","gonic","pkg","浏览","调用","%","func","输入","sprintf","example","因此","中",",","writetimeout","test","package","listenandserve","浏览器","main","成功",")","localhost","值","200",".","message","要","目录","返回","http","则","router","新建","/","s","github","-","}","addr","c","context","server","h","maxheaderbytes","import","json",":","handler","net","default","<","20","get","\"","fmt","要用","settings","：","d","下","httpport"," ","(","8000","改变","在","go","参数","gin","1","=","文件"],"title":"Demo","title_tokens":["demo"]},{"location":"Golang/Project/go-gin-example/02 API-1/#maingo","text":"在 ./routers 目录下新建 router.go 文件 package routers import ( setting \"go-gin-example/pkg/settings\" \"github.com/gin-gonic/gin\" ) func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) r . GET ( \"/test\" , func ( c * gin . Context ) { c . JSON ( 200 , gin . H { \"message\" : \"test\" , }) }) return r } 修改 main.go 文件 package main import ( \"fmt\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/routers\" \"net/http\" ) func main () { router := routers . InitRouter () s := & http . Server { Addr : fmt . Sprintf ( \":%d\" , setting . HTTPPort ), Handler : router , ReadTimeout : setting . ReadTimeout , WriteTimeout : setting . WriteTimeout , MaxHeaderBytes : 1 << 20 , } s . ListenAndServer () }","text_tokens":["router","com","initrouter","recovery","新建","修改","<","20","/","s","new","get",",","&","writetimeout","\"","github","*","return","test","-","package","fmt","{","}","setting","main","addr","settings","readtimeout","gonic","http","c","d","setmode","routers","下","pkg","context","server","httpport","%",")","func","h"," ","maxheaderbytes","(","listenandserver","200","engine","import","r",".","在","go","json","message","gin","目录","runmode",":","sprintf","handler","net","example","=","1","logger","文件","use"],"title":"从main.go中分离路由","title_tokens":["路由",".","go","中","分离","main","从"]},{"location":"Golang/Project/go-gin-example/02 API-1/#_5","text":"go-gin-example/ ├── conf │ └── app.ini ├── main.go ├── middleware ├── models │ └── models.go ├── pkg │ ├── e │ │ ├── code.go │ │ └── msg.go │ ├── setting │ │ └── setting.go │ └── util │ └── pagination.go ├── routers │ └── router.go ├── runtime","text_tokens":["router","util","pagination","/","msg","-","ini","setting","main","app","├","models","│","e","pkg","routers"," ","conf","─",".","go","gin","runtime","example","code","└","middleware"],"title":"当前目录结构","title_tokens":["当前","结构","当前目录","目录"]},{"location":"Golang/Project/go-gin-example/03 API-2/","text":"go-gin-example 03：API-2 完成博客的标签类接口定义和编写 定义接口 定义文章标签的路由分发操作 获取标签列表：GET(“/tags”) 新建标签：POST(“/tags”) 更新指定标签：PUT(“/tags/:id”) 删除指定标签：DELETE(“/tags/:id”) 空壳路由 注册路由将请求分发到该路由中，由该API路由中函数处理 在./routers/api 下新建 v1 目录，目录内新建 tag.go 文件代表第一个API大版本 package v1 import ( \"github.com/gin-gonic/gin\" ) // GetTags 获取多个文章标签 func GetTags ( c * gin . Context ) { } // AddTag 新增文章标签 func AddTag ( c * gin . Context ) { } // EditTag 修改文章标签 func EditTag ( c * gin . Context ) { } // DeleteTag 删除文章标签 func DeleteTag ( c * gin . Context ) { } 注册路由 该路由负责分发各个api请求给相应的 handler 者 打开 ./routers 下的 router.go 文件，修改为： package routers import ( setting \"go-gin-example/pkg/settings\" v1 \"go-gin-example/routers/api/v1\" \"github.com/gin-gonic/gin\" ) // InitRouter 初始化路由 func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) apiv1 := r . Group ( \"/api/v1\" ) { apiv1 . GET ( \"/tags\" , v1 . GetTags ) apiv1 . POST ( \"/tags\" , v1 . AddTag ) apiv1 . PUT ( \"/tags/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/tags/:id\" , v1 . DeleteTag ) } return r } 用 go run main.go 检测是否成功注册路由 表单验证 用beego的validation来进行表单校验数据 该 tag.go 模型中继承了 model.Model 结构体外新增了标签结构体中的一些属性，在该文件下除了通过 gorm 映射数据库模型外还添加了对标签的CRUD操作方法，在 ./routers/api/v1/tag.go 中可以调用这些CRUD方法 go get -u github.com/astaxie/beego/validation 在 models 目录下的 tag.go 写入 package models import ( \"time\" \"github.com/jinzhu/gorm\" ) // Tag 标签结构体 // 给结构体赋予json属性, 在c.JSON中会自动转换 type Tag struct { // 继承Model的结构体 Model Name string `json:\"name\"` CreatedBy string `json:\"created_by\"` ModifiedBy string `json:\"modified_by\"` State int `json:\"state\"` } // BeforeCreate 创建标签之前自动补全CreatedOn时间 func ( tag * Tag ) BeforeCreate ( scope * gorm . Scope ) error { scope . SetColumn ( \"CreatedOn\" , time . Now (). Unix ()) return nil } // BeforeUpdate 更新标签之前自动补全ModifiedOn时间 func ( tag * Tag ) BeforeUpdate ( scope * gorm . Scope ) error { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) return nil } // GetTags 获取文章标签 func GetTags ( pageNum int , pageSize int , maps interface {}) ( tags [] Tag ) { db . Where ( maps ). Offset ( pageNum ). Limit ( pageSize ). Find ( & tags ) return } // GetTagTotal 获取全部文章标签 func GetTagTotal ( maps interface {}) ( count int ) { db . Model ( & Tag {}). Where ( maps ). Count ( & count ) return } // ExistTagByName 查询文章标签是否存在 func ExistTagByName ( name string ) bool { var tag Tag db . Select ( \"id\" ). Where ( \"name = ?\" , name ). First ( & tag ) if tag . ID > 0 { return true } return false } // ExistTagByID 查询ID文章是否存在 func ExistTagByID ( id int ) bool { var tag Tag db . Select ( \"id\" ). Where ( \"id = ?\" , id ). First ( & tag ) if tag . ID > 0 { return true } return false } // AddTag 添加文章标签 func AddTag ( name string , state int , createdBy string ) bool { db . Create ( & Tag { Name : name , State : state , CreatedBy : createdBy , }) return true } // DeleteTag 删除文章标签 func DeleteTag ( id int ) bool { db . Where ( \"id = ? \" , id ). Delete ( & Tag {}) return true } // EditTag 编辑文章标签 func EditTag ( id int , data interface {}) bool { db . Model ( & Tag {}). Where ( \"id = ? \" , id ). Update ( data ) return true } 编写标签列表的路由逻辑 完善空壳路由 通过 beego/validation 对URL传递进来的参数进行校验，操作为声明 validation.Validation 对象，调用其 .Required 、 .MaxSize 、 .Range 、 .Message 等方法 通过 c.Query 获取URL中 ?name=test&state=1 中的参数， c.DefaultQuery 则支持设置一个默认值 util.GetPage 确保各个接口的 page 处理是一致的 在 ./routers/v1/tag.go 写入 package v1 import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/pkg/util\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetTags 获取文章标签 func GetTags ( c * gin . Context ) { // 从URL获取参数 // localhost:8000/tags?name=test&state=1 name := c . Query ( \"name\" ) maps := make ( map [ string ] interface {}) data := make ( map [ string ] interface {}) if name != \"\" { // 如果存在name参数, 将其添加到maps中 maps [ \"name\" ] = name } var state = - 1 // should omit type , it will be inferred if arg := c . Query ( \"state\" ); arg != \"\" { // 如果URL中存在state参数, 且arg不等于空的时候 // 将state转换为int // 添加到maps[\"state\"]中 state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state } code := e . SUCCESS // 找到该文章,将其添加到lists中返回 data [ \"lists\" ] = models . GetTags ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // AddTag 增加文章标签 func AddTag ( c * gin . Context ) { name := c . Query ( \"name\" ) // state=0代表该标签不存在 // 设置默认值为0 state := com . StrTo ( c . DefaultQuery ( \"state\" , \"0\" )). MustInt () createdBy := c . Query ( \"created_by\" ) valid := validation . Validation {} valid . Required ( name , \"name\" ). Message ( \"名称不能为空\" ) valid . MaxSize ( name , 100 , \"name\" ). Message ( \"名称最长为100字符\" ) valid . Required ( createdBy , \"created_by\" ). Message ( \"创建人不能为空\" ) valid . MaxSize ( createdBy , 100 , \"created_by\" ). Message ( \"创建人最长为100字符\" ) valid . Range ( state , 0 , 1 , \"starte\" ). Message ( \"状态只允许0或1\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if ! models . ExistTagByName ( name ) { code = e . SUCCESS models . AddTag ( name , state , createdBy ) } else { code = e . ERROR_EXIST_TAG } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // EditTag 修改文章标签 func EditTag ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () name := c . Query ( \"name\" ) modifiedBy := c . Query ( \"modified_by\" ) valid := validation . Validation {} var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只允许0或1\" ) } valid . Required ( id , \"id\" ). Message ( \"ID不能为空\" ) valid . Required ( modifiedBy , \"modiified_by\" ). Message ( \"修改人不能为空\" ) valid . MaxSize ( modifiedBy , 100 , \"modified_by\" ). Message ( \"修改人最长为100字符\" ) valid . MaxSize ( name , 100 , \"name\" ). Message ( \"名称最长为100字符\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { code = e . SUCCESS if models . ExistTagByID ( id ) { data := make ( map [ string ] interface {}) data [ \"modified_by\" ] = modifiedBy if name != \"\" { data [ \"name\" ] = name } if state != - 1 { data [ \"state\" ] = state } models . EditTag ( id , data ) } else { // 不存在, 无法修改标签 code = e . ERROR_NOT_EXIST_ARTICLE } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"message\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // DeleteTag 删除文章标签 func DeleteTag ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { code = e . SUCCESS // 数据库操作 if models . ExistTagByID ( id ) { models . DeleteTag ( id ) } else { code = e . ERROR_NOT_EXIST_TAG } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) }","text_tokens":["com","允许","初始","&","deletetag","strto","return","existtagbyname","找到","100","id","可以","statusok","调用","结构","crud","赋予","模型","默认","example","?","code","use","状态","默认值","will","`","存在","2","should","查询","_","不能","一致","支持","message","据库","maps","router","string","arg","beforecreate","/","bool","完善","valid","者","}","int","创建","modified","beego","group","total","获取","struct","select","offset","util","，","和","体","属性","进行","版本","url","beforeupdate","：","e","请求","或","(","8000","params","nil","除了","name","var","多个","空壳","by","设置","!","gorm","文章","的","新增","人","无法","修改文章","方法","中会","只","校验","limit","else","addtag","apiv1",",","jinzhu","最长","starte","test","且","modifiedby","main","setmode","pagesize",")","]","article","haserrors","tag","目录","转换","unix","则","为空","声明","false","-","内","it","db","传递","大","c","外",":","handler","第一","完成","logger","函数","是否","注册","还","time","maxsize","等于","new","数据","全部","不","unknwon","createdon","博客","go","omit","gin","文件","modiified","数据库","用","字符","count","确保","not","model","true","setting","validation","put","pkg","setcolumn","gettags","func","modifiedon","createdby","type","[","映射","自动","be","astaxie","时候","为","v1","补全","中","给","03","msg","这些","空","package","写入","第一个","query","”","之前","成功","localhost","添加","delete","返回","http","find","recovery","新建","增加","github","检测","从","时间","接口","routers","getpage","h","、","各个","engine","import","json","pagenum","更新",">","existtagbyid","标签","min","\"","该","对","通过","其","models",";","mustint","继承","是"," ","create","now","first","指定","路由","getmsg","在","map","0","=","修改","gettagtotal","*","操作方法","success","created","{","scope","由该","gonic","required","体外","负责","代表","分发","data","if","defaultquery","runmode","run","state","tags","inferred","initrouter","如果","一个","到","操作","post","列表","exist","逻辑","range","表单",".","进来","param","interface","删除","编写","page","make","api","context","将","“","r","来","error","net","where","定义","invalid","一些","edittag","大于","get","u","编辑","类","对象","必须","等","处理","settings","名称","下","体中","update","相应","lists","初始化","了","接口定义","参数","1","创建人","验证","打开"],"title":"go-gin-example 03：API-2","title_tokens":["-","2","go","gin"," ","example","03","：","api"]},{"location":"Golang/Project/go-gin-example/03 API-2/#go-gin-example-03api-2","text":"完成博客的标签类接口定义和编写","text_tokens":["类","的","接口","接口定义","和","博客","编写","标签","完成","定义"],"title":"go-gin-example 03：API-2","title_tokens":["-","2","go","gin"," ","example","03","：","api"]},{"location":"Golang/Project/go-gin-example/03 API-2/#_1","text":"定义文章标签的路由分发操作 获取标签列表：GET(“/tags”) 新建标签：POST(“/tags”) 更新指定标签：PUT(“/tags/:id”) 删除指定标签：DELETE(“/tags/:id”)","text_tokens":["新建","/","更新","get","标签","操作","文章","的","post","id","：","put","列表","”",")"," ","分发","(","“","指定","路由","获取","delete",":","删除","tags","定义"],"title":"定义接口","title_tokens":["接口","定义"]},{"location":"Golang/Project/go-gin-example/03 API-2/#_2","text":"注册路由将请求分发到该路由中，由该API路由中函数处理 在./routers/api 下新建 v1 目录，目录内新建 tag.go 文件代表第一个API大版本 package v1 import ( \"github.com/gin-gonic/gin\" ) // GetTags 获取多个文章标签 func GetTags ( c * gin . Context ) { } // AddTag 新增文章标签 func AddTag ( c * gin . Context ) { } // EditTag 修改文章标签 func EditTag ( c * gin . Context ) { } // DeleteTag 删除文章标签 func DeleteTag ( c * gin . Context ) { }","text_tokens":["注册","com","，","新建","修改","addtag","v1","edittag","中","/","一个","标签","\"","github","*","版本","deletetag","该","到","-","package","第一个","文章","内","{","}","由该","处理","新增","gonic","大","api","c","请求","routers","下","代表","context","gettags",")","func","将"," ","分发","文件","(","修改文章","路由","import","获取",".","在","tag","go","gin","目录","多个","删除","第一","函数"],"title":"空壳路由","title_tokens":["路由","空壳"]},{"location":"Golang/Project/go-gin-example/03 API-2/#_3","text":"该路由负责分发各个api请求给相应的 handler 者 打开 ./routers 下的 router.go 文件，修改为： package routers import ( setting \"go-gin-example/pkg/settings\" v1 \"go-gin-example/routers/api/v1\" \"github.com/gin-gonic/gin\" ) // InitRouter 初始化路由 func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) apiv1 := r . Group ( \"/api/v1\" ) { apiv1 . GET ( \"/tags\" , v1 . GetTags ) apiv1 . POST ( \"/tags\" , v1 . AddTag ) apiv1 . PUT ( \"/tags/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/tags/:id\" , v1 . DeleteTag ) } return r } 用 go run main.go 检测是否成功注册路由","text_tokens":["com","修改","用","初始","deletetag","*","return","的","{","id","setting","gonic","put","负责","pkg","gettags","func","分发","runmode","run","example","tags","use","initrouter","为","addtag","v1","apiv1",",","给","package","post","main","setmode","成功",")",".","delete","router","recovery","/","github","检测","-","者","}","api","routers","group","各个","engine","import","r",":","handler","logger","是否","注册","，","edittag","new","get","\"","该","settings","：","请求","下"," ","(","路由","相应","初始化","go","gin","=","打开","文件"],"title":"注册路由","title_tokens":["注册","路由"]},{"location":"Golang/Project/go-gin-example/03 API-2/#_4","text":"用beego的validation来进行表单校验数据 该 tag.go 模型中继承了 model.Model 结构体外新增了标签结构体中的一些属性，在该文件下除了通过 gorm 映射数据库模型外还添加了对标签的CRUD操作方法，在 ./routers/api/v1/tag.go 中可以调用这些CRUD方法 go get -u github.com/astaxie/beego/validation 在 models 目录下的 tag.go 写入 package models import ( \"time\" \"github.com/jinzhu/gorm\" ) // Tag 标签结构体 // 给结构体赋予json属性, 在c.JSON中会自动转换 type Tag struct { // 继承Model的结构体 Model Name string `json:\"name\"` CreatedBy string `json:\"created_by\"` ModifiedBy string `json:\"modified_by\"` State int `json:\"state\"` } // BeforeCreate 创建标签之前自动补全CreatedOn时间 func ( tag * Tag ) BeforeCreate ( scope * gorm . Scope ) error { scope . SetColumn ( \"CreatedOn\" , time . Now (). Unix ()) return nil } // BeforeUpdate 更新标签之前自动补全ModifiedOn时间 func ( tag * Tag ) BeforeUpdate ( scope * gorm . Scope ) error { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) return nil } // GetTags 获取文章标签 func GetTags ( pageNum int , pageSize int , maps interface {}) ( tags [] Tag ) { db . Where ( maps ). Offset ( pageNum ). Limit ( pageSize ). Find ( & tags ) return } // GetTagTotal 获取全部文章标签 func GetTagTotal ( maps interface {}) ( count int ) { db . Model ( & Tag {}). Where ( maps ). Count ( & count ) return } // ExistTagByName 查询文章标签是否存在 func ExistTagByName ( name string ) bool { var tag Tag db . Select ( \"id\" ). Where ( \"name = ?\" , name ). First ( & tag ) if tag . ID > 0 { return true } return false } // ExistTagByID 查询ID文章是否存在 func ExistTagByID ( id int ) bool { var tag Tag db . Select ( \"id\" ). Where ( \"id = ?\" , id ). First ( & tag ) if tag . ID > 0 { return true } return false } // AddTag 添加文章标签 func AddTag ( name string , state int , createdBy string ) bool { db . Create ( & Tag { Name : name , State : state , CreatedBy : createdBy , }) return true } // DeleteTag 删除文章标签 func DeleteTag ( id int ) bool { db . Where ( \"id = ? \" , id ). Delete ( & Tag {}) return true } // EditTag 编辑文章标签 func EditTag ( id int , data interface {}) bool { db . Model ( & Tag {}). Where ( \"id = ? \" , id ). Update ( data ) return true }","text_tokens":["数据库","com","用","&","count","deletetag","gettagtotal","*","操作方法","return","existtagbyname","by","gorm","文章","的","model","created","{","true","scope","id","新增","validation","体外","可以","setcolumn","gettags","调用","func","结构","crud","赋予","模型","方法","data","中会","modifiedon","createdby","if","type","校验","[","映射","state","tags","limit","?","自动","astaxie","addtag","v1","补全","中",",","`","jinzhu","给","存在","这些","package","操作","modifiedby","写入","查询","_","pagesize","之前",")","添加","]","表单",".","tag","delete","据库","目录","interface","删除","转换","maps","find","unix","string","beforecreate","/","bool","github","false","时间","-","}","db","int","api","c","创建","routers","0","modified","beego","外","获取","import","来","json","error","struct",":","where","select","是否","offset","还","，","time","一些","pagenum","edittag","体","更新","get",">","属性","数据","existtagbyid","标签","进行","\"","u","该","编辑","对","全部","通过","beforeupdate","models","下","体中","createdon","继承"," ","(","create","now","first","update","在","go","了","nil","除了","name","var","=","文件"],"title":"表单验证","title_tokens":["验证","表单"]},{"location":"Golang/Project/go-gin-example/03 API-2/#_5","text":"完善空壳路由 通过 beego/validation 对URL传递进来的参数进行校验，操作为声明 validation.Validation 对象，调用其 .Required 、 .MaxSize 、 .Range 、 .Message 等方法 通过 c.Query 获取URL中 ?name=test&state=1 中的参数， c.DefaultQuery 则支持设置一个默认值 util.GetPage 确保各个接口的 page 处理是一致的 在 ./routers/v1/tag.go 写入 package v1 import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/pkg/util\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetTags 获取文章标签 func GetTags ( c * gin . Context ) { // 从URL获取参数 // localhost:8000/tags?name=test&state=1 name := c . Query ( \"name\" ) maps := make ( map [ string ] interface {}) data := make ( map [ string ] interface {}) if name != \"\" { // 如果存在name参数, 将其添加到maps中 maps [ \"name\" ] = name } var state = - 1 // should omit type , it will be inferred if arg := c . Query ( \"state\" ); arg != \"\" { // 如果URL中存在state参数, 且arg不等于空的时候 // 将state转换为int // 添加到maps[\"state\"]中 state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state } code := e . SUCCESS // 找到该文章,将其添加到lists中返回 data [ \"lists\" ] = models . GetTags ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // AddTag 增加文章标签 func AddTag ( c * gin . Context ) { name := c . Query ( \"name\" ) // state=0代表该标签不存在 // 设置默认值为0 state := com . StrTo ( c . DefaultQuery ( \"state\" , \"0\" )). MustInt () createdBy := c . Query ( \"created_by\" ) valid := validation . Validation {} valid . Required ( name , \"name\" ). Message ( \"名称不能为空\" ) valid . MaxSize ( name , 100 , \"name\" ). Message ( \"名称最长为100字符\" ) valid . Required ( createdBy , \"created_by\" ). Message ( \"创建人不能为空\" ) valid . MaxSize ( createdBy , 100 , \"created_by\" ). Message ( \"创建人最长为100字符\" ) valid . Range ( state , 0 , 1 , \"starte\" ). Message ( \"状态只允许0或1\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if ! models . ExistTagByName ( name ) { code = e . SUCCESS models . AddTag ( name , state , createdBy ) } else { code = e . ERROR_EXIST_TAG } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // EditTag 修改文章标签 func EditTag ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () name := c . Query ( \"name\" ) modifiedBy := c . Query ( \"modified_by\" ) valid := validation . Validation {} var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只允许0或1\" ) } valid . Required ( id , \"id\" ). Message ( \"ID不能为空\" ) valid . Required ( modifiedBy , \"modiified_by\" ). Message ( \"修改人不能为空\" ) valid . MaxSize ( modifiedBy , 100 , \"modified_by\" ). Message ( \"修改人最长为100字符\" ) valid . MaxSize ( name , 100 , \"name\" ). Message ( \"名称最长为100字符\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { code = e . SUCCESS if models . ExistTagByID ( id ) { data := make ( map [ string ] interface {}) data [ \"modified_by\" ] = modifiedBy if name != \"\" { data [ \"name\" ] = name } if state != - 1 { data [ \"state\" ] = state } models . EditTag ( id , data ) } else { // 不存在, 无法修改标签 code = e . ERROR_NOT_EXIST_ARTICLE } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"message\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // DeleteTag 删除文章标签 func DeleteTag ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { code = e . SUCCESS // 数据库操作 if models . ExistTagByID ( id ) { models . DeleteTag ( id ) } else { code = e . ERROR_NOT_EXIST_TAG } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) }","text_tokens":["数据库","com","允许","修改","字符","&","确保","strto","gettagtotal","*","deletetag","existtagbyname","设置","success","by","找到","!","100","not","文章","的","created","{","id","setting","人","gonic","validation","required","pkg","代表","gettags","statusok","无法","调用","func","修改文章","方法","data","只","createdby","if","type","校验","defaultquery","默认","[","state","example","tags","?","be","inferred","astaxie","时候","code","else","为","状态","addtag","v1","如果","中","默认值","will",",","最长","starte","一个","msg","存在","test","到","空","package","操作","且","modifiedby","写入","should","_","pagesize","query",")","localhost","exist","添加","range","一致","]","支持","不能","article",".","haserrors","进来","message","tag","param","据库","interface","删除","返回","http","转换","maps","则","string","为空","arg","声明","/","增加","page","完善","github","从","valid","-","接口","it","}","int","make","传递","c","创建","routers","0","modified","context","beego","getpage","h","将","、","各个","total","获取","import","json","error",":","net","invalid","util","，","maxsize","等于","edittag","大于","existtagbyid","数据","标签","进行","\"","min","该","url","对","对象","必须","等","不","通过","其","处理","unknwon","settings","models","e","名称",";","mustint","或","是"," ","(","8000","params","路由","lists","getmsg","在","go","参数","omit","name","gin","var","map","空壳","=","1","创建人","modiified"],"title":"编写标签列表的路由逻辑","title_tokens":["路由","列表","的","编写","标签","逻辑"]},{"location":"Golang/Project/go-gin-example/04 API-3/","text":"go-gin-example 04：API-3 完成博客的文章类接口定义和编写 定义接口 定义文章的路由分发操作 获取文章列表：GET(“/articles”) 获取单篇文章：GET(“/articles/:id”) 更新文章：PUT(“/articles/:id”) 新建文章：POST(“/articles”) 删除文章：DELETE(“/tags/:id”) 空壳路由 文章请求处理API 在 ./routers/api/v1 下新建 article.go 文件 package v1 import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/pkg/util\" \"log\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetArticle 获取单个文章 func GetArticle ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) code := e . INVALID_PARAMS var data interface {} if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { data = models . GetArticle ( id ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key: %s, err.message: %s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // GetArticles 获取多个文章 func GetArticles ( c * gin . Context ) { data := make ( map [ string ] interface {}) maps := make ( map [ string ] interface {}) valid := validation . Validation {} var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只允许0或1\" ) } var tagID = - 1 if arg := c . Query ( \"tag_id\" ); arg != \"\" { tagID = com . StrTo ( arg ). MustInt () maps [ \"tag_id\" ] = tagID valid . Min ( tagID , 1 , \"tag_id\" ). Message ( \"标签ID必须大于0\" ) } code := e . INVALID_PARAMS if ! valid . HasErrors () { data [ \"list\" ] = models . GetArticles ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) code = e . SUCCESS } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s, err.message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // AddArticle 增加文章 func AddArticle ( c * gin . Context ) { tagID := com . StrTo ( c . Query ( \"tag_id\" )). MustInt () title := c . Query ( \"title\" ) desc := c . Query ( \"desc\" ) content := c . Query ( \"content\" ) createdBy := c . Query ( \"created_by\" ) state := com . StrTo ( c . Query ( \"state\" )). MustInt () valid := validation . Validation {} valid . Min ( tagID , 1 , \"tagID\" ). Message ( \"标签ID必须大于0\" ) valid . Required ( title , \"title\" ). Message ( \"题目不能为空\" ) valid . Required ( desc , \"desc\" ). Message ( \"描述不能为空\" ) valid . Required ( content , \"content\" ). Message ( \"内容不能为空\" ) valid . Required ( createdBy , \"created_by\" ). Message ( \"创建人不能为空\" ) valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只能是0或1\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistTagByID ( tagID ) { data := make ( map [ string ] interface {}) data [ \"tag_id\" ] = tagID data [ \"title\" ] = title data [ \"desc\" ] = desc data [ \"content\" ] = content data [ \"created_by\" ] = createdBy data [ \"state\" ] = state models . AddArticle ( data ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_TAG } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s, err.message%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // EditArticle 修改文章 func EditArticle ( c * gin . Context ) { valid := validation . Validation {} id := com . StrTo ( c . Query ( \"id\" )). MustInt () tagID := com . StrTo ( c . Query ( \"tag_id\" )). MustInt () title := c . Query ( \"title\" ) desc := c . Query ( \"desc\" ) content := c . Query ( \"content\" ) modifiedBy := c . Query ( \"modified_by\" ) var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只能是0或1\" ) } valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) valid . MaxSize ( title , 100 , \"title\" ). Message ( \"标题最长为100字符\" ) valid . MaxSize ( desc , 255 , \"desc\" ). Message ( \"简述最长为255字符\" ) valid . MaxSize ( content , 65535 , \"content\" ). Message ( \"内容最长为65535字符\" ) valid . Required ( modifiedBy , \"modified_by\" ). Message ( \"修改人不能为空\" ) valid . MaxSize ( modifiedBy , 100 , \"modified_by\" ). Message ( \"修改人最长为100字符\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { if models . ExistTagByID ( tagID ) { data := make ( map [ string ] interface {}) if tagID > 0 { data [ \"tag_id\" ] = tagID } if title != \"\" { data [ \"title\" ] = title } if desc != \"\" { data [ \"desc\" ] = desc } if content != \"\" { data [ \"content\" ] = content } data [ \"modified_by\" ] = modifiedBy models . EditArticle ( id , data ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_TAG } } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s err.Message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // DeleteArticle 删除文章 func DeleteArticle ( c * gin . Context ) { id := com . StrTo ( c . Query ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { models . DeleteArticle ( id ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.Key:%s err.Message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } 定义文章的数据库模型 数据库模型和相关CRUD操作 在 ./models 下新建 article.go 文件 package models import ( \"time\" \"github.com/jinzhu/gorm\" ) // Article 文章结构体 type Article struct { Model // 声明该`TagID`为索引 TagID int `json:\"tag_id\" gorm:\"index\"` Tag Tag `json:tag` Title string `json:\"title\"` Desc string `json:\"desc\"` Content string `json:\"content\"` CreatedBy string `json:\"created_by\"` ModifiedBy string `json:\"modified_by\"` State int `json:state\"` } // BeforeCreate 创建数据前的操作 func ( article * Article ) BeforeCreate ( scope * gorm . Scope ) error { // scope 包含当前执行的所有信息 scope . SetColumn ( \"CreateOn\" , time . Now (). Unix ()) return nil } // BeforeUpdate 更新(编辑)之前添加修改时间 func ( article * Article ) BeforeUpdate ( scope * gorm . Scope ) error { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) return nil } // ExistArticleByID 判断是否存在文章 func ExistArticleByID ( id int ) bool { var article Article db . Select ( \"id\" ). Where ( \"id = ?\" , id ). Find ( & article ) if article . ID > 0 { return true } return false } // GetArticleTotal 计算文章数量 func GetArticleTotal ( maps interface {}) ( count int ) { // 在Article数据库中查询所有数据后计数返回给count db . Model ( & Article {}). Where ( maps ). Count ( & count ) return count } // GetArticles 获取所有文章列表 func GetArticles ( pageNum int , pageSize int , maps interface {}) ( articles [] Article ) { // 根据条件预加载 db . Preload ( \"Tag\" ). Where ( maps ). Offset ( pageNum ). Limit ( pageSize ). Find ( & articles ) return articles } // GetArticle 获取单篇文章 func GetArticle ( id int ) ( article Article ) { // 找到该片文章, 返回到article中 db . Where ( \"id = ?\" , id ). First ( & article ) // 获取与该篇文章有关的Tag // 通过.Related关联到嵌套在Article内的Tag结构体 db . Model ( & article ). Related ( & article . Tag ) return article } // EditArticle 编辑文章 func EditArticle ( id int , data interface {}) bool { db . Model ( & Article {}). Where ( \"id = ?\" , id ). Update ( data ) return true } // AddArticle 添加文章 func AddArticle ( data map [ string ] interface {}) bool { db . Create ( & Article { // v.(I)类型断言: 判断接口v的实际类型是否为(I)类型 TagID : data [ \"tag_id\" ].( int ), Title : data [ \"title\" ].( string ), Desc : data [ \"desc\" ].( string ), Content : data [ \"content\" ].( string ), CreatedBy : data [ \"created_by\" ].( string ), State : data [ \"state\" ].( int ), }) return true } // DeleteArticle 删除文章 func DeleteArticle ( id int ) bool { db . Where ( \"id = ?\" , id ). Delete ( Article {}) return true }","text_tokens":["数据库","com","允许","修改","related","existarticlebyid","字符","&","count","strto","gettagtotal","*","关联","return","后","by","success","找到","!","not","100","gorm","文章","的","model","created","{","true","scope","id","setting","for","人","gonic","当前","preload","validation","put","required","该片","pkg","标题","setcolumn","04","statusok","i","%","func","结构","crud","分发","修改文章","255","模型","前","data","getarticle","modifiedon","只","v","createon","createdby","篇文章","if","type","tagid","[","state","example","tags","code","?","根据","astaxie","预","limit","else","为","状态","信息","v1","中","getarticletotal","message%","printf",",","`","最长","addarticle","jinzhu","msg","给","相关","title","存在","到","package","操作","modifiedby","单篇","加载","查询","描述","post","_","desc","单个","pagesize","query","条件","列表","”","err","简述","之前","计算","key",")","类型","exist","getarticles","添加","range","]","不能","article",".","haserrors","tag","message","param","delete","据库","有关","interface","只能","删除","返回","实际","http","编写","maps","find","unix","string","为空","索引","新建","判断","arg","内容","声明","/","s","beforecreate","bool","增加","github","valid","false","时间","-","3","数量","接口","内","断言","}","执行","所有","db","articles","int","make","api","c","创建","routers","0","modified","context","beego","包含","getpage","h","“","total","获取","import","error","json","struct",":","log","net","where","select","完成","定义","invalid","是否","util","offset","time","pagenum","maxsize","和","体","大于","更新","get",">","existtagbyid","数据","计数","min","标签","\"","errors","65535","index","该","编辑","与","类","content","editarticle","必须","通过","beforeupdate","处理","unknwon","settings","models","：","e","题目","请求",";","下","mustint","list","或","博客","是"," ","(","create","now","first","params","路由","update","getmsg","在","go","接口定义","nil","var","gin","嵌套","deletearticle","map","多个","空壳","=","1","创建人","文件"],"title":"go-gin-example 04：API-3","title_tokens":["-","3","go","04","gin"," ","example","：","api"]},{"location":"Golang/Project/go-gin-example/04 API-3/#go-gin-example-04api-3","text":"完成博客的文章类接口定义和编写","text_tokens":["类","文章","的","接口","接口定义","和","博客","编写","完成","定义"],"title":"go-gin-example 04：API-3","title_tokens":["-","3","go","04","gin"," ","example","：","api"]},{"location":"Golang/Project/go-gin-example/04 API-3/#_1","text":"定义文章的路由分发操作 获取文章列表：GET(“/articles”) 获取单篇文章：GET(“/articles/:id”) 更新文章：PUT(“/articles/:id”) 新建文章：POST(“/articles”) 删除文章：DELETE(“/tags/:id”)","text_tokens":["新建","/","更新","get","操作","单篇","文章","的","post","articles","id","：","put","列表","”",")"," ","分发","(","“","路由","获取","delete",":","删除","tags","定义"],"title":"定义接口","title_tokens":["接口","定义"]},{"location":"Golang/Project/go-gin-example/04 API-3/#_2","text":"文章请求处理API 在 ./routers/api/v1 下新建 article.go 文件 package v1 import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/pkg/util\" \"log\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" \"github.com/unknwon/com\" ) // GetArticle 获取单个文章 func GetArticle ( c * gin . Context ) { id := com . StrTo ( c . Param ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) code := e . INVALID_PARAMS var data interface {} if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { data = models . GetArticle ( id ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key: %s, err.message: %s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // GetArticles 获取多个文章 func GetArticles ( c * gin . Context ) { data := make ( map [ string ] interface {}) maps := make ( map [ string ] interface {}) valid := validation . Validation {} var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () maps [ \"state\" ] = state valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只允许0或1\" ) } var tagID = - 1 if arg := c . Query ( \"tag_id\" ); arg != \"\" { tagID = com . StrTo ( arg ). MustInt () maps [ \"tag_id\" ] = tagID valid . Min ( tagID , 1 , \"tag_id\" ). Message ( \"标签ID必须大于0\" ) } code := e . INVALID_PARAMS if ! valid . HasErrors () { data [ \"list\" ] = models . GetArticles ( util . GetPage ( c ), setting . PageSize , maps ) data [ \"total\" ] = models . GetTagTotal ( maps ) code = e . SUCCESS } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s, err.message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } // AddArticle 增加文章 func AddArticle ( c * gin . Context ) { tagID := com . StrTo ( c . Query ( \"tag_id\" )). MustInt () title := c . Query ( \"title\" ) desc := c . Query ( \"desc\" ) content := c . Query ( \"content\" ) createdBy := c . Query ( \"created_by\" ) state := com . StrTo ( c . Query ( \"state\" )). MustInt () valid := validation . Validation {} valid . Min ( tagID , 1 , \"tagID\" ). Message ( \"标签ID必须大于0\" ) valid . Required ( title , \"title\" ). Message ( \"题目不能为空\" ) valid . Required ( desc , \"desc\" ). Message ( \"描述不能为空\" ) valid . Required ( content , \"content\" ). Message ( \"内容不能为空\" ) valid . Required ( createdBy , \"created_by\" ). Message ( \"创建人不能为空\" ) valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只能是0或1\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistTagByID ( tagID ) { data := make ( map [ string ] interface {}) data [ \"tag_id\" ] = tagID data [ \"title\" ] = title data [ \"desc\" ] = desc data [ \"content\" ] = content data [ \"created_by\" ] = createdBy data [ \"state\" ] = state models . AddArticle ( data ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_TAG } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s, err.message%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // EditArticle 修改文章 func EditArticle ( c * gin . Context ) { valid := validation . Validation {} id := com . StrTo ( c . Query ( \"id\" )). MustInt () tagID := com . StrTo ( c . Query ( \"tag_id\" )). MustInt () title := c . Query ( \"title\" ) desc := c . Query ( \"desc\" ) content := c . Query ( \"content\" ) modifiedBy := c . Query ( \"modified_by\" ) var state = - 1 if arg := c . Query ( \"state\" ); arg != \"\" { state = com . StrTo ( arg ). MustInt () valid . Range ( state , 0 , 1 , \"state\" ). Message ( \"状态只能是0或1\" ) } valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) valid . MaxSize ( title , 100 , \"title\" ). Message ( \"标题最长为100字符\" ) valid . MaxSize ( desc , 255 , \"desc\" ). Message ( \"简述最长为255字符\" ) valid . MaxSize ( content , 65535 , \"content\" ). Message ( \"内容最长为65535字符\" ) valid . Required ( modifiedBy , \"modified_by\" ). Message ( \"修改人不能为空\" ) valid . MaxSize ( modifiedBy , 100 , \"modified_by\" ). Message ( \"修改人最长为100字符\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { if models . ExistTagByID ( tagID ) { data := make ( map [ string ] interface {}) if tagID > 0 { data [ \"tag_id\" ] = tagID } if title != \"\" { data [ \"title\" ] = title } if desc != \"\" { data [ \"desc\" ] = desc } if content != \"\" { data [ \"content\" ] = content } data [ \"modified_by\" ] = modifiedBy models . EditArticle ( id , data ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_TAG } } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.key:%s err.Message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) } // DeleteArticle 删除文章 func DeleteArticle ( c * gin . Context ) { id := com . StrTo ( c . Query ( \"id\" )). MustInt () valid := validation . Validation {} valid . Min ( id , 1 , \"id\" ). Message ( \"ID必须大于0\" ) code := e . INVALID_PARAMS if ! valid . HasErrors () { if models . ExistArticleByID ( id ) { models . DeleteArticle ( id ) code = e . SUCCESS } else { code = e . ERROR_NOT_EXIST_ARTICLE } } else { for _ , err := range valid . Errors { log . Printf ( \"err.Key:%s err.Message:%s\" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : make ( map [ string ] string ), }) }","text_tokens":["com","允许","修改","existarticlebyid","字符","strto","gettagtotal","*","by","success","!","not","100","文章","created","{","id","setting","for","人","gonic","validation","required","pkg","标题","statusok","%","func","修改文章","255","data","getarticle","只","createdby","if","tagid","[","state","example","code","astaxie","else","为","状态","v1","message%","printf",",","最长","addarticle","msg","title","package","modifiedby","描述","_","desc","单个","pagesize","query","err","简述","key",")","exist","getarticles","range","]","不能","article",".","haserrors","tag","message","param","interface","只能","删除","http","maps","string","为空","新建","arg","内容","/","s","增加","github","valid","-","}","make","api","c","创建","routers","0","modified","context","beego","getpage","h","total","获取","import","error","json","log",":","net","invalid","util","maxsize","大于",">","existtagbyid","min","标签","\"","errors","65535","editarticle","content","必须","处理","unknwon","settings","models","e","题目","请求",";","下","mustint","list","或","是"," ","(","params","getmsg","在","go","var","gin","deletearticle","map","多个","1","=","创建人","文件"],"title":"空壳路由","title_tokens":["路由","空壳"]},{"location":"Golang/Project/go-gin-example/04 API-3/#_3","text":"数据库模型和相关CRUD操作 在 ./models 下新建 article.go 文件 package models import ( \"time\" \"github.com/jinzhu/gorm\" ) // Article 文章结构体 type Article struct { Model // 声明该`TagID`为索引 TagID int `json:\"tag_id\" gorm:\"index\"` Tag Tag `json:tag` Title string `json:\"title\"` Desc string `json:\"desc\"` Content string `json:\"content\"` CreatedBy string `json:\"created_by\"` ModifiedBy string `json:\"modified_by\"` State int `json:state\"` } // BeforeCreate 创建数据前的操作 func ( article * Article ) BeforeCreate ( scope * gorm . Scope ) error { // scope 包含当前执行的所有信息 scope . SetColumn ( \"CreateOn\" , time . Now (). Unix ()) return nil } // BeforeUpdate 更新(编辑)之前添加修改时间 func ( article * Article ) BeforeUpdate ( scope * gorm . Scope ) error { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) return nil } // ExistArticleByID 判断是否存在文章 func ExistArticleByID ( id int ) bool { var article Article db . Select ( \"id\" ). Where ( \"id = ?\" , id ). Find ( & article ) if article . ID > 0 { return true } return false } // GetArticleTotal 计算文章数量 func GetArticleTotal ( maps interface {}) ( count int ) { // 在Article数据库中查询所有数据后计数返回给count db . Model ( & Article {}). Where ( maps ). Count ( & count ) return count } // GetArticles 获取所有文章列表 func GetArticles ( pageNum int , pageSize int , maps interface {}) ( articles [] Article ) { // 根据条件预加载 db . Preload ( \"Tag\" ). Where ( maps ). Offset ( pageNum ). Limit ( pageSize ). Find ( & articles ) return articles } // GetArticle 获取单篇文章 func GetArticle ( id int ) ( article Article ) { // 找到该片文章, 返回到article中 db . Where ( \"id = ?\" , id ). First ( & article ) // 获取与该篇文章有关的Tag // 通过.Related关联到嵌套在Article内的Tag结构体 db . Model ( & article ). Related ( & article . Tag ) return article } // EditArticle 编辑文章 func EditArticle ( id int , data interface {}) bool { db . Model ( & Article {}). Where ( \"id = ?\" , id ). Update ( data ) return true } // AddArticle 添加文章 func AddArticle ( data map [ string ] interface {}) bool { db . Create ( & Article { // v.(I)类型断言: 判断接口v的实际类型是否为(I)类型 TagID : data [ \"tag_id\" ].( int ), Title : data [ \"title\" ].( string ), Desc : data [ \"desc\" ].( string ), Content : data [ \"content\" ].( string ), CreatedBy : data [ \"created_by\" ].( string ), State : data [ \"state\" ].( int ), }) return true } // DeleteArticle 删除文章 func DeleteArticle ( id int ) bool { db . Where ( \"id = ?\" , id ). Delete ( Article {}) return true }","text_tokens":["数据库","com","修改","related","existarticlebyid","&","count","关联","*","return","后","by","找到","gorm","文章","的","model","created","{","true","scope","id","preload","当前","该片","setcolumn","i","func","结构","crud","前","模型","v","data","getarticle","modifiedon","createon","createdby","篇文章","if","type","tagid","[","state","根据","预","?","limit","为","信息","中","getarticletotal",",","`","jinzhu","addarticle","给","相关","title","存在","到","package","操作","modifiedby","加载","单篇","查询","_","desc","pagesize","条件","列表","之前","类型","计算",")","getarticles","添加","]","article",".","tag","有关","delete","据库","interface","实际","返回","删除","maps","find","unix","string","索引","新建","判断","声明","beforecreate","/","bool","github","false","时间","数量","内","接口","断言","}","执行","所有","db","articles","int","创建","0","modified","包含","获取","import","json","error","struct",":","where","select","是否","offset","time","pagenum","和","体","更新","计数",">","数据","index","\"","该","编辑","与","editarticle","content","通过","beforeupdate","models","下"," ","(","create","now","first","update","在","go","nil","var","嵌套","deletearticle","map","=","文件"],"title":"定义文章的数据库模型","title_tokens":["数据库","文章","的","据库","数据","模型","定义"]},{"location":"Golang/Project/go-gin-example/05 JWT/","text":"go-gin-example 05：JWT 为什么要JWT 当前的API接口虽然编写好了，但是这些API可以被随意调用，这样子是不安全的。因此需要通过 jwt-go 的方式来解决 如何使用JWT 下载依赖包： go get -u github.com/dgrijalva/jwt-go 编写 ./pkg/util 下的新建 jwt.go 文件 其中该工具包主要包含 生成Token 、 解析Token 功能 NewWithClaims 中加密方法有 SigningMethodHS256 ， SigningMethodHS384 、 SigningMethodHS512 三种 cropto.Hash 方案 package util import ( setting \"go-gin-example/pkg/settings\" \"time\" \"github.com/dgrijalva/jwt-go\" ) var jwtSecret = [] byte ( setting . JwtSecret ) // Claims 声明Claims结构体 type Claims struct { Username string `json: \"username\"` Password string `json: \"password\"` jwt . StandardClaims } // GenerateToken 生成密钥 func GenerateToken ( username , password string ) ( string , error ) { nowTime := time . Now () expireTime := nowTime . Add ( 3 * time . Hour ) claims := Claims { username , password , jwt . StandardClaims { ExpiresAt : expireTime . Unix (), Issuer : \"gin-blog\" , }, } // 对claims 进行加密 tokenClaims := jwt . NewWithClaims ( jwt . SigningMethodHS256 , claims ) // 获得加密后的token // 猜测为生成一个加密后的字符串给jwtSecret token , err := tokenClaims . SignedString ( jwtSecret ) return token , err } // ParseToken 解析密钥 func ParseToken ( token string ) ( * Claims , error ) { tokenClaims , err := jwt . ParseWithClaims ( token , & Claims {}, func ( token * jwt . Token ) ( interface {}, error ) { return jwtSecret , nil }) if tokenClaims != nil { if claims , ok := tokenClaims . Claims .( * Claims ); ok && tokenClaims . Valid { return claims , nil } } return nil , err } 编写Gin中间件，在 middleware 下新建 jwt 目录，在其中新建 jwt.go 文件写入 package jwt import ( \"go-gin-example/pkg/e\" \"go-gin-example/pkg/util\" \"net/http\" \"time\" \"github.com/gin-gonic/gin\" ) // JWT json web token func JWT () gin . HandlerFunc { return func ( c * gin . Context ) { var code int var data interface {} code = e . SUCCESS token := c . Query ( \"token\" ) if token == \"\" { code = e . INVALID_PARAMS } else { claims , err := util . ParseToken ( token ) if err != nil { code = e . ERROR_AUTH_CHECK_TOKEN_FAIL } else if time . Now (). Unix () > claims . ExpiresAt { code = e . ERROR_AUTH_CHECK_TOKEN_TIMEOUT } } if code != e . SUCCESS { c . JSON ( http . StatusUnauthorized , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) // 通过Abort确保当前的handler未被调用, 即当验证不正确的时候丢弃掉该处理 c . Abort () return } c . Next () } } 获得token，在 ./models 下新建 auth.go 文件写入 package models // Auth Token认证 type Auth struct { ID int `gorm:\"primary_key\" json:\"id\"` Username string `json:\"username\"` Password string `json:\"password\"` } // CheckAuth 验证token func CheckAuth ( username , password string ) bool { var auth Auth db . Select ( \"id\" ). Where ( Auth { Username : username , Password : password }). First ( & auth ) if auth . ID > 0 { return true } return false } 在 ./api 下新建 auth.go 文件写入 package api import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" \"go-gin-example/pkg/util\" \"log\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" ) type auth struct { Username string `valid: \"Required; MaxSize(50)\" ` Password string `valid: \"Required; MaxSize(50)\"` } // GetAuth 获取认证 func GetAuth ( c * gin . Context ) { username := c . Query ( \"username\" ) password := c . Query ( \"password\" ) valid := validation . Validation {} a := auth { Username : username , Password : password } ok , _ := valid . Valid ( & a ) data := make ( map [ string ] interface {}) code := e . INVALID_PARAMS if ok { isExist := models . CheckAuth ( username , password ) // 如果存在该账号 if isExist { token , err := util . GenerateToken ( username , password ) if err != nil { code = e . ERROR_AUTH_TOKEN } else { data [ \"token\" ] = token code = e . SUCCESS } } else { // 不存在账号 code = e . ERROR_AUTH } } else { for _ , err := range valid . Errors { log . Println ( err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } 修改 router.go 文件 package routers import ( \"go-gin-example/middleware/jwt\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/routers/api\" v1 \"go-gin-example/routers/api/v1\" \"github.com/gin-gonic/gin\" ) // InitRouter 初始化路由 func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) // 调用认证接口 r . GET ( \"/auth\" , api . GetAuth ) apiv1 := r . Group ( \"/api/v1\" ) // Group内的所有请求都需要经过JWT apiv1 . Use ( jwt . JWT ()) { apiv1 . GET ( \"/tags\" , v1 . GetTags ) apiv1 . POST ( \"/tags\" , v1 . AddTag ) apiv1 . PUT ( \"/tags/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/tags/:id\" , v1 . DeleteTag ) apiv1 . GET ( \"/articles\" , v1 . GetArticles ) apiv1 . GET ( \"/articles/:id\" , v1 . GetArticle ) apiv1 . POST ( \"/articles\" , v1 . AddArticle ) apiv1 . PUT ( \"/articles/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/atricles/:id\" , v1 . DeleteTag ) } return r } 调用 访问 http://127.0.0.1:8000/auth?username=test&password=test123456 获得token 带着token访问api http://127.0.0.1:8000/api/v1/articles?token=eyJhbGci...","text_tokens":["com","&&","isexist","修改","虽然","初始","ok","timeout","字符","即当","signingmethodhs384","&","primary","确保","deletetag","*","cropto","return","后","50","success","getauth","!","经过","gorm","的","tokenclaims","true","{","id","setting","for","被","gonic","当前","认证","web","validation","required","put","pkg","可以","gettags","expiretime","工具","statusok","调用","func","结构","方法","data","getarticle","解析","获得","if","type","如何","runmode","auth","[","example","tags","code","?","时候","astaxie","中间件","。","else","掉","为","initrouter","use","因此","hour","v1","丢弃","中","如果","addtag","atricles","checkauth",",","`","apiv1","什么","addarticle","一个","给","add","signingmethodhs512","msg","这些","存在","test","package","方案","写入","a","包","post","jwtsecret","_","未","test123456","next","字符串","setmode","parsewithclaims","signedstring","主要","err","下载","猜测","query","fail","key",")","getarticles","]","range","generatetoken","都",".","message","delete","要","abort","目录","interface","parsetoken","编写","http","middleware","unix","string","中间","随意","claims","jwt","新建","password","router","recovery","blog","解决","声明","使用","/","安全","issuer","bool","github","valid","false","着","dgrijalva","nowtime","-","3","样子","接口","其中","内","}","db","所有","articles","int","...","make","signingmethodhs256","api","c","功能","0","routers","context","包含","beego","密钥","username","handlerfunc","group","05","方式","h","、","带","加密","需要","engine","获取","import","r","来","json","error","token","struct",":","log","handler","工具包","net","standardclaims","where","select","println","正确","logger","invalid","util","statusunauthorized","，","time","0.1","maxsize","expiresat","edittag","体","eyjhbgci","get",">","new","进行","\"","errors","u","127.0","该","有","对","check","账号","不","这","通过","处理","依赖","settings","models","：","e","三种","访问","请求",";","下","生成","byte","是"," ","好","(","8000","now","first","为什么","params","但是","路由","getmsg","在","go","了","newwithclaims","hash","var","gin","nil","初始化","map","=","验证","文件"],"title":"go-gin-example 05：JWT","title_tokens":["-","jwt","go","gin","05"," ","example","："]},{"location":"Golang/Project/go-gin-example/05 JWT/#go-gin-example-05jwt","text":"","text_tokens":[],"title":"go-gin-example 05：JWT","title_tokens":["-","jwt","go","gin","05"," ","example","："]},{"location":"Golang/Project/go-gin-example/05 JWT/#jwt","text":"当前的API接口虽然编写好了，但是这些API可以被随意调用，这样子是不安全的。因此需要通过 jwt-go 的方式来解决","text_tokens":["随意","，","jwt","虽然","因此","解决","安全","这些","-","样子","的","接口","不","这","通过","被","当前","api","可以","调用","方式","是"," ","好","需要","但是","了","go","来","编写","。"],"title":"为什么要JWT","title_tokens":["要","jwt","为什么","什么"]},{"location":"Golang/Project/go-gin-example/05 JWT/#jwt_1","text":"下载依赖包： go get -u github.com/dgrijalva/jwt-go 编写 ./pkg/util 下的新建 jwt.go 文件 其中该工具包主要包含 生成Token 、 解析Token 功能 NewWithClaims 中加密方法有 SigningMethodHS256 ， SigningMethodHS384 、 SigningMethodHS512 三种 cropto.Hash 方案 package util import ( setting \"go-gin-example/pkg/settings\" \"time\" \"github.com/dgrijalva/jwt-go\" ) var jwtSecret = [] byte ( setting . JwtSecret ) // Claims 声明Claims结构体 type Claims struct { Username string `json: \"username\"` Password string `json: \"password\"` jwt . StandardClaims } // GenerateToken 生成密钥 func GenerateToken ( username , password string ) ( string , error ) { nowTime := time . Now () expireTime := nowTime . Add ( 3 * time . Hour ) claims := Claims { username , password , jwt . StandardClaims { ExpiresAt : expireTime . Unix (), Issuer : \"gin-blog\" , }, } // 对claims 进行加密 tokenClaims := jwt . NewWithClaims ( jwt . SigningMethodHS256 , claims ) // 获得加密后的token // 猜测为生成一个加密后的字符串给jwtSecret token , err := tokenClaims . SignedString ( jwtSecret ) return token , err } // ParseToken 解析密钥 func ParseToken ( token string ) ( * Claims , error ) { tokenClaims , err := jwt . ParseWithClaims ( token , & Claims {}, func ( token * jwt . Token ) ( interface {}, error ) { return jwtSecret , nil }) if tokenClaims != nil { if claims , ok := tokenClaims . Claims .( * Claims ); ok && tokenClaims . Valid { return claims , nil } } return nil , err } 编写Gin中间件，在 middleware 下新建 jwt 目录，在其中新建 jwt.go 文件写入 package jwt import ( \"go-gin-example/pkg/e\" \"go-gin-example/pkg/util\" \"net/http\" \"time\" \"github.com/gin-gonic/gin\" ) // JWT json web token func JWT () gin . HandlerFunc { return func ( c * gin . Context ) { var code int var data interface {} code = e . SUCCESS token := c . Query ( \"token\" ) if token == \"\" { code = e . INVALID_PARAMS } else { claims , err := util . ParseToken ( token ) if err != nil { code = e . ERROR_AUTH_CHECK_TOKEN_FAIL } else if time . Now (). Unix () > claims . ExpiresAt { code = e . ERROR_AUTH_CHECK_TOKEN_TIMEOUT } } if code != e . SUCCESS { c . JSON ( http . StatusUnauthorized , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) // 通过Abort确保当前的handler未被调用, 即当验证不正确的时候丢弃掉该处理 c . Abort () return } c . Next () } } 获得token，在 ./models 下新建 auth.go 文件写入 package models // Auth Token认证 type Auth struct { ID int `gorm:\"primary_key\" json:\"id\"` Username string `json:\"username\"` Password string `json:\"password\"` } // CheckAuth 验证token func CheckAuth ( username , password string ) bool { var auth Auth db . Select ( \"id\" ). Where ( Auth { Username : username , Password : password }). First ( & auth ) if auth . ID > 0 { return true } return false } 在 ./api 下新建 auth.go 文件写入 package api import ( \"go-gin-example/models\" \"go-gin-example/pkg/e\" \"go-gin-example/pkg/util\" \"log\" \"net/http\" \"github.com/astaxie/beego/validation\" \"github.com/gin-gonic/gin\" ) type auth struct { Username string `valid: \"Required; MaxSize(50)\" ` Password string `valid: \"Required; MaxSize(50)\"` } // GetAuth 获取认证 func GetAuth ( c * gin . Context ) { username := c . Query ( \"username\" ) password := c . Query ( \"password\" ) valid := validation . Validation {} a := auth { Username : username , Password : password } ok , _ := valid . Valid ( & a ) data := make ( map [ string ] interface {}) code := e . INVALID_PARAMS if ok { isExist := models . CheckAuth ( username , password ) // 如果存在该账号 if isExist { token , err := util . GenerateToken ( username , password ) if err != nil { code = e . ERROR_AUTH_TOKEN } else { data [ \"token\" ] = token code = e . SUCCESS } } else { // 不存在账号 code = e . ERROR_AUTH } } else { for _ , err := range valid . Errors { log . Println ( err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \"code\" : code , \"msg\" : e . GetMsg ( code ), \"data\" : data , }) } 修改 router.go 文件 package routers import ( \"go-gin-example/middleware/jwt\" setting \"go-gin-example/pkg/settings\" \"go-gin-example/routers/api\" v1 \"go-gin-example/routers/api/v1\" \"github.com/gin-gonic/gin\" ) // InitRouter 初始化路由 func InitRouter () * gin . Engine { r := gin . New () r . Use ( gin . Logger ()) r . Use ( gin . Recovery ()) gin . SetMode ( setting . RunMode ) // 调用认证接口 r . GET ( \"/auth\" , api . GetAuth ) apiv1 := r . Group ( \"/api/v1\" ) // Group内的所有请求都需要经过JWT apiv1 . Use ( jwt . JWT ()) { apiv1 . GET ( \"/tags\" , v1 . GetTags ) apiv1 . POST ( \"/tags\" , v1 . AddTag ) apiv1 . PUT ( \"/tags/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/tags/:id\" , v1 . DeleteTag ) apiv1 . GET ( \"/articles\" , v1 . GetArticles ) apiv1 . GET ( \"/articles/:id\" , v1 . GetArticle ) apiv1 . POST ( \"/articles\" , v1 . AddArticle ) apiv1 . PUT ( \"/articles/:id\" , v1 . EditTag ) apiv1 . DELETE ( \"/atricles/:id\" , v1 . DeleteTag ) } return r } 调用 访问 http://127.0.0.1:8000/auth?username=test&password=test123456 获得token 带着token访问api http://127.0.0.1:8000/api/v1/articles?token=eyJhbGci...","text_tokens":["com","&&","isexist","修改","初始","ok","timeout","字符","即当","signingmethodhs384","&","primary","确保","deletetag","*","cropto","return","后","50","success","getauth","!","经过","gorm","的","tokenclaims","true","{","id","setting","for","被","gonic","当前","认证","web","validation","required","put","pkg","gettags","expiretime","工具","statusok","调用","func","结构","方法","data","getarticle","解析","获得","if","type","runmode","auth","[","example","tags","code","?","时候","astaxie","中间件","else","掉","initrouter","为","use","hour","addtag","v1","丢弃","中","如果","atricles","checkauth",",","`","apiv1","addarticle","一个","给","add","signingmethodhs512","msg","存在","test","package","方案","写入","a","包","post","jwtsecret","_","未","test123456","next","字符串","setmode","parsewithclaims","signedstring","主要","err","下载","猜测","query","fail","key",")","getarticles","]","range","generatetoken","都",".","message","delete","abort","目录","interface","parsetoken","编写","http","middleware","unix","string","中间","claims","password","jwt","新建","router","recovery","blog","声明","issuer","/","bool","github","valid","false","着","dgrijalva","nowtime","-","3","其中","接口","内","}","db","所有","articles","int","...","make","signingmethodhs256","api","c","功能","0","routers","context","包含","beego","密钥","username","handlerfunc","group","h","、","带","加密","需要","engine","获取","import","r","json","error","token","struct",":","log","handler","工具包","net","standardclaims","where","select","println","正确","logger","invalid","util","statusunauthorized","，","time","0.1","maxsize","expiresat","edittag","体","eyjhbgci","get",">","new","进行","\"","errors","u","127.0","该","有","对","check","账号","不","通过","处理","依赖","settings","models","：","e","三种","访问","请求",";","下","生成","byte"," ","(","8000","now","first","params","路由","getmsg","在","go","newwithclaims","hash","nil","var","gin","初始化","map","=","验证","文件"],"title":"如何使用JWT","title_tokens":["使用","如何","jwt"]},{"location":"Golang/Project/go-gin-example/08 Swagger/","text":"go-gin-example 08： Swagger Swagger是什么? 接口生成器：自动生成接口文档 如何在golang中使用Swagger 安装 安装swag go get -u github.com/swaggo/swag/cmd/swag ，如果没有将 $GOROOT/bin 添加到 $PATH 中，则需要将swag的可执行文件移到 $GOBIN 中 验证是否安装成功 $ swag -v swag version v1.6.3 安装gin-swagger go get -u github.com/swaggo/gin-swagger go get -u github.com/swaggo/gin-swagger/swaggerFiles 编写swag // Response 定义 swag 文档返回的结构体 type Response struct { Code int ` json : \" code \" ` Msg string ` json : \" msg \" ` Data interface {} ` json : \" data \" ` } // GetArticles 获取多个文章 // @ Summary 获取多个文章 // @ Produce json // @ Param tag_id body int false \" TagID \" // @ Param state body int false \" State \" // @ Param created_by body int false \" CreatedBy \" // @ Success 200 { object } Response // @ Failure 500 { object } Response // @ Router / api / v1 / articles [ get ] func GetArticles ( c * gin . Context ) { data : = make ( map [ string ] interface {} ) maps : = make ( map [ string ] interface {} ) valid : = validation . Validation {} var state = - 1 if arg : = c . Query ( \" state \" ) ; arg != \"\" { state = com . StrTo ( arg ) . MustInt () maps [ \" state \" ] = state valid . Range ( state , 0 , 1 , \" state \" ) . Message ( \" 状态只允许0或1 \" ) } var tagID = - 1 if arg : = c . Query ( \" tag_id \" ) ; arg != \"\" { tagID = com . StrTo ( arg ) . MustInt () maps [ \" tag_id \" ] = tagID valid . Min ( tagID , 1 , \" tag_id \" ) . Message ( \" 标签ID必须大于0 \" ) } code : = e . INVALID_PARAMS if ! valid . HasErrors () { data [ \" list \" ] = models . GetArticles ( util . GetPage ( c ) , setting . PageSize , maps ) data [ \" total \" ] = models . GetTagTotal ( maps ) code = e . SUCCESS } else { for _ , err : = range valid . Errors { log . Printf ( \" err.key:%s, err.message:%s \" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \" code \" : code , \" msg \" : e . GetMsg ( code ) , \" data \" : data , } ) } 格式 // @Summary API描述 // @Produce json[生成..内容] // @Param id path/body/query int[type] false/true \"ID\"[程序中对应变量名字] // @Success 200 string \"ok\" --成功返回信息 // @Failure 500 string \"bad\" --失败返回信息 // @Routers api/v1/article/{id} [GET] 请求id, 请求方法 效果 访问 http://127.0.0.1:8000/swagger/index.html","text_tokens":["com","version","允许","swaggo","ok","$","strto","gettagtotal","*","by","success","程序","!","文章","的","created","{","true","id","setting","for","validation","没有","statusok","500","%","func","结构","v","方法","data","summary","只","createdby","bad","if","type","如何","tagid","[","state","example","html","code","?","自动","else","状态","信息","v1","如果","中","失败","printf",",","`","什么","msg","08","object","到","golang","path","描述","_","pagesize","produce","query","err","成功","key",")","cmd","getarticles","swagger","200","安装","添加","]","range","变量","行文","article",".","haserrors","tag","message","param","interface","v1.6","返回","编写","http","maps","则","string","router","response","arg","内容","使用","/","s","body","github","false","valid","-","3","接口","..","执行","}","articles","int","make","api","c","0","routers","context","移","getpage","h","将","total","需要","获取","swaggerfiles","可执行文件","json","gobin","struct",":","log","对应","是否","定义","invalid","util","0.1","，","文档","成器","体","大于","get","min","标签","\"","errors","index","u","127.0","failure","swag","bin","必须","models","：","e","访问","请求",";","mustint","list","生成","名字","或","是","goroot"," ","(","格式","8000","params","生成器","getmsg","在","go","效果","var","gin","@","map","多个","1","=","验证","文件"],"title":"go-gin-example 08： Swagger","title_tokens":["-","go","swagger","gin"," ","example","：","08"]},{"location":"Golang/Project/go-gin-example/08 Swagger/#go-gin-example-08-swagger","text":"","text_tokens":[],"title":"go-gin-example 08： Swagger","title_tokens":["-","go","swagger","gin"," ","example","：","08"]},{"location":"Golang/Project/go-gin-example/08 Swagger/#swagger","text":"接口生成器：自动生成接口文档","text_tokens":["生成器","文档","生成","接口","成器","自动","："],"title":"Swagger是什么?","title_tokens":["?","是","什么","swagger"]},{"location":"Golang/Project/go-gin-example/08 Swagger/#golangswagger","text":"","text_tokens":[],"title":"如何在golang中使用Swagger","title_tokens":["golang","在","如何","中","使用","swagger"]},{"location":"Golang/Project/go-gin-example/08 Swagger/#_1","text":"安装swag go get -u github.com/swaggo/swag/cmd/swag ，如果没有将 $GOROOT/bin 添加到 $PATH 中，则需要将swag的可执行文件移到 $GOBIN 中 验证是否安装成功 $ swag -v swag version v1.6.3 安装gin-swagger go get -u github.com/swaggo/gin-swagger go get -u github.com/swaggo/gin-swagger/swaggerFiles","text_tokens":["则","com","version","，","swaggo","如果","中","/","$","get","github","u","到","-","3","swag","bin","的","path","执行","没有","成功","移","将","cmd","goroot"," ","是否","swagger","v","安装","添加","需要","行文","swaggerfiles","可执行文件",".","go","gobin","gin","v1.6","验证","文件"],"title":"安装","title_tokens":["安装"]},{"location":"Golang/Project/go-gin-example/08 Swagger/#swag","text":"// Response 定义 swag 文档返回的结构体 type Response struct { Code int ` json : \" code \" ` Msg string ` json : \" msg \" ` Data interface {} ` json : \" data \" ` } // GetArticles 获取多个文章 // @ Summary 获取多个文章 // @ Produce json // @ Param tag_id body int false \" TagID \" // @ Param state body int false \" State \" // @ Param created_by body int false \" CreatedBy \" // @ Success 200 { object } Response // @ Failure 500 { object } Response // @ Router / api / v1 / articles [ get ] func GetArticles ( c * gin . Context ) { data : = make ( map [ string ] interface {} ) maps : = make ( map [ string ] interface {} ) valid : = validation . Validation {} var state = - 1 if arg : = c . Query ( \" state \" ) ; arg != \"\" { state = com . StrTo ( arg ) . MustInt () maps [ \" state \" ] = state valid . Range ( state , 0 , 1 , \" state \" ) . Message ( \" 状态只允许0或1 \" ) } var tagID = - 1 if arg : = c . Query ( \" tag_id \" ) ; arg != \"\" { tagID = com . StrTo ( arg ) . MustInt () maps [ \" tag_id \" ] = tagID valid . Min ( tagID , 1 , \" tag_id \" ) . Message ( \" 标签ID必须大于0 \" ) } code : = e . INVALID_PARAMS if ! valid . HasErrors () { data [ \" list \" ] = models . GetArticles ( util . GetPage ( c ) , setting . PageSize , maps ) data [ \" total \" ] = models . GetTagTotal ( maps ) code = e . SUCCESS } else { for _ , err : = range valid . Errors { log . Printf ( \" err.key:%s, err.message:%s \" , err . Key , err . Message ) } } c . JSON ( http . StatusOK , gin . H { \" code \" : code , \" msg \" : e . GetMsg ( code ) , \" data \" : data , } ) } 格式 // @Summary API描述 // @Produce json[生成..内容] // @Param id path/body/query int[type] false/true \"ID\"[程序中对应变量名字] // @Success 200 string \"ok\" --成功返回信息 // @Failure 500 string \"bad\" --失败返回信息 // @Routers api/v1/article/{id} [GET] 请求id, 请求方法","text_tokens":["com","允许","ok","strto","gettagtotal","*","by","success","程序","!","文章","的","created","{","true","id","setting","for","validation","statusok","500","%","func","结构","方法","data","summary","只","createdby","bad","if","type","tagid","[","state","code","else","状态","信息","v1","中","失败","printf",",","`","msg","object","path","描述","_","pagesize","produce","query","err","成功","key",")","getarticles","200","]","range","变量","article",".","haserrors","tag","message","param","interface","返回","http","maps","string","router","response","arg","内容","/","s","body","false","valid","-","..","}","articles","int","make","api","c","0","routers","context","getpage","h","total","获取","json","struct",":","log","对应","定义","invalid","util","文档","体","大于","get","min","标签","\"","errors","failure","swag","必须","models","e","请求",";","mustint","list","生成","名字","或"," ","(","格式","params","getmsg","var","gin","@","map","多个","1","="],"title":"编写swag","title_tokens":["swag","编写"]},{"location":"Golang/Project/go-gin-example/08 Swagger/#_2","text":"访问 http://127.0.0.1:8000/swagger/index.html","text_tokens":["0.1",".","swagger",":","/"," ","html","http","8000","index","访问","127.0"],"title":"效果","title_tokens":["效果"]},{"location":"Golang/Project/go-gin-example/09 Docker/","text":"go-gin-example 09：Docker Docker是什么 Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers.[6] Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels.[7] All containers are run by a single operating-system kernel and are thus more lightweight than virtual machines.[8] Docker是Paas的产品, 通过被成为 容器 的 系统级别 的虚拟化交付软件. 如何使用Docker 安装Docker(WIN10 PRO) 右键WINDOWS - 应用和功能 - 程序和功能 - 启用或关闭WINDOS功能 - 开启Hyper-V 开启 Hyper-V 可能导致 ShadowSocksR 端口被占用 官网 Docker基本指令 编写Dockerfile FROM golang:latest ENV GOPROXY https://goproxy.cn,direct WORKDIR $GOPATH /src/go-gin-example COPY . $GOPATH /src/go-gin-example RUN go build . EXPOSE 8000 ENTRYPOINT [ \"./go-gin-example\" ] 1. FROM : 指定基础镜像, 该指令必须要有,且得为第一条 2. WORKDIR : 指定工作目录路径, 若目录不存在, 则会创建改目录 3. COPY : 源路径 ... 目标路径, COPY 指令将 Dockerfile 文件所存在的上下文目录 复制 到目标路径位置 4. RUN : 执行命令 5. EXPOSE : 声明 运行时容器 提供服务端口, 仅仅是一个 声明 , 不会因为这个声明而开启这个端口 6. ENTRYPOINT : 指定 容器 启动程序的及参数(执行 ./go-gin-example) 运行 docker build - t gin - blog - docker . docker images docker run - p 8000 : 8000 gin - blog - docker 1. 在 . 当前环境运行 docker build 创建/构建镜像, -t 指定名称 2. docker images 查看镜像是否创建成功 3. 在本地8000端口运行容器 4. 发现 dial tcp 127.0.0.1:3306: connect: connection refused 错误 配置Mysql Docker docker pull mysql docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql 1. 拉取mysql镜像 2. 配置mysql端口 修改配置文件 conf.ini [database] TYPE = mysql USER = root PASSWORD = rootroot HOST = mysql:3306 NAME = blog TABLE_PREFIX = blog_ 关联Golang容器和Mysql容器 docker run --link mysql:mysql -p 8000:8000 gin-blog-docker 效果","text_tokens":["=","修改","workdir","as","set","table","$","packages","成为","关联","lightweight","by","程序","t","goproxy","服务","的","software","containers","single","一条","配置文件","被","环境","当前","thus","构建","这个","images","well","拉取","they","v","prefix","开启","及","如何","端口","build","type","run","上下文","[","example","位置","use","复制","host","为","发现","operating",",","什么","一个","存在","到","且","2","golang","a","level","基础","p","are","_","in","启用","root","one","channels","shadowsocksr","libraries","成功","database",")","dial","kernel","copy","and","文件","安装","]","can","可能","工作","defined","路径",".","命令","要","目录","pro","4","configuration","link","all","编写","应用","则","官网","password","with","blog","声明","占用","使用","/","direct","系统","hyper","virtual","virtualization","虚拟","win10","-","第一条","3","connect","rootroot","会","8","执行","pull","ini","3306","本地","...","tcp","仅仅","创建","功能","machines","service","files","运行","将","more","得","关闭","conf","交付","expose","paas","windos","软件","called","配置","docker",":","而","isolated","基本","不会","第一","执行命令","是否","6","指令","0.1","src","所","own","和","entrypoint","refused","to","因为","user","导致","错误","改","7","os","windows","\"","127.0","their","该","that","system","latest","有","时","cn","through","platform","other","必须","目标","不","通过","下文","09","容器","虚拟化","env","：","上下","mysql","e","启动","名称","each","d",";","gopath","右键","dockerfile","from","https","bundle","或","是","镜像"," ","(","another","8000","若","查看","than","指定","connection","is","在","go","产品","参数","效果","5","gin","name","提供","级别","of","deliver","1","communicate","products","源"],"title":"go-gin-example 09：Docker","title_tokens":["-","go","gin","docker"," ","example","09","："]},{"location":"Golang/Project/go-gin-example/09 Docker/#go-gin-example-09docker","text":"","text_tokens":[],"title":"go-gin-example 09：Docker","title_tokens":["-","go","gin","docker"," ","example","09","："]},{"location":"Golang/Project/go-gin-example/09 Docker/#docker","text":"Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers.[6] Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels.[7] All containers are run by a single operating-system kernel and are thus more lightweight than virtual machines.[8] Docker是Paas的产品, 通过被成为 容器 的 系统级别 的虚拟化交付软件.","text_tokens":["as","set","packages","成为","lightweight","by","的","software","containers","single","被","thus","well","they","run","[","use","operating",",","a","level","are","in","one","channels","libraries",")","kernel","and","]","can","defined",".","configuration","all","with","系统","virtual","virtualization","虚拟","-","8","machines","service","files","more","交付","paas","软件","called","docker","isolated","6","own","to","7","os","their","that","system","through","platform","other","通过","容器","虚拟化","each",";","from","bundle","是"," ","(","another","than","is","产品","级别","of","deliver","communicate","products"],"title":"Docker是什么","title_tokens":["docker","是","什么"]},{"location":"Golang/Project/go-gin-example/09 Docker/#docker_1","text":"","text_tokens":[],"title":"如何使用Docker","title_tokens":["docker","使用","如何"]},{"location":"Golang/Project/go-gin-example/09 Docker/#dockerwin10-pro","text":"右键WINDOWS - 应用和功能 - 程序和功能 - 启用或关闭WINDOS功能 - 开启Hyper-V 开启 Hyper-V 可能导致 ShadowSocksR 端口被占用 官网","text_tokens":["应用","官网","和","占用","导致","hyper","windows","程序","-","启用","被","功能","右键","shadowsocksr","或"," ","v","关闭","可能","windos","开启","端口"],"title":"安装Docker(WIN10 PRO)","title_tokens":[")","docker","pro"," ","(","安装","win10"]},{"location":"Golang/Project/go-gin-example/09 Docker/#docker_2","text":"","text_tokens":[],"title":"Docker基本指令","title_tokens":["docker","指令","基本"]},{"location":"Golang/Project/go-gin-example/09 Docker/#dockerfile","text":"FROM golang:latest ENV GOPROXY https://goproxy.cn,direct WORKDIR $GOPATH /src/go-gin-example COPY . $GOPATH /src/go-gin-example RUN go build . EXPOSE 8000 ENTRYPOINT [ \"./go-gin-example\" ] 1. FROM : 指定基础镜像, 该指令必须要有,且得为第一条 2. WORKDIR : 指定工作目录路径, 若目录不存在, 则会创建改目录 3. COPY : 源路径 ... 目标路径, COPY 指令将 Dockerfile 文件所存在的上下文目录 复制 到目标路径位置 4. RUN : 执行命令 5. EXPOSE : 声明 运行时容器 提供服务端口, 仅仅是一个 声明 , 不会因为这个声明而开启这个端口 6. ENTRYPOINT : 指定 容器 启动程序的及参数(执行 ./go-gin-example)","text_tokens":["workdir","$","程序","goproxy","服务","的","一条","这个","开启","及","build","端口","run","上下文","[","example","位置","复制","为",",","一个","存在","到","且","2","golang","基础",")","copy","]","工作","路径",".","命令","要","目录","4","则","声明","/","direct","-","第一条","3","会","执行","...","仅仅","创建","运行","将","得","expose","而",":","不会","第一","执行命令","6","指令","src","所","entrypoint","因为","改","\"","该","latest","有","时","cn","必须","目标","不","下文","env","容器","上下","启动","gopath","dockerfile","from","https","镜像","是"," ","(","若","8000","指定","go","参数","5","gin","提供","1","文件","源"],"title":"编写Dockerfile","title_tokens":["dockerfile","编写"]},{"location":"Golang/Project/go-gin-example/09 Docker/#_1","text":"docker build - t gin - blog - docker . docker images docker run - p 8000 : 8000 gin - blog - docker 1. 在 . 当前环境运行 docker build 创建/构建镜像, -t 指定名称 2. docker images 查看镜像是否创建成功 3. 在本地8000端口运行容器 4. 发现 dial tcp 127.0.0.1:3306: connect: connection refused 错误","text_tokens":["0.1","发现","blog","refused","/",",","错误","t","127.0","-","connect","3","2","p","3306","本地","容器","tcp","环境","当前","创建","名称","构建","images","成功","运行","dial","镜像"," ","8000","查看","指定","connection",".","在","build","端口","gin","docker","run",":","4","1","是否"],"title":"运行","title_tokens":["运行"]},{"location":"Golang/Project/go-gin-example/09 Docker/#mysql-docker","text":"docker pull mysql docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql 1. 拉取mysql镜像 2. 配置mysql端口","text_tokens":["password","-","2","pull","p","3306","_","e","mysql","root","d","拉取","镜像"," ",".","端口","配置","name","docker","run",":","1","="],"title":"配置Mysql Docker","title_tokens":["docker","mysql","配置"," "]},{"location":"Golang/Project/go-gin-example/09 Docker/#confini","text":"[database] TYPE = mysql USER = root PASSWORD = rootroot HOST = mysql:3306 NAME = blog TABLE_PREFIX = blog_","text_tokens":["host","password","blog","table","user","rootroot","3306","_","mysql","root","database"," ","prefix","]","type","name",":","[","="],"title":"修改配置文件conf.ini","title_tokens":["修改",".","配置","ini","配置文件","conf","文件"]},{"location":"Golang/Project/go-gin-example/09 Docker/#golangmysql","text":"docker run --link mysql:mysql -p 8000:8000 gin-blog-docker","text_tokens":["-","gin","blog","docker","run",":","p"," ","link","8000","mysql"],"title":"关联Golang容器和Mysql容器","title_tokens":["golang","和","容器","关联","mysql"]},{"location":"Golang/Project/go-gin-example/09 Docker/#_2","text":"","text_tokens":[],"title":"效果","title_tokens":["效果"]},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/","text":"go-gin-example 10： GORM-Callback 定制GORM Callbacks GORM Callback 是什么 You could define callback methods to pointer of model struct, it will be called when creating, updating, querying, deleting, if any callback returns an error, gorm will stop future operations and rollback all changes. 可以给模型结构体指针定义回调函数, 它将会在被创建/更新/查询/删除的时候调用, 如果回调返回了错误, gorm会停止未来行为操作并且回退所有改变. 之前程序未实现 Callback 方法, 需要为所有文件单独写一次 BeforeCreate 、 BeforeUpdate 方法 使用 gorm支持的callback方法 创建：BeforeSave、BeforeCreate、AfterCreate、AfterSave 更新：BeforeSave、BeforeUpdate、AfterUpdate、AfterSave 删除：BeforeDelete、AfterDelete 查询：AfterFind 定义callback 在 model.go 文件中定义 // updateTimeStampForCreateCallback will set `CreatedOn`, `ModifiedOn` when creating func updateTimeStampForCreateCallback ( scope * gorm . Scope ) { if ! scope . HasError () { nowTime := time . Now (). Unix () if createTimeField , ok := scope . FieldByName ( \"CreatedOn\" ); ok { if createTimeField . IsBlank { createTimeField . Set ( nowTime ) } } if modifyTimeField , ok := scope . FieldByName ( \"ModifiedOn\" ); ok { if modifyTimeField . IsBlank { modifyTimeField . Set ( nowTime ) } } } } // updateTimeStampForUpdateCallback will set `ModifyTime` when updating func updateTimeStampForUpdateCallback ( scope * gorm . Scope ) { if _ , ok := scope . Get ( \"gorm:update_column\" ); ! ok { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) } } 通过 scope.FieldByName(name) 判断是否存在相关字段, 该方法通过 scope.Fields() 获取所有字段 通过 .IsBlank 判断值是否为空 通过 .Set(interface{}) 设置相关值 通过 scope.Get() 获取参数的参数值, 案例中回去查找 gorm:update_column 这个字段的属性 通过 scope.SetColumn(Field, value) 设定字段的值 调用callback 在 model.go 的 ini 函数中注册callback db . Callback (). Create (). Replace ( \"gorm:update_time_stamp\" , updateTimeStampForCreateCallback ) db . Callback (). Update (). Replace ( \"gorm:update_time_stamp\" , updateTimeStampForUpdateCallback ) 效果 当程序写了 Callback 方法的时候, 当GORM执行到相关的操作会自动触发相应的 Callback 方法 拓展 软删除, 添加删除时间, 为 model.go 的 Model 结构体添加 DeletedOn 字段 type Model struct { ID int `gorm:\"primary_key\" json:\"id\"` CreatedOn int `json:\"created_on\"` ModifiedOn int `json:\"modified_on\"` DeletedOn int `json:\"deleted_on\"` } func deleteCallback ( scope * gorm . Scope ) { if ! scope . HasError () { var extraOption string if str , ok := scope . Get ( \"gorm:delete_option\" ); ok { extraOption = fmt . Sprint ( str ) } deletedOnField , hasDeletedOnField := scope . FieldByName ( \"DeletedOn\" ) if ! scope . Search . Unscoped && hasDeletedOnField { scope . Raw ( fmt . Sprintf ( \"UPDATE %v SET %v=%v%v%v\" , scope . QuotedTableName (), scope . Quote ( deletedOnField . DBName ), scope . AddToVars ( time . Now (). Unix ()), addExtraSpaceIfExist ( scope . CombinedConditionSql ()), addExtraSpaceIfExist ( extraOption ), )). Exec () } else { scope . Raw ( fmt . Sprintf ( \"DELETE FROM %v%v%v\" , scope . QuotedTableName (), addExtraSpaceIfExist ( scope . CombinedConditionSql ()), addExtraSpaceIfExist ( extraOption ), )). Exec () } } } func addExtraSpaceIfExist ( str string ) string { if str != \"\" { return \" \" + str } return \"\" } 在 model.go 的 ini函数 中添加 db.Callback().Delete().Replace(\"gorm:delete\", deleteCallback) 1. scope.QuotedTableName() 返回引用的表名 2. scope.Raw() 构建原生sql 3. fmt.Sprintf() 格式化并且返回格式化后的字符串数据 4. scope.AddToVars(value) 为字段添加参数 5. scope.Quote() 转义 6. scope 当你在数据库中文完成任何操作, scope包含了当前操作信息 // Scope contain current operation's information when you perform any operation on the database type Scope struct { Search * search Value interface {} SQL string SQLVars [] interface {} db * DB instanceID string primaryKeyField * Field skipLeft bool fields * [] * Field selectAttrs * [] string } REF: official: callback in gorm","text_tokens":["column","查找","数据库","callback","&&","information","指针","fields","beforesave","addextraspaceifexist","set","ok","primary","字符","单独","modifytimefield","*","raw","return","设置","程序","sprint","实现","!","后","search","引用","gorm","future","的","model","created","{","你","scope","unscoped","id","the","被","当前","creating","perform","+","可以","构建","这个","setcolumn","调用","%","func","结构","v","模型","方法","afterfind","原生","modifiedon","字段","10","exec","if","一次","type","changes","sprintf","[","example","回调","be","stamp","时候","自动","combinedconditionsql","定制","any","并且","为","else","信息","如果","中","querying","sql","will","replace","extraoption",",","updatetimestampforcreatecallback","`","什么","operation","给","段","official","软","存在","相关","到","deletedon","操作","2","callbacks","when","查询","aftercreate","haserror","current","_","回去","primarykeyfield","in","未","字符串","案例","任何","updatetimestampforupdatecallback","之前","database","you",")","key","and","值","添加","]","支持","isblank","hasdeletedonfield",".","它","delete","据库","stop","rollback","interface","删除","返回","createtimefield","option","all","quote","4","unix","string","为空","updating","operations","value","判断","deletedonfield","beforecreate","/","使用","s","bool","数值","时间","nowtime","-","3","quotedtablename","会","contain","it","}","ini","所有","db","执行","an","str","表名","int","ref","拓展","创建","field","modified","包含","转义","selectattrs","pointer","将","、","beforedelete","停止","需要","行为","v%","获取","deletecallback","deleted","on","'","called","error","json","sqlvars","instanceid","格式化","struct","afterupdate",":","写","methods","完成","函数","定义","returns","是否","注册","6","time","体","to","更新","回退","get","属性","错误","当","数据","\"","modifytime","fieldbyname","define","该","设定","参数值","fmt","通过","beforeupdate","：","afterdelete",";","未来","createdon","from","字","aftersave","是"," ","(","create","格式","could","now","改变","触发","update","相应","dbname","中文","在","了","go","参数","效果","name","gin","var","addtovars","5","of","1","=","skipleft","文件","deleting"],"title":"go-gin-example 10： GORM-Callback","title_tokens":["-","10","callback","gorm","go","gin"," ","example","："]},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#go-gin-example-10-gorm-callback","text":"","text_tokens":[],"title":"go-gin-example 10： GORM-Callback","title_tokens":["-","10","callback","gorm","go","gin"," ","example","："]},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#gorm-callbacks","text":"","text_tokens":[],"title":"定制GORM Callbacks","title_tokens":["callbacks"," ","gorm","定制"]},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#gorm-callback","text":"You could define callback methods to pointer of model struct, it will be called when creating, updating, querying, deleting, if any callback returns an error, gorm will stop future operations and rollback all changes. 可以给模型结构体指针定义回调函数, 它将会在被创建/更新/查询/删除的时候调用, 如果回调返回了错误, gorm会停止未来行为操作并且回退所有改变. 之前程序未实现 Callback 方法, 需要为所有文件单独写一次 BeforeCreate 、 BeforeUpdate 方法","text_tokens":["callback","指针","单独","程序","实现","gorm","future","的","model","被","creating","可以","调用","结构","模型","方法","if","一次","changes","回调","be","时候","any","并且","为","如果","querying","will",",","给","操作","when","查询","未","之前","you","and",".","它","stop","rollback","删除","返回","all","updating","operations","beforecreate","/","会","it","所有","an","创建","pointer","将","、","停止","需要","行为","called","error","struct","写","methods","函数","定义","returns","体","to","更新","回退","错误","define","beforeupdate","未来"," ","could","改变","在","了","of","文件","deleting"],"title":"GORM Callback 是什么","title_tokens":["callback","gorm","是"," ","什么"]},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#_1","text":"","text_tokens":[],"title":"使用","title_tokens":["使用"]},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#gormcallback","text":"创建：BeforeSave、BeforeCreate、AfterCreate、AfterSave 更新：BeforeSave、BeforeUpdate、AfterUpdate、AfterSave 删除：BeforeDelete、AfterDelete 查询：AfterFind","text_tokens":["afterdelete","beforesave","aftercreate","查询","beforecreate","aftersave","afterupdate","更新","、","beforeupdate"," ","删除","beforedelete","afterfind","：","创建"],"title":"gorm支持的callback方法","title_tokens":["callback","gorm","的","方法","支持"]},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#callback","text":"在 model.go 文件中定义 // updateTimeStampForCreateCallback will set `CreatedOn`, `ModifiedOn` when creating func updateTimeStampForCreateCallback ( scope * gorm . Scope ) { if ! scope . HasError () { nowTime := time . Now (). Unix () if createTimeField , ok := scope . FieldByName ( \"CreatedOn\" ); ok { if createTimeField . IsBlank { createTimeField . Set ( nowTime ) } } if modifyTimeField , ok := scope . FieldByName ( \"ModifiedOn\" ); ok { if modifyTimeField . IsBlank { modifyTimeField . Set ( nowTime ) } } } } // updateTimeStampForUpdateCallback will set `ModifyTime` when updating func updateTimeStampForUpdateCallback ( scope * gorm . Scope ) { if _ , ok := scope . Get ( \"gorm:update_column\" ); ! ok { scope . SetColumn ( \"ModifiedOn\" , time . Now (). Unix ()) } } 通过 scope.FieldByName(name) 判断是否存在相关字段, 该方法通过 scope.Fields() 获取所有字段 通过 .IsBlank 判断值是否为空 通过 .Set(interface{}) 设置相关值 通过 scope.Get() 获取参数的参数值, 案例中回去查找 gorm:update_column 这个字段的属性 通过 scope.SetColumn(Field, value) 设定字段的值","text_tokens":["column","查找","fields","set","ok","modifytimefield","*","设置","!","gorm","的","model","{","scope","creating","这个","setcolumn","func","方法","modifiedon","字段","if","中","will","updatetimestampforcreatecallback","`",",","段","存在","相关","when","haserror","_","回去","案例","updatetimestampforupdatecallback",")","值","isblank",".","interface","createtimefield","unix","为空","updating","value","判断","/","数值","nowtime","}","所有","field","获取",":","是否","定义","time","get","属性","\"","modifytime","fieldbyname","该","设定","参数值","通过",";","createdon","字"," ","(","now","update","在","go","参数","name","=","文件"],"title":"定义callback","title_tokens":["callback","定义"]},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#callback_1","text":"在 model.go 的 ini 函数中注册callback db . Callback (). Create (). Replace ( \"gorm:update_time_stamp\" , updateTimeStampForCreateCallback ) db . Callback (). Update (). Replace ( \"gorm:update_time_stamp\" , updateTimeStampForUpdateCallback )","text_tokens":["注册","callback","time","中","replace",",","updatetimestampforcreatecallback","\"","gorm","的","model","ini","db","_","updatetimestampforupdatecallback",")"," ","create","(","update",".","在","go",":","stamp","函数"],"title":"调用callback","title_tokens":["callback","调用"]},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#_2","text":"当程序写了 Callback 方法的时候, 当GORM执行到相关的操作会自动触发相应的 Callback 方法","text_tokens":["callback","当",",","相关","到","程序","操作","gorm","的","会","执行"," ","方法","触发","相应","了","写","自动","时候"],"title":"效果","title_tokens":["效果"]},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#_3","text":"软删除, 添加删除时间, 为 model.go 的 Model 结构体添加 DeletedOn 字段 type Model struct { ID int `gorm:\"primary_key\" json:\"id\"` CreatedOn int `json:\"created_on\"` ModifiedOn int `json:\"modified_on\"` DeletedOn int `json:\"deleted_on\"` } func deleteCallback ( scope * gorm . Scope ) { if ! scope . HasError () { var extraOption string if str , ok := scope . Get ( \"gorm:delete_option\" ); ok { extraOption = fmt . Sprint ( str ) } deletedOnField , hasDeletedOnField := scope . FieldByName ( \"DeletedOn\" ) if ! scope . Search . Unscoped && hasDeletedOnField { scope . Raw ( fmt . Sprintf ( \"UPDATE %v SET %v=%v%v%v\" , scope . QuotedTableName (), scope . Quote ( deletedOnField . DBName ), scope . AddToVars ( time . Now (). Unix ()), addExtraSpaceIfExist ( scope . CombinedConditionSql ()), addExtraSpaceIfExist ( extraOption ), )). Exec () } else { scope . Raw ( fmt . Sprintf ( \"DELETE FROM %v%v%v\" , scope . QuotedTableName (), addExtraSpaceIfExist ( scope . CombinedConditionSql ()), addExtraSpaceIfExist ( extraOption ), )). Exec () } } } func addExtraSpaceIfExist ( str string ) string { if str != \"\" { return \" \" + str } return \"\" } 在 model.go 的 ini函数 中添加 db.Callback().Delete().Replace(\"gorm:delete\", deleteCallback) 1. scope.QuotedTableName() 返回引用的表名 2. scope.Raw() 构建原生sql 3. fmt.Sprintf() 格式化并且返回格式化后的字符串数据 4. scope.AddToVars(value) 为字段添加参数 5. scope.Quote() 转义 6. scope 当你在数据库中文完成任何操作, scope包含了当前操作信息 // Scope contain current operation's information when you perform any operation on the database type Scope struct { Search * search Value interface {} SQL string SQLVars [] interface {} db * DB instanceID string primaryKeyField * Field skipLeft bool fields * [] * Field selectAttrs * [] string }","text_tokens":["数据库","&&","callback","information","fields","addextraspaceifexist","ok","set","primary","字符","*","raw","return","sprint","后","!","search","引用","gorm","的","model","created","{","你","scope","unscoped","id","the","当前","perform","+","构建","%","func","结构","v","原生","modifiedon","exec","if","type","sprintf","[","combinedconditionsql","else","any","并且","为","信息","中","sql","extraoption","replace",",","`","operation","段","软","deletedon","操作","2","when","current","haserror","_","primarykeyfield","字符串","任何","database","key",")","you","添加","]","hasdeletedonfield",".","delete","据库","interface","quote","删除","option","返回","4","unix","string","value","deletedonfield","/","s","bool","时间","3","quotedtablename","contain","}","ini","db","str","表名","int","field","modified","包含","转义","selectattrs","v%","deletecallback","deleted","on","'","json","sqlvars","instanceid","格式化","struct",":","完成","函数","6","time","体","当","get","数据","\"","fieldbyname","fmt",";","createdon","from","字"," ","(","格式","now","update","dbname","中文","在","go","了","参数","var","5","addtovars","1","=","skipleft"],"title":"拓展","title_tokens":["拓展"]},{"location":"Golang/Project/go-gin-example/10 GORM-Callback/#ref","text":"official: callback in gorm","text_tokens":["callback","gorm",":"," ","in","official"],"title":"REF:","title_tokens":["ref",":"]},{"location":"Golang/Project/go-gin-example/FlowChart/","text":"流程图 请求流程图 URL 请求打到 gin ，由 gin 分发各个请求到相应的接口 接口对应 GET ， POST ， PUT ， DELETE 等多种请求方式 接口接收 URL 中的参数，构造相应的CRUD查询，查询数据库 将数据库返回的数据返回到前端调用者 JWT产生以及认证 生成JWT JWT认证","text_tokens":["数据库","流程","，","jwt","中","get","调用者","构造","数据","产生","用者","到","url","的","接口","查询","post","等","多种","认证","以及","put","请求","生成","调用","由","方式","将","各个"," ","流程图","分发","打","crud","查询数据库","接收","相应","前端","参数","delete","据库","gin","对应","返回"],"title":"流程图","title_tokens":["流程","流程图"]},{"location":"Golang/Project/go-gin-example/FlowChart/#_1","text":"","text_tokens":[],"title":"流程图","title_tokens":["流程","流程图"]},{"location":"Golang/Project/go-gin-example/FlowChart/#_2","text":"URL 请求打到 gin ，由 gin 分发各个请求到相应的接口 接口对应 GET ， POST ， PUT ， DELETE 等多种请求方式 接口接收 URL 中的参数，构造相应的CRUD查询，查询数据库 将数据库返回的数据返回到前端调用者","text_tokens":["数据库","，","中","get","调用者","构造","数据","用者","到","url","的","接口","查询","post","等","多种","put","请求","调用","由","方式","将","各个"," ","分发","crud","打","查询数据库","接收","相应","前端","参数","delete","据库","gin","对应","返回"],"title":"请求流程图","title_tokens":["请求","流程","流程图"]},{"location":"Golang/Project/go-gin-example/FlowChart/#jwt","text":"生成JWT JWT认证","text_tokens":[" ","生成","认证","jwt"],"title":"JWT产生以及认证","title_tokens":["产生","认证","jwt","以及"]},{"location":"Golang/Project/go-gin-example/InterfaceTestInstance/","text":"接口测试实例","text_tokens":["接口","实例","测试"],"title":"接口测试实例","title_tokens":["接口","实例","测试"]},{"location":"Golang/Project/go-gin-example/InterfaceTestInstance/#_1","text":"","text_tokens":[],"title":"接口测试实例","title_tokens":["接口","实例","测试"]},{"location":"Linux/01 FormattingUdisk/","text":"Linux01: 彻底格式化U盘 在 cmd 下输入 diskpart 在弹出的窗口输出 list disk 选择目标磁盘 select disk 1 清除 clean","text_tokens":["clean","清除","磁盘","diskpart","的","弹出","目标","选择","下","输出","list","linux01","disk","cmd","输入"," ","彻底","窗口","格式","在","格式化","u盘",":","1","select"],"title":"Linux01: 彻底格式化U盘","title_tokens":["linux01","格式化","u盘",":"," ","彻底","格式"]},{"location":"Linux/01 FormattingUdisk/#linux01-u","text":"在 cmd 下输入 diskpart 在弹出的窗口输出 list disk 选择目标磁盘 select disk 1 清除 clean","text_tokens":["clean","清除","磁盘","diskpart","的","弹出","目标","选择","下","输出","list","disk","cmd","输入"," ","窗口","在","1","select"],"title":"Linux01: 彻底格式化U盘","title_tokens":["linux01","格式化","u盘",":"," ","彻底","格式"]},{"location":"Linux/01 Hello Manjaro/","text":"Hello Manjaro 安装 refus manjaro linux iso文件 U盘 基本配置 系统配置 添加国内源 sudo pacman-mirrors -c China 添加 archlinuxcn 中国源 sudo nvim /etc/pacman.conf [ archlinuxcn ] Server = https://mirrors.cloud.tencent.com/archlinuxcn/ $arch 更新 sudo pacman -Syyu 安装yay以安装AUR包 sudo pacman -Sy yay 修改系统时间 sudo timedatectl set-local-rtc true 配置Github 生成ssh-key, 添加 id_rsa.pub 到Github ssh-keygen -t -rsa -C \"your_email@example.com\" 设置用户名和邮件 git config --global user.name \"your_name\" git config --global user.email \"your_email\" git config -l # 查看配置 优化shell sudo pacman -Sy fish # 安装fish which fish # 查看fish位置 chsh -s /usr/bin/fish # 修改默认shell fish_config # shell美化 优化终端 原生终端: 设置透明背景 simple terminal git clone https://github.com/zyeking/st_config.git 配置Nvim yay -Sy neovim # 安装 yay -Sy npm nodejs # 安装npm和nodejs以安装coc插件 npm config set registry https://registry.npm.taobao.org # 修改npm国内源 npm config get registry # 测试 sudo touch ~/.config/nvim/init.vim # 创建配置文件 cd ~/.config/nvim git clone https://github.com/zyeking/nvim.git 配置Golang 软件 输入法 yay -Sy fcitx-sogoupinyin yay -Sy fcitx-im yay -Sy fcitx-configtool yay -Sy fcitx-qt4 # sudo nvim ~/.xprofile export GTK_IM_MODULE = fcitx export QT_IM_MODULE = fcitx export XMODIFIERS = \"@im=fcitx\" yay -Sy compton # 解决输入法黑边问题, 新名字为picom compton -b # 可添加到Autostart中 其他软件 yay -Sy google-chrome # 谷歌浏览器 yay -Sy netease-cloud-music # 网易云音乐 yay -Sy electronic-wechat # 微信 yay -Sy xmind # XMind yay -Sy calibre # 图书管理工具 yay -Sy nutstore # 坚果云 yay -Sy kdenlive # 视频剪辑工具 yay -Sy flameshot # 截图软件, 配置全局快捷键 yay -Sy typora # Markdown编辑器 yay -Sy latte-dock # dock栏 wps配置 yay -Sy wps-office # -cn为中文版 sudo nvim /usr/bin/wps # 添加以下配置解决无法输入中文的问题 export GTK_IM_MODULE = fcitx export QT_IM_MODULE = fcitx export XMODIFIERS = \"@im=fcitx\" KDE美化 Netspeed Event Calendar Active Window Control 其他问题 解决Manjaro重启壁纸重设问题 ifconfig指令找不到","text_tokens":["com","cloud","修改","touch","dock","用户","set","$","google","neovim","registry","t","设置","usr","fish","的","configtool","true","yay","配置文件","id","music","户名","office","管理工具","壁纸","chrome","坚果","浏览","优化","其他","美化","china","工具","无法","快捷","输入","邮件","sogoupinyin","原生","typora","边","your","sy","qt","markdown","u盘","默认","[","example","位置","微信","b","wechat","为","中文版","系统配置","文版","netspeed","中","wps",",","npm","视频","到","golang","找","包","config","浏览器","_","剪辑","sudo","截图","中国","qt4","统配","rtc","key","其他软件","测试","shell","terminal","添加","安装","]","nvim","etc","理工","active","全局",".","zyeking","module","云","global","以","gtk","org","系统配","问题","compton","nutstore","ssh","tencent","解决","/","s","图书","系统","不到","aur","用户名","github","l","时间","calibre","chsh","-","iso","#","网易","音乐","event","calendar","refus","control","重启","背景","export","archlinuxcn","c","创建","im","coc","新","server","pacman","timedatectl","manjaro","fcitx","electronic","taobao","hello","黑","init","conf","快捷键","window","编辑器","软件","ifconfig","配置",":","flameshot","基本","nodejs","git","入法","以下","cd","指令","栏","谷歌","linux","和","mirrors","st","vim","国内","视频剪辑","user","更新","get","xprofile","keygen","\"","终端","netease","arch","透明","rsa","编辑","重设","bin","kdenlive","cn","插件","which","local","xmind","pub","管理","email","clone","~","输入法","生成","https","名字","可"," ","查看","latte","kde","xmodifiers","picom","中文","simple","name","@","syyu","=","autostart","文件","源"],"title":"Hello Manjaro","title_tokens":["hello","manjaro"," "]},{"location":"Linux/01 Hello Manjaro/#hello-manjaro","text":"","text_tokens":[],"title":"Hello Manjaro","title_tokens":["hello","manjaro"," "]},{"location":"Linux/01 Hello Manjaro/#_1","text":"refus manjaro linux iso文件 U盘","text_tokens":["iso","linux","refus","u盘","manjaro"," ","文件"],"title":"安装","title_tokens":["安装"]},{"location":"Linux/01 Hello Manjaro/#_2","text":"","text_tokens":[],"title":"基本配置","title_tokens":["配置","基本"]},{"location":"Linux/01 Hello Manjaro/#_3","text":"添加国内源 sudo pacman-mirrors -c China 添加 archlinuxcn 中国源 sudo nvim /etc/pacman.conf [ archlinuxcn ] Server = https://mirrors.cloud.tencent.com/archlinuxcn/ $arch 更新 sudo pacman -Syyu 安装yay以安装AUR包 sudo pacman -Sy yay 修改系统时间 sudo timedatectl set-local-rtc true","text_tokens":["com","cloud","修改","mirrors","tencent","set","国内","/","$","更新","系统","aur","时间","arch","-","true","yay","包","local","sudo","中国","archlinuxcn","c","rtc","china","pacman","server","https","timedatectl"," ","添加","]","conf","安装","nvim","etc",".","sy",":","[","以","syyu","=","源"],"title":"系统配置","title_tokens":["系统配置","统配","配置","系统","系统配"]},{"location":"Linux/01 Hello Manjaro/#github","text":"生成ssh-key, 添加 id_rsa.pub 到Github ssh-keygen -t -rsa -C \"your_email@example.com\" 设置用户名和邮件 git config --global user.name \"your_name\" git config --global user.email \"your_email\" git config -l # 查看配置","text_tokens":["com","ssh","和","用户","user",",","用户名","keygen","github","\"","t","设置","到","l","-","rsa","#","config","id","_","户名","pub","c","email","生成","key"," ","邮件","查看","添加",".","your","配置","name","@","global","example","git"],"title":"配置Github","title_tokens":["github","配置"]},{"location":"Linux/01 Hello Manjaro/#shell","text":"sudo pacman -Sy fish # 安装fish which fish # 查看fish位置 chsh -s /usr/bin/fish # 修改默认shell fish_config # shell美化","text_tokens":["修改","/","s","chsh","-","fish","#","usr","bin","which","config","_","sudo","美化","pacman"," ","shell","查看","安装","sy","默认","位置"],"title":"优化shell","title_tokens":["shell","优化"]},{"location":"Linux/01 Hello Manjaro/#_4","text":"原生终端: 设置透明背景 simple terminal git clone https://github.com/zyeking/st_config.git","text_tokens":["com","st","/","终端","github","设置","透明","背景","config","_","clone","https"," ","terminal","原生",".","zyeking","simple",":","git"],"title":"优化终端","title_tokens":["终端","优化"]},{"location":"Linux/01 Hello Manjaro/#nvim","text":"yay -Sy neovim # 安装 yay -Sy npm nodejs # 安装npm和nodejs以安装coc插件 npm config set registry https://registry.npm.taobao.org # 修改npm国内源 npm config get registry # 测试 sudo touch ~/.config/nvim/init.vim # 创建配置文件 cd ~/.config/nvim git clone https://github.com/zyeking/nvim.git","text_tokens":["com","修改","touch","和","set","国内","vim","/","get","neovim","npm","github","registry","-","cd","#","插件","yay","config","配置文件","sudo","创建","coc","clone","~","https"," ","taobao","测试","安装","init","nvim",".","zyeking","sy","配置",":","以","org","nodejs","git","文件","源"],"title":"配置Nvim","title_tokens":["配置","nvim"]},{"location":"Linux/01 Hello Manjaro/#golang","text":"","text_tokens":[],"title":"配置Golang","title_tokens":["配置","golang"]},{"location":"Linux/01 Hello Manjaro/#_5","text":"输入法 yay -Sy fcitx-sogoupinyin yay -Sy fcitx-im yay -Sy fcitx-configtool yay -Sy fcitx-qt4 # sudo nvim ~/.xprofile export GTK_IM_MODULE = fcitx export QT_IM_MODULE = fcitx export XMODIFIERS = \"@im=fcitx\" yay -Sy compton # 解决输入法黑边问题, 新名字为picom compton -b # 可添加到Autostart中 其他软件 yay -Sy google-chrome # 谷歌浏览器 yay -Sy netease-cloud-music # 网易云音乐 yay -Sy electronic-wechat # 微信 yay -Sy xmind # XMind yay -Sy calibre # 图书管理工具 yay -Sy nutstore # 坚果云 yay -Sy kdenlive # 视频剪辑工具 yay -Sy flameshot # 截图软件, 配置全局快捷键 yay -Sy typora # Markdown编辑器 yay -Sy latte-dock # dock栏 wps配置 yay -Sy wps-office # -cn为中文版 sudo nvim /usr/bin/wps # 添加以下配置解决无法输入中文的问题 export GTK_IM_MODULE = fcitx export QT_IM_MODULE = fcitx export XMODIFIERS = \"@im=fcitx\"","text_tokens":["cloud","dock","google","usr","的","configtool","yay","music","office","管理工具","chrome","坚果","浏览","其他","工具","无法","快捷","输入","sogoupinyin","typora","边","sy","qt","markdown","微信","b","wechat","为","中文版","文版","中","wps",",","视频","到","浏览器","_","剪辑","sudo","截图","qt4","其他软件","添加","nvim","理工","全局",".","module","云","gtk","问题","compton","nutstore","解决","/","图书","calibre","-","音乐","#","网易","export","im","新","fcitx","electronic","黑","快捷键","编辑器","软件","配置","flameshot","入法","以下","栏","谷歌","视频剪辑","xprofile","\"","netease","编辑","bin","kdenlive","cn","xmind","管理","~","输入法","名字","可"," ","latte","xmodifiers","picom","中文","@","=","autostart"],"title":"软件","title_tokens":["软件"]},{"location":"Linux/01 Hello Manjaro/#kde","text":"Netspeed Event Calendar Active Window Control","text_tokens":["window","calendar","control","event","netspeed"," ","active"],"title":"KDE美化","title_tokens":["kde","美化"]},{"location":"Linux/01 Hello Manjaro/#_6","text":"解决Manjaro重启壁纸重设问题 ifconfig指令找不到","text_tokens":["问题","壁纸","指令","重设","ifconfig","重启","找","解决","manjaro"," ","不到"],"title":"其他问题","title_tokens":["问题","其他"]},{"location":"Linux/02 ChangeSources/","text":"Linux02: 更改Ubuntu源 备份源文件 添加源 更新 sudo cp /etc/apt/sources.list /etc/apt/sources_init.list sudo gedit /etc/apt/sources.list apt-get update","text_tokens":["源文件","/","更新","get","备份","-","更改","_","cp","sudo","ubuntu","linux02","list","sources"," ","添加","init","apt","etc","update",".",":","gedit","文件","源"],"title":"Linux02: 更改Ubuntu源","title_tokens":["linux02","更改",":"," ","ubuntu","源"]},{"location":"Linux/02 ChangeSources/#linux02-ubuntu","text":"备份源文件 添加源 更新 sudo cp /etc/apt/sources.list /etc/apt/sources_init.list sudo gedit /etc/apt/sources.list apt-get update","text_tokens":["源文件","/","更新","get","备份","-","_","cp","sudo","list","sources"," ","添加","init","apt","etc","update",".","gedit","文件","源"],"title":"Linux02: 更改Ubuntu源","title_tokens":["linux02","更改",":"," ","ubuntu","源"]},{"location":"Linux/MyUbuntu/01 Install/","text":"","text_tokens":[],"title":"01 Install","title_tokens":["01"," ","install"]},{"location":"Linux/MyUbuntu/toc/","text":"INSTALL CONFIGUE SOURCE IMGAE vim /etc/source.list GOOGLE PINYIN FCITX INDICATOR-MONITOR GITHUB PYTHON3 ln GOLANG VIM NEOVIM VUNDLE/VIM-PLUG VIM-GO AIRLINE NDTREE MARKDOWN ~~RANGER~~ TMUX curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/ plug.vim","text_tokens":["com","vim","/","google","dirs","neovim","github","plug","raw","-","golang","config","ranger","pinyin","python3","imgae","tmux","~","list","airline","master","ln","flo","https","fcitx"," ","configue","create","etc","source","nvim","monitor","autoload","githubusercontent",".","junegunn","curl","go","markdown","indicator","install",":","ndtree","vundle"],"title":"Toc","title_tokens":["toc"]},{"location":"Others/01 MySql/","text":"使用Mysql 安装 下载 配置 编辑 my.ini 文件 在Mysql安装文件夹下新建 my.ini 文件 [client] # 设置mysql客户端默认字符集 default-character-set = utf8 [mysqld] # 设置3306端口 port = 3306 # 设置mysql的安装目录 basedir = C:/Software/IDE/mysql-8.0.18 # 设置数据存放位置 datadir = C:/Software/IDE/mysql-8.0.18/data # 设置初始密码, 好像没有什么用 default_authentication_plugin = mysql_native_password # 允许最大连接数 max_connections = 20 # 服务端使用的字符集默认为8比特编码的latin1字符集 character-set-server = UTF8MB4 # 创建新表时将使用的默认存储引擎 default-storage-engine = INNODB 其中 datadir 不能有任何文件, 否则启动mysql服务会报错: --initialize specified but the data directory has files in it. Aborting. 配置完成后进入安装路径的 .\\bin 目录, 用管理员身份打开 CMD 键入: mysqld --initialize --console 进行初始化得到密码 输入mysql指令发现 You must reset your password using ALTER USER statement before executing this statement. , 需要通过 alter user user() identified by \"mypwd\"; 修改密码即可. mysql常用指令 [WINDOWS] mysqld install : 安装mysql服务 [WINDOWS管理员] net start mysql : 启动mysql服务 mysql -u root -p : 进入mysql alter user user() identified by \"passwrod\"; : 修改mysql密码 mysql可视化 heidi sql REF: 安装mysql 设置mysql密码","text_tokens":["允许","修改","件夹","常用","用","初始","好像","set","directory","字符","specified","8.0","后","设置","by","服务","密码","的","software","the","mysqld","datadir","没有","statement","输入","character","data","否则","your","端口","默认","引擎","[","位置","identified","文件夹","为","utf8","服务端","发现","initialize","sql",",","什么","has","得到","新表时","p","_","in","初始密码","root","start","任何","using","下载","passwrod","you","must",")","即可","cmd","编码","安装","]","不能","storage","native","executing","路径",".","目录","install","进入","reset","可视","连接","password","新建","客户端","使用","/","可视化","存放","管理员","authentication","-","#","ide","其中","8","会","it","ini","3306","比特","ref","键入","c","plugin","创建","but","files","server","basedir","将","存储","需要","engine","innodb","18","配置",":","net","完成","this","指令","报错","default","connections","console","20","user","数据","进行","\"","windows","u","有","编辑","bin","port","通过","客户","before","字符集","mysql","max","utf8mb4","管理","启动","mypwd","alter",";","下","\\","连接数","latin1","身份"," ","(","heidi","最大","在","初始化","client","=","aborting","打开","文件","my"],"title":"使用Mysql","title_tokens":["使用","mysql"]},{"location":"Others/01 MySql/#mysql","text":"","text_tokens":[],"title":"使用Mysql","title_tokens":["使用","mysql"]},{"location":"Others/01 MySql/#_1","text":"下载","text_tokens":["下载"],"title":"安装","title_tokens":["安装"]},{"location":"Others/01 MySql/#_2","text":"编辑 my.ini 文件 在Mysql安装文件夹下新建 my.ini 文件 [client] # 设置mysql客户端默认字符集 default-character-set = utf8 [mysqld] # 设置3306端口 port = 3306 # 设置mysql的安装目录 basedir = C:/Software/IDE/mysql-8.0.18 # 设置数据存放位置 datadir = C:/Software/IDE/mysql-8.0.18/data # 设置初始密码, 好像没有什么用 default_authentication_plugin = mysql_native_password # 允许最大连接数 max_connections = 20 # 服务端使用的字符集默认为8比特编码的latin1字符集 character-set-server = UTF8MB4 # 创建新表时将使用的默认存储引擎 default-storage-engine = INNODB 其中 datadir 不能有任何文件, 否则启动mysql服务会报错: --initialize specified but the data directory has files in it. Aborting. 配置完成后进入安装路径的 .\\bin 目录, 用管理员身份打开 CMD 键入: mysqld --initialize --console 进行初始化得到密码 输入mysql指令发现 You must reset your password using ALTER USER statement before executing this statement. , 需要通过 alter user user() identified by \"mypwd\"; 修改密码即可.","text_tokens":["允许","修改","件夹","用","初始","好像","set","directory","字符","specified","8.0","后","设置","by","服务","密码","的","software","the","mysqld","datadir","没有","statement","输入","character","data","否则","your","端口","默认","引擎","[","位置","identified","文件夹","为","utf8","服务端","发现","initialize",",","什么","has","得到","新表时","_","in","初始密码","任何","using","you","must",")","即可","cmd","编码","安装","]","不能","storage","native","executing","路径",".","目录","进入","reset","连接","password","新建","客户端","/","使用","存放","管理员","authentication","-","#","ide","其中","8","会","it","ini","3306","比特","键入","c","plugin","创建","but","files","server","basedir","将","存储","需要","engine","innodb","18","配置",":","完成","this","指令","报错","default","connections","console","20","user","数据","进行","\"","有","编辑","bin","port","通过","客户","before","字符集","mysql","max","utf8mb4","管理","启动","mypwd","alter",";","下","\\","连接数","latin1","身份"," ","(","最大","在","初始化","client","=","aborting","打开","文件","my"],"title":"配置","title_tokens":["配置"]},{"location":"Others/01 MySql/#mysql_1","text":"[WINDOWS] mysqld install : 安装mysql服务 [WINDOWS管理员] net start mysql : 启动mysql服务 mysql -u root -p : 进入mysql alter user user() identified by \"passwrod\"; : 修改mysql密码","text_tokens":["修改","user","windows","管理员","\"","u","by","-","服务","密码","p","mysqld","管理","mysql","root","start","启动","alter",";","passwrod",")"," ","(","安装","]","install",":","[","net","进入","identified"],"title":"mysql常用指令","title_tokens":["指令","mysql","常用"]},{"location":"Others/01 MySql/#mysql_2","text":"heidi sql","text_tokens":[" ","heidi","sql"],"title":"mysql可视化","title_tokens":["可视化","可视","mysql"]},{"location":"Others/01 MySql/#ref","text":"安装mysql 设置mysql密码","text_tokens":["密码"," ","安装","mysql","设置"],"title":"REF:","title_tokens":["ref",":"]},{"location":"Others/Excel/01 AutoCreateTime/","text":"1. 自动创建数据时间，不受其他修改影响的 NOW() 在 选项 下的 公式 启用 迭代计算 使得excel不会报循环引用的警告⚠ 此处的 C列 会自动根据 D列 数据创建时间，该时间不会根据其他的列改变 excel = IF ( D2 = \"\" , \"\" , IF ( C2 = \"\" , NOW () , C2 )) 参考URL： 循环引用 自动创建时间后，锁定时间","text_tokens":["=","，","修改","公式","此处","列",",","数据","\"","后","时间","该","受","锁定","引用","url","的","会","不","警告","影响","启用","使得","excel","d2","：","c","创建","循环","d","下","c2","其他","计算",")","选项","⚠"," ","(","报","now","改变","迭代",".","在","if","参考","根据","1","不会","自动"],"title":"\t1. 自动创建数据时间，不受其他修改影响的`NOW()`","title_tokens":["，","修改","`","数据","时间","受","的","不","影响","创建","其他",")"," ","(","\t","now",".","1","自动"]},{"location":"Others/Excel/01 AutoCreateTime/#1-now","text":"在 选项 下的 公式 启用 迭代计算 使得excel不会报循环引用的警告⚠ 此处的 C列 会自动根据 D列 数据创建时间，该时间不会根据其他的列改变 excel = IF ( D2 = \"\" , \"\" , IF ( C2 = \"\" , NOW () , C2 )) 参考URL： 循环引用 自动创建时间后，锁定时间","text_tokens":["自动","=","，","公式","此处","列",",","数据","\"","后","时间","该","锁定","引用","url","的","会","警告","启用","excel","使得","d2","：","c","d","循环","创建","下","c2","其他","计算","选项",")","⚠"," ","(","报","now","改变","在","if","参考","根据","不会","迭代"],"title":"1. 自动创建数据时间，不受其他修改影响的NOW()","title_tokens":["受","(","，",".","修改","其他","的","影响",")","不"," ","1","数据","自动","now","时间","创建"]},{"location":"Others/Excel/02 AutoCreateTimeByMacro/","text":"2. 用宏自动创建数据时间 Private Sub Worksheet_Change ( ByVal Target As Range ) ' ______说明 ↓ ___________________________________ '某列单元格发生变化 '若变化值不为空，对应列添加变化时间点日期时间 '若变化值为空，删除对应单元格数据 '示例为 A列第2行发生变化 ，对应的 B列添加或删除日期 ' ______说明 ↑ ___________________________________ Application . ScreenUpdating = False '关闭屏幕刷新 Dim cA , cB , startRG As String Dim offsetc As Long Dim rg As Range ' ______设置参数 ↓ _________________ cA = \"A\" '变化区域所在列 cB = \"B\" '日期生成列 startRG = \"A1\" '变化区域首单元格 ( 防止改动表头触发事件 ) ' ______设置参数 ↑ _________________ offsetc = Columns ( cB ). Column - Columns ( cA ). Column If Not Application . Intersect ( Target , Columns ( cA ), Range ( startRG , ActiveCell . SpecialCells ( xlLastCell ))) Is Nothing Then For Each rg In Intersect ( Target , Columns ( cA ), Range ( startRG , ActiveCell . SpecialCells ( xlLastCell ))) If rg <> \"\" Then With rg . Offset ( 0 , offsetc ) . Value = Now . NumberFormatLocal = \"yyyy/m/d h:mm:ss ; @\" End With Else rg . Offset ( 0 , offsetc ). Clear End If Next rg End If Application . ScreenUpdating = True '恢复屏幕刷新 End Sub","text_tokens":["column","startrg","intersect","m","as","设置","not","的","true","activecell","for","↓","offsetc","if","a1","cb","发生变化","自动","___________________________________","byval","b","else","恢复","为","specialcells","屏幕",",","clear","空","2","a","application","_","行","in","columns","screenupdating","next","mm",")","dim","添加","range",".","yyyy","删除","示例","值为","change","string","value","private","with","变化","单元","/","值不为","false","时间","sub","-","ss","end","改动","表头","numberformatlocal","创建","0","说明","日期","ca","防止","h","某列","rg","关闭","'","long","区域","对应",":","所在","首","用宏","↑","offset","，","刷新","<","_________________","列","worksheet",">","数据","\"","target","生变","______","xllastcell","第","nothing","d","each",";","生成","不为","then","单元格","或"," ","(","若","now","触发","is","事件","参数","@","发生","点","="],"title":"2. 用宏自动创建数据时间","title_tokens":["自动",".","2"," ","数据","用宏","时间","创建"]},{"location":"Others/Excel/02 AutoCreateTimeByMacro/#2","text":"Private Sub Worksheet_Change ( ByVal Target As Range ) ' ______说明 ↓ ___________________________________ '某列单元格发生变化 '若变化值不为空，对应列添加变化时间点日期时间 '若变化值为空，删除对应单元格数据 '示例为 A列第2行发生变化 ，对应的 B列添加或删除日期 ' ______说明 ↑ ___________________________________ Application . ScreenUpdating = False '关闭屏幕刷新 Dim cA , cB , startRG As String Dim offsetc As Long Dim rg As Range ' ______设置参数 ↓ _________________ cA = \"A\" '变化区域所在列 cB = \"B\" '日期生成列 startRG = \"A1\" '变化区域首单元格 ( 防止改动表头触发事件 ) ' ______设置参数 ↑ _________________ offsetc = Columns ( cB ). Column - Columns ( cA ). Column If Not Application . Intersect ( Target , Columns ( cA ), Range ( startRG , ActiveCell . SpecialCells ( xlLastCell ))) Is Nothing Then For Each rg In Intersect ( Target , Columns ( cA ), Range ( startRG , ActiveCell . SpecialCells ( xlLastCell ))) If rg <> \"\" Then With rg . Offset ( 0 , offsetc ) . Value = Now . NumberFormatLocal = \"yyyy/m/d h:mm:ss ; @\" End With Else rg . Offset ( 0 , offsetc ). Clear End If Next rg End If Application . ScreenUpdating = True '恢复屏幕刷新 End Sub","text_tokens":["column","startrg","intersect","m","as","设置","not","的","true","activecell","for","↓","offsetc","if","a1","cb","发生变化","byval","___________________________________","b","else","恢复","为","specialcells","屏幕",",","clear","空","2","a","application","_","行","in","columns","screenupdating","next","mm",")","dim","添加","range",".","yyyy","删除","示例","值为","change","string","value","private","with","变化","单元","/","值不为","false","时间","sub","-","ss","end","改动","表头","numberformatlocal","0","说明","日期","ca","防止","h","某列","rg","关闭","'","long","区域","对应",":","所在","首","↑","offset","，","刷新","<","_________________","列","worksheet",">","数据","\"","target","生变","______","xllastcell","第","nothing","d","each",";","生成","不为","then","单元格","或"," ","(","若","now","触发","is","事件","参数","@","发生","点","="],"title":"2. 用宏自动创建数据时间","title_tokens":["自动",".","2"," ","数据","用宏","时间","创建"]},{"location":"Others/Excel/03 FormatUnit/","text":"3. 为单元格添加格式 选中需要操作列, 右键选择 设置单元格式 ,选择 自定义 , 输入 :G/[格式]","text_tokens":["为","g","列","单元","/",",","设置","3","操作","选择","右键","选中","单元格","输入"," ","格式","添加","需要","]","自定义","自定",".",":","[","定义"],"title":"3. 为单元格添加格式","title_tokens":["为","3",".","单元格","单元"," ","格式","添加"]},{"location":"Others/Excel/03 FormatUnit/#3","text":"选中需要操作列, 右键选择 设置单元格式 ,选择 自定义 , 输入 :G/[格式]","text_tokens":["g","列","单元","/",",","设置","操作","选择","右键","选中","输入"," ","格式","需要","]","自定义","自定",":","[","定义"],"title":"3. 为单元格添加格式","title_tokens":["为","3",".","单元格","单元"," ","格式","添加"]},{"location":"Others/Excel/04 RepairArrowKey/","text":"4. 方向键无法控制excel表格上下、左右移动 解决： 可能是 SCROLL LOCK 键被打开，在笔记本电脑上可以通过 FN+C 或者 FN+NUMB LK 解锁","text_tokens":["左右","无法控制","，","笔记","方向","上","解锁","解决","移动","控制","或者","通过","被","excel","：","上下","c","方向键","scroll","+","可以","表格","无法","、","是"," ","fn","电脑","可能","lk","笔记本","笔记本电脑",".","在","numb","键","4","lock","打开"],"title":"4. 方向键无法控制excel表格上下、左右移动","title_tokens":["方向键","左右","无法控制","表格",".","控制","方向","无法","移动","4","、"," ","excel","上下"]},{"location":"Others/Excel/04 RepairArrowKey/#4-excel","text":"解决： 可能是 SCROLL LOCK 键被打开，在笔记本电脑上可以通过 FN+C 或者 FN+NUMB LK 解锁","text_tokens":["，","笔记","上","解锁","解决","或者","通过","被","：","c","scroll","+","可以","是"," ","fn","电脑","可能","lk","笔记本","笔记本电脑","在","numb","键","lock","打开"],"title":"4. 方向键无法控制excel表格上下、左右移动","title_tokens":["方向键","左右","无法控制","表格",".","控制","方向","无法","移动","4","、"," ","excel","上下"]},{"location":"Others/Excel/05 MultipleInsertValue/","text":"5. 将单元格的空值换成目标值 选中目标单元格 ctrl + G 选择 定位条件 下的 空值 （或其他） 在输入栏中输入目标值，按 crtl + Enter","text_tokens":["，","g","单元","（","crtl","的","目标","选择","+","下","条件","选中","其他","空值","enter","单元格","或","将","）"," ","输入","ctrl",".","在","5","目标值","按","标值","定位","换成","栏中"],"title":"5. 将单元格的空值换成目标值","title_tokens":[".","的","空值","5","单元格","目标","单元","标值","将","目标值"," ","换成"]},{"location":"Others/Excel/05 MultipleInsertValue/#5","text":"选中目标单元格 ctrl + G 选择 定位条件 下的 空值 （或其他） 在输入栏中输入目标值，按 crtl + Enter","text_tokens":["，","g","单元","（","crtl","的","目标","选择","+","下","条件","选中","其他","空值","enter","单元格","或","）"," ","输入","ctrl","在","目标值","按","标值","定位","栏中"],"title":"5. 将单元格的空值换成目标值","title_tokens":[".","的","空值","5","单元格","目标","单元","标值","将","目标值"," ","换成"]},{"location":"Python/01 UsingTesseract/","text":"Tesseract 下载地址 安装 设置环境变量 系统变量Path Tesseract-OCR路径 新建 TESSDATA_PREFIX 系统变量，变量值为 ...\\Tesseract-OCR\\tessdata 测试 python安装pytesseract pip install pytesseract 修改Python37\\site-packages内的 pytesseract\\pytesseract.py 内的文件，指定安装路径 tesseract_cmd = '.../Tesseract-OCR/tesseract.exe') import pytesseract from PIL import Image // pytesseract . pytesseract . tesseract_cmd = 'C://Program Files (x86)/Tesseract-OCR/tesseract.exe' text = pytesseract . image_to_string ( Image . open ( './demo.jpg' )) print ( text ) REF: 安装 测试","text_tokens":["string","为","，","新建","修改","ocr","/","to","系统","packages","环境变","image","设置","pip","demo","-","python","py","内","path","变量值","量值","site","的","_","tesseract","环境变量","...","ref","环境","program","c","python37","\\","下载","files","from","text",")","cmd"," ","测试","(","open","安装","prefix","变量","exe","print","pytesseract","指定","import","pil","x86","路径","'",".","tessdata","地址","install",":","=","jpg","文件"],"title":"Tesseract","title_tokens":["tesseract"]},{"location":"Python/01 UsingTesseract/#tesseract","text":"下载地址 安装 设置环境变量 系统变量Path Tesseract-OCR路径 新建 TESSDATA_PREFIX 系统变量，变量值为 ...\\Tesseract-OCR\\tessdata 测试 python安装pytesseract pip install pytesseract 修改Python37\\site-packages内的 pytesseract\\pytesseract.py 内的文件，指定安装路径 tesseract_cmd = '.../Tesseract-OCR/tesseract.exe') import pytesseract from PIL import Image // pytesseract . pytesseract . tesseract_cmd = 'C://Program Files (x86)/Tesseract-OCR/tesseract.exe' text = pytesseract . image_to_string ( Image . open ( './demo.jpg' )) print ( text )","text_tokens":["string","为","，","新建","修改","ocr","/","to","系统","packages","环境变","image","设置","pip","demo","-","python","py","内","path","变量值","量值","site","的","_","环境变量","tesseract","...","环境","program","c","python37","\\","下载","files","from","text",")","cmd"," ","测试","(","open","安装","prefix","变量","exe","print","pytesseract","指定","import","pil","x86","路径","'",".","tessdata","地址","install",":","=","jpg","文件"],"title":"Tesseract","title_tokens":["tesseract"]},{"location":"Python/01 UsingTesseract/#ref","text":"安装 测试","text_tokens":["安装"," ","测试"],"title":"REF:","title_tokens":["ref",":"]},{"location":"Python/02 dzdianpingSpider/","text":"大众点评评价爬取逻辑 分析 如图，评价中的 孩 字在源码中时被 <svgmtsi class=\"cfd1i\"></svgmtsi> 标签加密了。 在css中可以看到该svg图片地址为 background-image: url(//s3plus.meituan.net/v1/mss_0a06a471f9514fc79c981b5466f56b91/svgtextcss/2ec02e25ea201ca1b6b415747003614e.svg); 进入该地址发现是字体文件 加密字体的css中有 background: -0.0px -1808.0px; ，通过搜索可知 x / font-size（svg文件中①） + 1 可以得到该字体在svg中的第几个；比较y坐标和②的比较，其中，取 y<N 中的N值 孩 字 background: -0.0px -1808.0px; 对照可知：x=1，y<1831的path id=47 REF： 大众点评评论抓取-加密评论信息完整抓取","text_tokens":["爬取","完整","②","图片","的","对照","id","被","+","可以","x","s3plus","class","中有","坐标","评价","n","svg","font","。","为","发现","中时","v1","信息","中","px","（","image","得到","path","_","①","如图","字体","第几个","评论","第几",")","值","逻辑","取","抓取",".","进入","孩","2ec02e25ea201ca1b6b415747003614e","分析","1831","meituan","/","size","-","可知","看到","其中","cfd1i","ref","）","加密","1808.0","源码","mss","svgmtsi",":","net","0.0","；","，","几个","<","和",">","标签","\"","该","大众","47","url","css","通过","点评","background","：",";","比较","字","是"," ","(","svgtextcss","在","了","搜索","0a06a471f9514fc79c981b5466f56b91","地址","1","=","y","文件"],"title":"大众点评评价爬取逻辑","title_tokens":["爬取","大众","评价","点评","逻辑"]},{"location":"Python/02 dzdianpingSpider/#_1","text":"","text_tokens":[],"title":"大众点评评价爬取逻辑","title_tokens":["爬取","大众","评价","点评","逻辑"]},{"location":"Python/02 dzdianpingSpider/#_2","text":"如图，评价中的 孩 字在源码中时被 <svgmtsi class=\"cfd1i\"></svgmtsi> 标签加密了。 在css中可以看到该svg图片地址为 background-image: url(//s3plus.meituan.net/v1/mss_0a06a471f9514fc79c981b5466f56b91/svgtextcss/2ec02e25ea201ca1b6b415747003614e.svg); 进入该地址发现是字体文件 加密字体的css中有 background: -0.0px -1808.0px; ，通过搜索可知 x / font-size（svg文件中①） + 1 可以得到该字体在svg中的第几个；比较y坐标和②的比较，其中，取 y<N 中的N值 孩 字 background: -0.0px -1808.0px; 对照可知：x=1，y<1831的path id=47","text_tokens":["②","图片","的","对照","id","被","+","可以","x","s3plus","class","中有","坐标","评价","n","svg","font","。","为","发现","中时","v1","中","px","（","image","得到","path","_","①","如图","字体","第几",")","文件","值","取",".","进入","孩","2ec02e25ea201ca1b6b415747003614e","1831","meituan","/","size","-","可知","看到","其中","cfd1i","）","加密","1808.0","源码","mss","svgmtsi",":","net","0.0","；","，","几个","<","和",">","标签","\"","该","47","url","css","通过","background","：",";","比较","字","是"," ","(","svgtextcss","在","了","搜索","0a06a471f9514fc79c981b5466f56b91","地址","1","=","y","第几个"],"title":"分析","title_tokens":["分析"]},{"location":"Python/02 dzdianpingSpider/#ref","text":"大众点评评论抓取-加密评论信息完整抓取","text_tokens":["抓取","-","大众","信息","评论","完整","点评","加密"],"title":"REF：","title_tokens":["ref","："]}]}